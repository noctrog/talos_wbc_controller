/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-11-01 23:15:15.723026
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include <xpp_talos/ikfast_left.h> // found inside share/openrave-X.Y/python/ikfast.h

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((ikfast_left_leg::IkReal)6.28318530717959)
#define IKPI  ((ikfast_left_leg::IkReal)3.14159265358979)
#define IKPI_2  ((ikfast_left_leg::IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

namespace ikfast_left_leg {
using namespace ikfast;

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE_LEFT {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((ikfast_left_leg::IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((ikfast_left_leg::IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((ikfast_left_leg::IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((ikfast_left_leg::IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
void ComputeFk(const ikfast_left_leg::IkReal* j, ikfast_left_leg::IkReal* eetrans, ikfast_left_leg::IkReal* eerot) {
ikfast_left_leg::IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((1.0)*x7);
x13=((0.107)*x11);
x14=((0.325)*x1);
x15=((0.107)*x8);
x16=((0.325)*x4);
x17=((0.107)*x7);
x18=((0.38)*x4);
x19=((1.0)*x2);
x20=((1.0)*x4);
x21=((1.0)*x3);
x22=((1.0)*x8);
x23=(x1*x10);
x24=(x2*x4);
x25=(x10*x6);
x26=(x0*x1);
x27=((-1.0)*x5);
x28=(x0*x3);
x29=((-1.0)*x6);
x30=(x10*x3);
x31=(x2*x28);
x32=(x0*x10*x5);
x33=(x1*x19*x4);
x34=((((-1.0)*x33))+x28);
x35=((((-1.0)*x1*x20))+x31);
x36=(x26+((x24*x3)));
x37=((((-1.0)*x19*x26))+(((-1.0)*x20*x3)));
x38=((((-1.0)*x32))+((x25*x4)));
x39=(x34*x5);
x40=(x35*x6);
x41=(((x10*x20*x5))+(((1.0)*x0*x25)));
x42=(x37*x6);
x43=(((x35*x5))+((x6*(((((-1.0)*x19*x3*x4))+(((-1.0)*x26)))))));
x44=(((x6*(((((-1.0)*x0*x21))+x33))))+((x37*x5)));
x45=(((x27*x36))+((x29*x35)));
x46=((((-1.0)*x12*x38))+(((-1.0)*x22*x41)));
x47=((((-1.0)*x12*x43))+(((-1.0)*x22*x45)));
x48=(((x22*(((((-1.0)*x27*x34))+(((-1.0)*x29*x37))))))+(((-1.0)*x12*x44)));
eerot[0]=(((x7*((x39+x42))))+((x44*x8)));
eerot[1]=(((x11*x48))+(((-1.0)*x23*x9)));
eerot[2]=(((x11*x23))+((x48*x9)));
ikfast_left_leg::IkReal x49=((1.0)*x3);
eetrans[0]=((-0.02)+((x5*(((((-1.0)*x0*x14*x2))+(((-1.0)*x16*x49))))))+(((-1.0)*x13*x23))+(((-1.0)*x18*x49))+((x9*((((x17*x44))+((x15*(((((-1.0)*x39))+(((-1.0)*x42))))))))))+(((-0.38)*x2*x26))+((x6*((((x14*x24))+(((-0.325)*x28)))))));
eerot[3]=(((x43*x8))+((x7*((x40+((x36*x5)))))));
eerot[4]=(((x30*x9))+((x11*x47)));
eerot[5]=(((x47*x9))+(((-1.0)*x10*x11*x21)));
ikfast_left_leg::IkReal x50=((1.0)*x14);
eetrans[1]=((0.085)+((x9*((((x17*x43))+((x15*x45))))))+(((-1.0)*x1*x18))+(((0.38)*x31))+((x13*x30))+((x6*(((((-1.0)*x16*x2*x3))+(((-1.0)*x0*x50))))))+((x5*(((((0.325)*x31))+(((-1.0)*x4*x50)))))));
eerot[6]=(((x38*x8))+(((-1.0)*x41*x7)));
eerot[7]=(((x11*x46))+((x2*x9)));
eerot[8]=((((-1.0)*x11*x19))+((x46*x9)));
eetrans[2]=((-0.27105)+(((-0.38)*x0*x10))+(((-0.325)*x32))+((x16*x25))+((x9*((((x17*x38))+((x15*x41))))))+((x13*x2)));
}

int GetNumFreeParameters() { return 0; }
int* GetFreeParameters() { return NULL; }
int GetNumJoints() { return 6; }

int GetIkRealSize() { return sizeof(ikfast_left_leg::IkReal); }

int GetIkType() { return 0x67000001; }

class IKSolver {
public:
ikfast_left_leg::IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

ikfast_left_leg::IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const ikfast_left_leg::IkReal* eetrans, const ikfast_left_leg::IkReal* eerot, const ikfast_left_leg::IkReal* pfree, IkSolutionListBase<ikfast_left_leg::IkReal>& solutions) {
j0=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<ikfast_left_leg::IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((0.02)+(((0.107)*r02))+px);
new_r10=((-1.0)*r12);
new_r11=r11;
new_r12=r10;
new_py=((-0.085)+(((0.107)*r12))+py);
new_r20=((-1.0)*r22);
new_r21=r21;
new_r22=r20;
new_pz=((0.27105)+pz+(((0.107)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
ikfast_left_leg::IkReal x51=((1.0)*px);
ikfast_left_leg::IkReal x52=((1.0)*pz);
ikfast_left_leg::IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
{
ikfast_left_leg::IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.01224696356275)+(((4.04858299595142)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
ikfast_left_leg::IkReal j5eval[1];
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j4eval[2];
j4eval[0]=((1.0)+(((1.36710059171598)*(cj3*cj3)))+(((1.36710059171598)*(sj3*sj3)))+(((2.33846153846154)*cj3)));
j4eval[1]=((IKabs(sj3))+(((2.63157894736842)*(IKabs(((0.325)+(((0.38)*cj3))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5]

} else
{
{
ikfast_left_leg::IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
ikfast_left_leg::IkReal x54=((0.325)+(((0.38)*cj3)));
CheckValue<ikfast_left_leg::IkReal> x57 = IKatan2WithCheck(ikfast_left_leg::IkReal(((0.38)*sj3)),ikfast_left_leg::IkReal(x54),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
ikfast_left_leg::IkReal x55=((1.0)*(x57.value));
if((((x54*x54)+(((0.1444)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<ikfast_left_leg::IkReal> x58=IKPowWithIntegerCheck(IKabs(IKsqrt(((x54*x54)+(((0.1444)*(sj3*sj3)))))),-1);
if(!x58.valid){
continue;
}
if( ((npz*(x58.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x58.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
ikfast_left_leg::IkReal x56=IKasin((npz*(x58.value)));
j4array[0]=(x56+(((-1.0)*x55)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x55))+(((-1.0)*x56)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
ikfast_left_leg::IkReal j5eval[3];
ikfast_left_leg::IkReal x59=((19.0)*sj3);
ikfast_left_leg::IkReal x60=((50.0)*cj4*npz);
ikfast_left_leg::IkReal x61=(((sj4*(npx*npx)))+((sj4*(npy*npy))));
j5eval[0]=x61;
j5eval[1]=IKsign(x61);
j5eval[2]=((IKabs((((npx*x60))+(((-1.0)*npx*x59)))))+(IKabs((((npy*x59))+(((-1.0)*npy*x60))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j5eval[3];
ikfast_left_leg::IkReal x62=((76.0)*cj3);
ikfast_left_leg::IkReal x63=((200.0)*npz*sj4);
ikfast_left_leg::IkReal x64=(((cj4*(npx*npx)))+((cj4*(npy*npy))));
j5eval[0]=x64;
j5eval[1]=((IKabs((((npy*x63))+(((-1.0)*npy*x62))+(((-65.0)*npy)))))+(IKabs((((npx*x62))+(((-1.0)*npx*x63))+(((65.0)*npx))))));
j5eval[2]=IKsign(x64);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j5eval[3];
ikfast_left_leg::IkReal x65=((65.0)*cj4);
ikfast_left_leg::IkReal x66=((76.0)*npy);
ikfast_left_leg::IkReal x67=(sj3*sj4);
ikfast_left_leg::IkReal x68=(cj3*cj4);
ikfast_left_leg::IkReal x69=((76.0)*npx);
ikfast_left_leg::IkReal x70=((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))));
j5eval[0]=x70;
j5eval[1]=IKsign(x70);
j5eval[2]=((IKabs(((((-1.0)*x66*x67))+((npy*x65))+((x66*x68)))))+(IKabs(((((-1.0)*npx*x65))+((x67*x69))+(((-1.0)*x68*x69))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[4];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
ikfast_left_leg::IkReal x71=npy*npy;
ikfast_left_leg::IkReal x72=npx*npx;
j5eval[0]=(x72+x71);
j5eval[1]=IKsign(((((50.0)*x71))+(((50.0)*x72))));
j5eval[2]=361.0;
j5eval[3]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<ikfast_left_leg::IkReal> x74 = IKatan2WithCheck(ikfast_left_leg::IkReal(npx),ikfast_left_leg::IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x74.valid){
continue;
}
ikfast_left_leg::IkReal x73=x74.value;
j5array[0]=((-1.0)*x73);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x73)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j5))))+(((-1.0)*npx*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<ikfast_left_leg::IkReal> x910 = IKatan2WithCheck(ikfast_left_leg::IkReal(npx),ikfast_left_leg::IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
ikfast_left_leg::IkReal x909=x910.value;
j5array[0]=((-1.0)*x909);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x909)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j5))))+(((-1.0)*npx*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<ikfast_left_leg::IkReal> x911 = IKatan2WithCheck(ikfast_left_leg::IkReal(((19.0)*npy*sj3)),ikfast_left_leg::IkReal(((-19.0)*npx*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x912=IKPowWithIntegerCheck(IKsign(((((50.0)*(npy*npy)))+(((50.0)*(npx*npx))))),-1);
if(!x912.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x911.value)+(((1.5707963267949)*(x912.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[2];
ikfast_left_leg::IkReal x913=IKcos(j5);
ikfast_left_leg::IkReal x914=IKsin(j5);
ikfast_left_leg::IkReal x915=((1.0)*npy);
evalcond[0]=((((-1.0)*x913*x915))+(((-1.0)*npx*x914)));
evalcond[1]=(((npx*x913))+(((0.38)*sj3))+(((-1.0)*x914*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[4];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
ikfast_left_leg::IkReal x916=npy*npy;
ikfast_left_leg::IkReal x917=npx*npx;
j5eval[0]=((((-1.0)*x917))+(((-1.0)*x916)));
j5eval[1]=IKsign(((((-50.0)*x916))+(((-50.0)*x917))));
j5eval[2]=361.0;
j5eval[3]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<ikfast_left_leg::IkReal> x919 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*npx)),ikfast_left_leg::IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
ikfast_left_leg::IkReal x918=x919.value;
j5array[0]=((-1.0)*x918);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x918)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j5))))+(((-1.0)*npx*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<ikfast_left_leg::IkReal> x921 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*npx)),ikfast_left_leg::IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
ikfast_left_leg::IkReal x920=x921.value;
j5array[0]=((-1.0)*x920);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x920)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j5))))+(((-1.0)*npx*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<ikfast_left_leg::IkReal> x922 = IKatan2WithCheck(ikfast_left_leg::IkReal(((19.0)*npy*sj3)),ikfast_left_leg::IkReal(((-19.0)*npx*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x922.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x923=IKPowWithIntegerCheck(IKsign(((((-50.0)*(npx*npx)))+(((-50.0)*(npy*npy))))),-1);
if(!x923.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x922.value)+(((1.5707963267949)*(x923.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[2];
ikfast_left_leg::IkReal x924=IKsin(j5);
ikfast_left_leg::IkReal x925=IKcos(j5);
ikfast_left_leg::IkReal x926=((1.0)*x925);
evalcond[0]=((((-1.0)*npy*x926))+(((-1.0)*npx*x924)));
evalcond[1]=((((-1.0)*npx*x926))+((npy*x924))+(((0.38)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
ikfast_left_leg::IkReal x927=((76.0)*cj3);
ikfast_left_leg::IkReal x928=((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))));
j5eval[0]=x928;
j5eval[1]=((IKabs((((npy*x927))+(((65.0)*npy)))))+(IKabs(((((-1.0)*npx*x927))+(((-65.0)*npx))))));
j5eval[2]=IKsign(x928);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
ikfast_left_leg::IkReal x929=((0.38)*cj3);
CheckValue<ikfast_left_leg::IkReal> x930=IKPowWithIntegerCheck(IKsign(((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))))),-1);
if(!x930.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x931 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((0.325)*npy))+((npy*x929)))),ikfast_left_leg::IkReal(((((-1.0)*npx*x929))+(((-0.325)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x931.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x930.value)))+(x931.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[2];
ikfast_left_leg::IkReal x932=IKsin(j5);
ikfast_left_leg::IkReal x933=IKcos(j5);
ikfast_left_leg::IkReal x934=((1.0)*x933);
evalcond[0]=((((-1.0)*npy*x934))+(((-1.0)*npx*x932)));
evalcond[1]=((0.325)+((npy*x932))+(((-1.0)*npx*x934))+(((0.38)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
ikfast_left_leg::IkReal x935=((76.0)*cj3);
ikfast_left_leg::IkReal x936=((npx*npx)+(npy*npy));
j5eval[0]=x936;
j5eval[1]=((IKabs(((((-1.0)*npx*x935))+(((-65.0)*npx)))))+(IKabs((((npy*x935))+(((65.0)*npy))))));
j5eval[2]=IKsign(x936);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
ikfast_left_leg::IkReal x937=((0.38)*cj3);
CheckValue<ikfast_left_leg::IkReal> x938 = IKatan2WithCheck(ikfast_left_leg::IkReal((((npy*x937))+(((0.325)*npy)))),ikfast_left_leg::IkReal(((((-1.0)*npx*x937))+(((-0.325)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x939=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x939.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x938.value)+(((1.5707963267949)*(x939.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[2];
ikfast_left_leg::IkReal x940=IKcos(j5);
ikfast_left_leg::IkReal x941=IKsin(j5);
ikfast_left_leg::IkReal x942=((1.0)*npy);
evalcond[0]=((((-1.0)*npx*x941))+(((-1.0)*x940*x942)));
evalcond[1]=((0.325)+(((0.38)*cj3))+(((-1.0)*x941*x942))+((npx*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
ikfast_left_leg::IkReal x943=((0.325)*cj4);
ikfast_left_leg::IkReal x944=((0.38)*cj3*cj4);
ikfast_left_leg::IkReal x945=((0.38)*sj3*sj4);
CheckValue<ikfast_left_leg::IkReal> x946=IKPowWithIntegerCheck(IKsign(((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))))),-1);
if(!x946.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x947 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((-1.0)*npy*x945))+((npy*x943))+((npy*x944)))),ikfast_left_leg::IkReal(((((-1.0)*npx*x943))+(((-1.0)*npx*x944))+((npx*x945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x946.value)))+(x947.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x948=IKcos(j5);
ikfast_left_leg::IkReal x949=IKsin(j5);
ikfast_left_leg::IkReal x950=((1.0)*sj4);
ikfast_left_leg::IkReal x951=((0.38)*cj3);
ikfast_left_leg::IkReal x952=((0.38)*sj3);
ikfast_left_leg::IkReal x953=((1.0)*x948);
ikfast_left_leg::IkReal x954=(npy*x949);
evalcond[0]=((((-1.0)*npy*x953))+(((-1.0)*npx*x949)));
evalcond[1]=(((npx*sj4*x948))+(((-1.0)*cj4*npz))+(((-1.0)*x950*x954))+x952);
evalcond[2]=((0.325)+(((-1.0)*npz*x950))+(((-1.0)*cj4*npx*x953))+x951+((cj4*x954)));
evalcond[3]=((((-1.0)*npx*x953))+(((0.325)*cj4))+(((-1.0)*sj4*x952))+x954+((cj4*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
ikfast_left_leg::IkReal x955=((0.38)*cj3);
ikfast_left_leg::IkReal x956=(npz*sj4);
CheckValue<ikfast_left_leg::IkReal> x957 = IKatan2WithCheck(ikfast_left_leg::IkReal((((npy*x956))+(((-1.0)*npy*x955))+(((-0.325)*npy)))),ikfast_left_leg::IkReal(((((0.325)*npx))+((npx*x955))+(((-1.0)*npx*x956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x958=IKPowWithIntegerCheck(IKsign((((cj4*(npx*npx)))+((cj4*(npy*npy))))),-1);
if(!x958.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x959=IKcos(j5);
ikfast_left_leg::IkReal x960=IKsin(j5);
ikfast_left_leg::IkReal x961=((1.0)*sj4);
ikfast_left_leg::IkReal x962=((0.38)*cj3);
ikfast_left_leg::IkReal x963=((0.38)*sj3);
ikfast_left_leg::IkReal x964=((1.0)*x959);
ikfast_left_leg::IkReal x965=(npy*x960);
evalcond[0]=((((-1.0)*npx*x960))+(((-1.0)*npy*x964)));
evalcond[1]=((((-1.0)*x961*x965))+((npx*sj4*x959))+(((-1.0)*cj4*npz))+x963);
evalcond[2]=((0.325)+(((-1.0)*npz*x961))+x962+(((-1.0)*cj4*npx*x964))+((cj4*x965)));
evalcond[3]=((((-1.0)*npx*x964))+(((0.325)*cj4))+x965+(((-1.0)*sj4*x963))+((cj4*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
ikfast_left_leg::IkReal x966=(cj4*npz);
ikfast_left_leg::IkReal x967=((0.38)*sj3);
CheckValue<ikfast_left_leg::IkReal> x968=IKPowWithIntegerCheck(IKsign((((sj4*(npx*npx)))+((sj4*(npy*npy))))),-1);
if(!x968.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x969 = IKatan2WithCheck(ikfast_left_leg::IkReal((((npy*x967))+(((-1.0)*npy*x966)))),ikfast_left_leg::IkReal((((npx*x966))+(((-1.0)*npx*x967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x968.value)))+(x969.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x970=IKcos(j5);
ikfast_left_leg::IkReal x971=IKsin(j5);
ikfast_left_leg::IkReal x972=((1.0)*sj4);
ikfast_left_leg::IkReal x973=((0.38)*cj3);
ikfast_left_leg::IkReal x974=((0.38)*sj3);
ikfast_left_leg::IkReal x975=((1.0)*x970);
ikfast_left_leg::IkReal x976=(npy*x971);
evalcond[0]=((((-1.0)*npy*x975))+(((-1.0)*npx*x971)));
evalcond[1]=(((npx*sj4*x970))+(((-1.0)*cj4*npz))+(((-1.0)*x972*x976))+x974);
evalcond[2]=((0.325)+(((-1.0)*cj4*npx*x975))+((cj4*x976))+(((-1.0)*npz*x972))+x973);
evalcond[3]=(((cj4*x973))+(((-1.0)*npx*x975))+(((0.325)*cj4))+x976+(((-1.0)*sj4*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<ikfast_left_leg::IkReal> x978 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*npy)),ikfast_left_leg::IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
ikfast_left_leg::IkReal x977=x978.value;
j5array[0]=((-1.0)*x977);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x977)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
ikfast_left_leg::IkReal j4eval[3];
ikfast_left_leg::IkReal x979=(npy*sj5);
ikfast_left_leg::IkReal x980=(cj5*npx);
ikfast_left_leg::IkReal x981=((950.0)*sj3);
ikfast_left_leg::IkReal x982=((950.0)*cj3);
j4eval[0]=((1.01224696356275)+cj3);
j4eval[1]=((IKabs((((npz*x982))+((x979*x981))+(((812.5)*npz))+(((-1.0)*x980*x981)))))+(IKabs((((npz*x981))+(((812.5)*x980))+(((-812.5)*x979))+(((-1.0)*x979*x982))+((x980*x982))))));
j4eval[2]=IKsign(((625.0625)+(((617.5)*cj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j4eval[3];
ikfast_left_leg::IkReal x983=((50.0)*npz);
ikfast_left_leg::IkReal x984=(npy*sj5);
ikfast_left_leg::IkReal x985=(cj5*npx);
ikfast_left_leg::IkReal x986=(npz*sj3);
ikfast_left_leg::IkReal x987=((1.16923076923077)*cj3);
ikfast_left_leg::IkReal x988=((19.0)*cj3);
j4eval[0]=((((-1.0)*x985))+(((1.16923076923077)*x986))+((x984*x987))+x984+(((-1.0)*x985*x987)));
j4eval[1]=((IKabs(((-5.28125)+(((-12.35)*cj3))+((npz*x983))+(((-7.22)*(cj3*cj3))))))+(IKabs((((x983*x984))+(((6.175)*sj3))+(((7.22)*cj3*sj3))+(((-1.0)*x983*x985))))));
j4eval[2]=IKsign(((((16.25)*x984))+(((19.0)*x986))+(((-16.25)*x985))+((x984*x988))+(((-1.0)*x985*x988))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j4eval[3];
ikfast_left_leg::IkReal x989=cj5*cj5;
ikfast_left_leg::IkReal x990=npy*npy;
ikfast_left_leg::IkReal x991=npz*npz;
ikfast_left_leg::IkReal x992=npx*npx;
ikfast_left_leg::IkReal x993=((19.0)*npz);
ikfast_left_leg::IkReal x994=(npy*sj5);
ikfast_left_leg::IkReal x995=((19.0)*sj3);
ikfast_left_leg::IkReal x996=(cj5*npx);
ikfast_left_leg::IkReal x997=((19.0)*cj3);
ikfast_left_leg::IkReal x998=((50.0)*x990);
ikfast_left_leg::IkReal x999=(x989*x992);
j4eval[0]=((((-1.0)*x991))+(((-1.0)*x999))+(((-1.0)*x990))+((x989*x990))+(((2.0)*x994*x996)));
j4eval[1]=((IKabs(((((-16.25)*npz))+(((-1.0)*x994*x995))+(((-1.0)*cj3*x993))+((x995*x996)))))+(IKabs((((x994*x997))+(((-1.0)*x996*x997))+(((-1.0)*sj3*x993))+(((16.25)*x994))+(((-16.25)*x996))))));
j4eval[2]=IKsign((((x989*x998))+(((100.0)*x994*x996))+(((-1.0)*x998))+(((-50.0)*x991))+(((-50.0)*x999))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
ikfast_left_leg::IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
ikfast_left_leg::IkReal x1000=npy*npy;
ikfast_left_leg::IkReal x1001=cj5*cj5;
ikfast_left_leg::IkReal x1002=((19.0)*npz);
ikfast_left_leg::IkReal x1003=(npy*sj5);
ikfast_left_leg::IkReal x1004=((19.0)*sj3);
ikfast_left_leg::IkReal x1005=(cj5*npx);
ikfast_left_leg::IkReal x1006=((19.0)*cj3);
ikfast_left_leg::IkReal x1007=((50.0)*x1001);
CheckValue<ikfast_left_leg::IkReal> x1008 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((-16.25)*npz))+((x1004*x1005))+(((-1.0)*cj3*x1002))+(((-1.0)*x1003*x1004)))),ikfast_left_leg::IkReal(((((-16.25)*x1005))+(((16.25)*x1003))+(((-1.0)*x1005*x1006))+(((-1.0)*sj3*x1002))+((x1003*x1006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1008.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x1009=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1007*(npx*npx)))+((x1000*x1007))+(((-50.0)*(npz*npz)))+(((100.0)*x1003*x1005))+(((-50.0)*x1000)))),-1);
if(!x1009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1008.value)+(((1.5707963267949)*(x1009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x1010=IKsin(j4);
ikfast_left_leg::IkReal x1011=IKcos(j4);
ikfast_left_leg::IkReal x1012=(npy*sj5);
ikfast_left_leg::IkReal x1013=((0.38)*cj3);
ikfast_left_leg::IkReal x1014=((1.0)*npz);
ikfast_left_leg::IkReal x1015=((0.38)*sj3);
ikfast_left_leg::IkReal x1016=((1.0)*x1010);
ikfast_left_leg::IkReal x1017=((0.38)*x1011);
ikfast_left_leg::IkReal x1018=((1.0)*cj5*npx);
evalcond[0]=((((-1.0)*x1014))+(((0.325)*x1010))+((x1011*x1015))+((x1010*x1013)));
evalcond[1]=((((-1.0)*x1012*x1016))+(((-1.0)*x1011*x1014))+x1015+((cj5*npx*x1010)));
evalcond[2]=((0.325)+(((-1.0)*x1011*x1018))+(((-1.0)*x1010*x1014))+x1013+((x1011*x1012)));
evalcond[3]=((((-1.0)*x1010*x1015))+x1012+(((-1.0)*x1018))+(((0.325)*x1011))+((x1011*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
ikfast_left_leg::IkReal x1019=(npy*sj5);
ikfast_left_leg::IkReal x1020=((50.0)*npz);
ikfast_left_leg::IkReal x1021=(cj5*npx);
ikfast_left_leg::IkReal x1022=((19.0)*cj3);
CheckValue<ikfast_left_leg::IkReal> x1023 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((6.175)*sj3))+(((-1.0)*x1020*x1021))+((x1019*x1020))+(((7.22)*cj3*sj3)))),ikfast_left_leg::IkReal(((-5.28125)+(((-12.35)*cj3))+((npz*x1020))+(((-7.22)*(cj3*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x1024=IKPowWithIntegerCheck(IKsign(((((16.25)*x1019))+(((-1.0)*x1021*x1022))+((x1019*x1022))+(((-16.25)*x1021))+(((19.0)*npz*sj3)))),-1);
if(!x1024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1023.value)+(((1.5707963267949)*(x1024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x1025=IKsin(j4);
ikfast_left_leg::IkReal x1026=IKcos(j4);
ikfast_left_leg::IkReal x1027=(npy*sj5);
ikfast_left_leg::IkReal x1028=((0.38)*cj3);
ikfast_left_leg::IkReal x1029=((1.0)*npz);
ikfast_left_leg::IkReal x1030=((0.38)*sj3);
ikfast_left_leg::IkReal x1031=((1.0)*x1025);
ikfast_left_leg::IkReal x1032=((0.38)*x1026);
ikfast_left_leg::IkReal x1033=((1.0)*cj5*npx);
evalcond[0]=(((x1026*x1030))+(((0.325)*x1025))+(((-1.0)*x1029))+((x1025*x1028)));
evalcond[1]=((((-1.0)*x1027*x1031))+x1030+((cj5*npx*x1025))+(((-1.0)*x1026*x1029)));
evalcond[2]=((0.325)+x1028+(((-1.0)*x1026*x1033))+((x1026*x1027))+(((-1.0)*x1025*x1029)));
evalcond[3]=((((-1.0)*x1033))+(((-1.0)*x1025*x1030))+x1027+(((0.325)*x1026))+((x1026*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
ikfast_left_leg::IkReal x1034=(npy*sj5);
ikfast_left_leg::IkReal x1035=((950.0)*cj3);
ikfast_left_leg::IkReal x1036=(cj5*npx);
ikfast_left_leg::IkReal x1037=((950.0)*sj3);
CheckValue<ikfast_left_leg::IkReal> x1038 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((-1.0)*x1036*x1037))+(((812.5)*npz))+((npz*x1035))+((x1034*x1037)))),ikfast_left_leg::IkReal(((((812.5)*x1036))+(((-1.0)*x1034*x1035))+(((-812.5)*x1034))+((npz*x1037))+((x1035*x1036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x1039=IKPowWithIntegerCheck(IKsign(((625.0625)+(((617.5)*cj3)))),-1);
if(!x1039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1038.value)+(((1.5707963267949)*(x1039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x1040=IKsin(j4);
ikfast_left_leg::IkReal x1041=IKcos(j4);
ikfast_left_leg::IkReal x1042=(npy*sj5);
ikfast_left_leg::IkReal x1043=((0.38)*cj3);
ikfast_left_leg::IkReal x1044=((1.0)*npz);
ikfast_left_leg::IkReal x1045=((0.38)*sj3);
ikfast_left_leg::IkReal x1046=((1.0)*x1040);
ikfast_left_leg::IkReal x1047=((0.38)*x1041);
ikfast_left_leg::IkReal x1048=((1.0)*cj5*npx);
evalcond[0]=(((x1040*x1043))+((x1041*x1045))+(((0.325)*x1040))+(((-1.0)*x1044)));
evalcond[1]=(x1045+(((-1.0)*x1041*x1044))+(((-1.0)*x1042*x1046))+((cj5*npx*x1040)));
evalcond[2]=((0.325)+x1043+((x1041*x1042))+(((-1.0)*x1041*x1048))+(((-1.0)*x1040*x1044)));
evalcond[3]=(x1042+((x1041*x1043))+(((-1.0)*x1040*x1045))+(((0.325)*x1041))+(((-1.0)*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<ikfast_left_leg::IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
ikfast_left_leg::IkReal x75=(cj4*r02);
ikfast_left_leg::IkReal x76=((1.0)*sj5);
ikfast_left_leg::IkReal x77=((1.0)*sj3);
ikfast_left_leg::IkReal x78=((-1.0)*sj4);
ikfast_left_leg::IkReal x79=((((-1.0)*r01*x76))+((cj5*r00)));
ikfast_left_leg::IkReal x80=(((cj5*r10))+(((-1.0)*r11*x76)));
ikfast_left_leg::IkReal x81=(((cj5*r20))+(((-1.0)*r21*x76)));
ikfast_left_leg::IkReal x82=(((cj4*x79))+((r02*sj4)));
ikfast_left_leg::IkReal x83=(((r12*sj4))+((cj4*x80)));
ikfast_left_leg::IkReal x84=(((r22*sj4))+((cj4*x81)));
ikfast_left_leg::IkReal x85=(((x78*x80))+((cj4*r12)));
ikfast_left_leg::IkReal x86=(((cj4*r22))+((x78*x81)));
new_r00=((((-1.0)*x77*x82))+((cj3*(((((-1.0)*sj4*x79))+x75)))));
new_r01=(((sj3*((((x78*x79))+x75))))+((cj3*x82)));
new_r02=(((r00*sj5))+((cj5*r01)));
new_r10=(((cj3*x85))+(((-1.0)*x77*x83)));
new_r11=(((cj3*x83))+((sj3*x85)));
new_r12=(((cj5*r11))+((r10*sj5)));
new_r20=(((cj3*x86))+(((-1.0)*x77*x84)));
new_r21=(((cj3*x84))+((sj3*x86)));
new_r22=(((cj5*r21))+((r20*sj5)));
{
ikfast_left_leg::IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=new_r22;
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
ikfast_left_leg::IkReal j0eval[3];
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[3];
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[2];
j0eval[0]=cj1;
j0eval[1]=new_r12;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
ikfast_left_leg::IkReal j2mul = 1;
j2=0;
j0mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].fmul = j0mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
ikfast_left_leg::IkReal j2mul = 1;
j2=0;
j0mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].fmul = j0mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
ikfast_left_leg::IkReal x87=new_r22*new_r22;
ikfast_left_leg::IkReal x88=((16.0)*new_r10);
ikfast_left_leg::IkReal x89=((16.0)*new_r01);
ikfast_left_leg::IkReal x90=((16.0)*new_r00);
ikfast_left_leg::IkReal x91=(new_r11*new_r22);
ikfast_left_leg::IkReal x92=((8.0)*new_r00);
ikfast_left_leg::IkReal x93=(x87*x88);
ikfast_left_leg::IkReal x94=(x87*x89);
j0eval[0]=((IKabs(((((32.0)*new_r00))+(((-16.0)*x91))+(((-1.0)*x87*x90)))))+(IKabs((((new_r22*x90))+(((16.0)*new_r11))+(((-32.0)*new_r11*x87)))))+(IKabs((((x87*x92))+(((-8.0)*x91)))))+(IKabs((x89+(((-1.0)*x94)))))+(IKabs((x88+(((-1.0)*x93)))))+(IKabs((((new_r22*x92))+(((-8.0)*new_r11)))))+(IKabs((x94+(((-1.0)*x89)))))+(IKabs((x93+(((-1.0)*x88))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j2]

} else
{
ikfast_left_leg::IkReal op[4+1], zeror[4];
int numroots;
ikfast_left_leg::IkReal j0evalpoly[1];
ikfast_left_leg::IkReal x95=new_r22*new_r22;
ikfast_left_leg::IkReal x96=((16.0)*new_r01);
ikfast_left_leg::IkReal x97=(new_r00*new_r22);
ikfast_left_leg::IkReal x98=(x95*x96);
ikfast_left_leg::IkReal x99=((((8.0)*x97))+(((-8.0)*new_r11)));
op[0]=x99;
op[1]=(x98+(((-1.0)*x96)));
op[2]=((((-32.0)*new_r11*x95))+(((16.0)*x97))+(((16.0)*new_r11)));
op[3]=(x96+(((-1.0)*x98)));
op[4]=x99;
polyroots4(op,zeror,numroots);
ikfast_left_leg::IkReal j0array[4], cj0array[4], sj0array[4], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
ikfast_left_leg::IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[4]={true,true,true,true};
_nj0 = 4;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

ikfast_left_leg::IkReal x100=new_r22*new_r22;
ikfast_left_leg::IkReal x101=((16.0)*new_r10);
ikfast_left_leg::IkReal x102=(new_r11*new_r22);
ikfast_left_leg::IkReal x103=((8.0)*x102);
ikfast_left_leg::IkReal x104=(new_r00*x100);
ikfast_left_leg::IkReal x105=(x100*x101);
ikfast_left_leg::IkReal x106=((8.0)*x104);
j0evalpoly[0]=((((htj0*htj0*htj0*htj0)*(((((-1.0)*x103))+x106))))+(((-1.0)*x103))+x106+(((htj0*htj0*htj0)*(((((-1.0)*x105))+x101))))+((htj0*(((((-1.0)*x101))+x105))))+(((htj0*htj0)*(((((32.0)*new_r00))+(((-16.0)*x102))+(((-16.0)*x104)))))));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
ikfast_left_leg::IkReal j2eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
ikfast_left_leg::IkReal x107=new_r22*new_r22;
ikfast_left_leg::IkReal x108=cj0*cj0;
ikfast_left_leg::IkReal x109=(new_r22*sj0);
ikfast_left_leg::IkReal x110=(((x107*x108))+(((-1.0)*x107))+(((-1.0)*x108)));
j2eval[0]=x110;
j2eval[1]=IKsign(x110);
j2eval[2]=((IKabs(((((-1.0)*cj0*new_r00))+((new_r01*x109)))))+(IKabs((((new_r00*x109))+((cj0*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=new_r22;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x111=IKsin(j2);
ikfast_left_leg::IkReal x112=IKcos(j2);
evalcond[0]=(x111+new_r11);
evalcond[1]=((-1.0)*x111);
evalcond[2]=((-1.0)*x112);
evalcond[3]=(new_r10+(((-1.0)*x112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x113=IKsin(j2);
ikfast_left_leg::IkReal x114=IKcos(j2);
evalcond[0]=((-1.0)*x113);
evalcond[1]=((-1.0)*x114);
evalcond[2]=(x113+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x115=new_r22*new_r22;
CheckValue<ikfast_left_leg::IkReal> x116=IKPowWithIntegerCheck(((-1.0)+x115),-1);
if(!x116.valid){
continue;
}
if(((x115*(x116.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst6=IKsqrt((x115*(x116.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj0+(((-1.0)*gconst6)))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
ikfast_left_leg::IkReal x117=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj0=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj0=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j0=IKacos(gconst6);
CheckValue<ikfast_left_leg::IkReal> x118=IKPowWithIntegerCheck(((-1.0)+x117),-1);
if(!x118.valid){
continue;
}
if(((x117*(x118.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst6=IKsqrt((x117*(x118.value)));
j2eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<ikfast_left_leg::IkReal> x119=IKPowWithIntegerCheck(gconst6,-1);
if(!x119.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x119.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x119.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x119.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x120=IKsin(j2);
ikfast_left_leg::IkReal x121=IKcos(j2);
ikfast_left_leg::IkReal x122=((1.0)*x121);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x123=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x120);
evalcond[1]=((-1.0)*x121);
evalcond[2]=(((gconst6*x120))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x122))+new_r00);
evalcond[4]=(((x120*x123))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x122*x123)));
evalcond[6]=(((gconst6*new_r01))+x120+((new_r11*x123)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x122))+((new_r10*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x124 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r01)),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x125=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x125.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x124.value)+(((1.5707963267949)*(x125.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x126=IKsin(j2);
ikfast_left_leg::IkReal x127=IKcos(j2);
ikfast_left_leg::IkReal x128=((1.0)*x127);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x129=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x126);
evalcond[1]=((-1.0)*x127);
evalcond[2]=(((gconst6*x126))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x128))+new_r00);
evalcond[4]=(((x126*x129))+new_r11);
evalcond[5]=((((-1.0)*x128*x129))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x126+((new_r11*x129)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x128))+((new_r10*x129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x130=new_r22*new_r22;
CheckValue<ikfast_left_leg::IkReal> x131=IKPowWithIntegerCheck(((-1.0)+x130),-1);
if(!x131.valid){
continue;
}
if(((x130*(x131.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst6=IKsqrt((x130*(x131.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs((cj0+(((-1.0)*gconst6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
ikfast_left_leg::IkReal x132=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj0=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj0=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j0=((-1.0)*(IKacos(gconst6)));
CheckValue<ikfast_left_leg::IkReal> x133=IKPowWithIntegerCheck(((-1.0)+x132),-1);
if(!x133.valid){
continue;
}
if(((x132*(x133.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst6=IKsqrt((x132*(x133.value)));
j2eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<ikfast_left_leg::IkReal> x134=IKPowWithIntegerCheck(gconst6,-1);
if(!x134.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x134.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x134.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x134.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x135=IKsin(j2);
ikfast_left_leg::IkReal x136=IKcos(j2);
ikfast_left_leg::IkReal x137=((1.0)*x136);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x138=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
ikfast_left_leg::IkReal x139=((1.0)*x138);
evalcond[0]=((-1.0)*x135);
evalcond[1]=((-1.0)*x136);
evalcond[2]=(((gconst6*x135))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x137))+new_r00);
evalcond[4]=(((x136*x138))+new_r10);
evalcond[5]=((((-1.0)*x135*x139))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x139))+((gconst6*new_r01))+x135);
evalcond[7]=((((-1.0)*new_r10*x139))+((gconst6*new_r00))+(((-1.0)*x137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x140 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r01)),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x141=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x141.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x140.value)+(((1.5707963267949)*(x141.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x142=IKsin(j2);
ikfast_left_leg::IkReal x143=IKcos(j2);
ikfast_left_leg::IkReal x144=((1.0)*x143);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x145=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
ikfast_left_leg::IkReal x146=((1.0)*x145);
evalcond[0]=((-1.0)*x142);
evalcond[1]=((-1.0)*x143);
evalcond[2]=(((gconst6*x142))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x144))+new_r00);
evalcond[4]=(new_r10+((x143*x145)));
evalcond[5]=((((-1.0)*x142*x146))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x146))+x142);
evalcond[7]=((((-1.0)*x144))+((gconst6*new_r00))+(((-1.0)*new_r10*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x147=new_r22*new_r22;
CheckValue<ikfast_left_leg::IkReal> x148=IKPowWithIntegerCheck(((-1.0)+x147),-1);
if(!x148.valid){
continue;
}
if(((x147*(x148.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst7=((-1.0)*(IKsqrt((x147*(x148.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj0+(((-1.0)*gconst7)))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
ikfast_left_leg::IkReal x149=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj0=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj0=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j0=IKacos(gconst7);
CheckValue<ikfast_left_leg::IkReal> x150=IKPowWithIntegerCheck(((-1.0)+x149),-1);
if(!x150.valid){
continue;
}
if(((x149*(x150.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst7=((-1.0)*(IKsqrt((x149*(x150.value)))));
j2eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<ikfast_left_leg::IkReal> x151=IKPowWithIntegerCheck(gconst7,-1);
if(!x151.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x151.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x151.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x151.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x152=IKsin(j2);
ikfast_left_leg::IkReal x153=IKcos(j2);
ikfast_left_leg::IkReal x154=((1.0)*x153);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x155=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x152);
evalcond[1]=((-1.0)*x153);
evalcond[2]=(new_r01+((gconst7*x152)));
evalcond[3]=((((-1.0)*gconst7*x154))+new_r00);
evalcond[4]=(((x152*x155))+new_r11);
evalcond[5]=((((-1.0)*x154*x155))+new_r10);
evalcond[6]=(((new_r11*x155))+x152+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x154))+((new_r10*x155))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x156 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r01)),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x157=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x157.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x156.value)+(((1.5707963267949)*(x157.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x158=IKsin(j2);
ikfast_left_leg::IkReal x159=IKcos(j2);
ikfast_left_leg::IkReal x160=((1.0)*x159);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x161=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x158);
evalcond[1]=((-1.0)*x159);
evalcond[2]=(new_r01+((gconst7*x158)));
evalcond[3]=((((-1.0)*gconst7*x160))+new_r00);
evalcond[4]=(new_r11+((x158*x161)));
evalcond[5]=((((-1.0)*x160*x161))+new_r10);
evalcond[6]=(((new_r11*x161))+x158+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x160))+((new_r10*x161))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x162=new_r22*new_r22;
CheckValue<ikfast_left_leg::IkReal> x163=IKPowWithIntegerCheck(((-1.0)+x162),-1);
if(!x163.valid){
continue;
}
if(((x162*(x163.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst7=((-1.0)*(IKsqrt((x162*(x163.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs((cj0+(((-1.0)*gconst7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
ikfast_left_leg::IkReal x164=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj0=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj0=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j0=((-1.0)*(IKacos(gconst7)));
CheckValue<ikfast_left_leg::IkReal> x165=IKPowWithIntegerCheck(((-1.0)+x164),-1);
if(!x165.valid){
continue;
}
if(((x164*(x165.value))) < -0.00001)
continue;
ikfast_left_leg::IkReal gconst7=((-1.0)*(IKsqrt((x164*(x165.value)))));
j2eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<ikfast_left_leg::IkReal> x166=IKPowWithIntegerCheck(gconst7,-1);
if(!x166.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x166.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x166.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x167=IKsin(j2);
ikfast_left_leg::IkReal x168=IKcos(j2);
ikfast_left_leg::IkReal x169=((1.0)*x168);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x170=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
ikfast_left_leg::IkReal x171=((1.0)*x170);
evalcond[0]=((-1.0)*x167);
evalcond[1]=((-1.0)*x168);
evalcond[2]=(((gconst7*x167))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x169))+new_r00);
evalcond[4]=(((x168*x170))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x167*x171)));
evalcond[6]=((((-1.0)*new_r11*x171))+x167+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x169))+(((-1.0)*new_r10*x171))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x172 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r01)),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x173=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x173.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x172.value)+(((1.5707963267949)*(x173.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x174=IKsin(j2);
ikfast_left_leg::IkReal x175=IKcos(j2);
ikfast_left_leg::IkReal x176=((1.0)*x175);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_left_leg::IkReal x177=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
ikfast_left_leg::IkReal x178=((1.0)*x177);
evalcond[0]=((-1.0)*x174);
evalcond[1]=((-1.0)*x175);
evalcond[2]=(((gconst7*x174))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x176))+new_r00);
evalcond[4]=(((x175*x177))+new_r10);
evalcond[5]=((((-1.0)*x174*x178))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x178))+x174+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x176))+(((-1.0)*new_r10*x178))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x179=((1.0)*new_r22);
ikfast_left_leg::IkReal x180=(cj0*new_r01);
CheckValue<ikfast_left_leg::IkReal> x181=IKPowWithIntegerCheck(cj0,-1);
if(!x181.valid){
continue;
}
if( IKabs(((((-1.0)*x180))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x181.value)*(((((-1.0)*new_r11*x179))+(((-1.0)*sj0*x179*x180))+new_r00+((new_r11*new_r22*(cj0*cj0))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x180))+(((-1.0)*new_r11*sj0))))+IKsqr(((x181.value)*(((((-1.0)*new_r11*x179))+(((-1.0)*sj0*x179*x180))+new_r00+((new_r11*new_r22*(cj0*cj0)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x180))+(((-1.0)*new_r11*sj0))), ((x181.value)*(((((-1.0)*new_r11*x179))+(((-1.0)*sj0*x179*x180))+new_r00+((new_r11*new_r22*(cj0*cj0)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[10];
ikfast_left_leg::IkReal x182=IKcos(j2);
ikfast_left_leg::IkReal x183=IKsin(j2);
ikfast_left_leg::IkReal x184=((1.0)*sj0);
ikfast_left_leg::IkReal x185=(cj0*new_r11);
ikfast_left_leg::IkReal x186=(cj0*new_r10);
ikfast_left_leg::IkReal x187=((1.0)*x182);
ikfast_left_leg::IkReal x188=(new_r22*x183);
ikfast_left_leg::IkReal x189=(new_r22*x182);
ikfast_left_leg::IkReal x190=(cj0*x187);
evalcond[0]=(((new_r11*sj0))+x183+((cj0*new_r01)));
evalcond[1]=(((new_r10*sj0))+(((-1.0)*x187))+((cj0*new_r00)));
evalcond[2]=(((cj0*x183))+((sj0*x189))+new_r01);
evalcond[3]=(((sj0*x188))+(((-1.0)*x190))+new_r00);
evalcond[4]=(((sj0*x183))+(((-1.0)*new_r22*x190))+new_r11);
evalcond[5]=((((-1.0)*x188))+x186+(((-1.0)*new_r00*x184)));
evalcond[6]=((((-1.0)*new_r22*x187))+x185+(((-1.0)*new_r01*x184)));
evalcond[7]=((((-1.0)*cj0*x188))+new_r10+(((-1.0)*x182*x184)));
evalcond[8]=((((-1.0)*x183))+((new_r22*x186))+(((-1.0)*new_r00*new_r22*x184)));
evalcond[9]=((((-1.0)*x187))+((new_r22*x185))+(((-1.0)*new_r01*new_r22*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x191=((1.0)*new_r01);
CheckValue<ikfast_left_leg::IkReal> x192=IKPowWithIntegerCheck(new_r22,-1);
if(!x192.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*x191))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x192.value)*((((cj0*new_r11))+(((-1.0)*sj0*x191)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x191))+(((-1.0)*new_r11*sj0))))+IKsqr(((x192.value)*((((cj0*new_r11))+(((-1.0)*sj0*x191))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*x191))+(((-1.0)*new_r11*sj0))), ((x192.value)*((((cj0*new_r11))+(((-1.0)*sj0*x191))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[10];
ikfast_left_leg::IkReal x193=IKcos(j2);
ikfast_left_leg::IkReal x194=IKsin(j2);
ikfast_left_leg::IkReal x195=((1.0)*sj0);
ikfast_left_leg::IkReal x196=(cj0*new_r11);
ikfast_left_leg::IkReal x197=(cj0*new_r10);
ikfast_left_leg::IkReal x198=((1.0)*x193);
ikfast_left_leg::IkReal x199=(new_r22*x194);
ikfast_left_leg::IkReal x200=(new_r22*x193);
ikfast_left_leg::IkReal x201=(cj0*x198);
evalcond[0]=(((new_r11*sj0))+x194+((cj0*new_r01)));
evalcond[1]=(((new_r10*sj0))+(((-1.0)*x198))+((cj0*new_r00)));
evalcond[2]=(((sj0*x200))+((cj0*x194))+new_r01);
evalcond[3]=(((sj0*x199))+(((-1.0)*x201))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x201))+((sj0*x194))+new_r11);
evalcond[5]=((((-1.0)*x199))+x197+(((-1.0)*new_r00*x195)));
evalcond[6]=((((-1.0)*new_r22*x198))+x196+(((-1.0)*new_r01*x195)));
evalcond[7]=((((-1.0)*cj0*x199))+new_r10+(((-1.0)*x193*x195)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x195))+(((-1.0)*x194))+((new_r22*x197)));
evalcond[9]=((((-1.0)*x198))+((new_r22*x196))+(((-1.0)*new_r01*new_r22*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x202=new_r22*new_r22;
ikfast_left_leg::IkReal x203=cj0*cj0;
ikfast_left_leg::IkReal x204=(new_r22*sj0);
CheckValue<ikfast_left_leg::IkReal> x205=IKPowWithIntegerCheck(IKsign((((x202*x203))+(((-1.0)*x203))+(((-1.0)*x202)))),-1);
if(!x205.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x206 = IKatan2WithCheck(ikfast_left_leg::IkReal((((new_r00*x204))+((cj0*new_r01)))),ikfast_left_leg::IkReal(((((-1.0)*cj0*new_r00))+((new_r01*x204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x206.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x205.value)))+(x206.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[10];
ikfast_left_leg::IkReal x207=IKcos(j2);
ikfast_left_leg::IkReal x208=IKsin(j2);
ikfast_left_leg::IkReal x209=((1.0)*sj0);
ikfast_left_leg::IkReal x210=(cj0*new_r11);
ikfast_left_leg::IkReal x211=(cj0*new_r10);
ikfast_left_leg::IkReal x212=((1.0)*x207);
ikfast_left_leg::IkReal x213=(new_r22*x208);
ikfast_left_leg::IkReal x214=(new_r22*x207);
ikfast_left_leg::IkReal x215=(cj0*x212);
evalcond[0]=(((new_r11*sj0))+x208+((cj0*new_r01)));
evalcond[1]=(((new_r10*sj0))+((cj0*new_r00))+(((-1.0)*x212)));
evalcond[2]=(((sj0*x214))+((cj0*x208))+new_r01);
evalcond[3]=(((sj0*x213))+new_r00+(((-1.0)*x215)));
evalcond[4]=(((sj0*x208))+(((-1.0)*new_r22*x215))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x209))+x211+(((-1.0)*x213)));
evalcond[6]=(x210+(((-1.0)*new_r22*x212))+(((-1.0)*new_r01*x209)));
evalcond[7]=((((-1.0)*cj0*x213))+(((-1.0)*x207*x209))+new_r10);
evalcond[8]=(((new_r22*x211))+(((-1.0)*new_r00*new_r22*x209))+(((-1.0)*x208)));
evalcond[9]=(((new_r22*x210))+(((-1.0)*new_r01*new_r22*x209))+(((-1.0)*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x217=IKPowWithIntegerCheck(cj1,-1);
if(!x217.valid){
continue;
}
ikfast_left_leg::IkReal x216=x217.value;
CheckValue<ikfast_left_leg::IkReal> x218=IKPowWithIntegerCheck(new_r12,-1);
if(!x218.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x219=IKPowWithIntegerCheck(x216,-2);
if(!x219.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x216)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x216*(x218.value)*(((((-1.0)*(new_r02*new_r02)))+(x219.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x216))+IKsqr((x216*(x218.value)*(((((-1.0)*(new_r02*new_r02)))+(x219.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r02*x216), (x216*(x218.value)*(((((-1.0)*(new_r02*new_r02)))+(x219.value)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x220=IKcos(j0);
ikfast_left_leg::IkReal x221=IKsin(j0);
ikfast_left_leg::IkReal x222=((1.0)*cj1);
ikfast_left_leg::IkReal x223=(cj1*x220);
ikfast_left_leg::IkReal x224=(new_r12*x220);
ikfast_left_leg::IkReal x225=(x221*x222);
ikfast_left_leg::IkReal x226=((1.0)*new_r02*x221);
evalcond[0]=(((cj1*x221))+new_r02);
evalcond[1]=((((-1.0)*x220*x222))+new_r12);
evalcond[2]=(((new_r02*x220))+((new_r12*x221)));
evalcond[3]=(x224+(((-1.0)*x226))+(((-1.0)*x222)));
evalcond[4]=(((new_r20*sj1))+((new_r10*x223))+(((-1.0)*new_r00*x225)));
evalcond[5]=((((-1.0)*new_r01*x225))+((new_r11*x223))+((new_r21*sj1)));
evalcond[6]=(((sj1*x224))+(((-1.0)*sj1*x226))+(((-1.0)*new_r22*x222)));
evalcond[7]=((-1.0)+((new_r22*sj1))+((new_r12*x223))+(((-1.0)*new_r02*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_left_leg::IkReal j2eval[3];
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[3];
j2eval[0]=cj1;
j2eval[1]=sj0;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x227=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj0*x227))+(((-1.0)*new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x227))+((cj0*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x227))+(((-1.0)*new_r00*sj0))))+IKsqr(((((-1.0)*sj0*x227))+((cj0*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*x227))+(((-1.0)*new_r00*sj0))), ((((-1.0)*sj0*x227))+((cj0*new_r00))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x228=IKcos(j2);
ikfast_left_leg::IkReal x229=IKsin(j2);
ikfast_left_leg::IkReal x230=((1.0)*sj0);
ikfast_left_leg::IkReal x231=(sj0*x229);
ikfast_left_leg::IkReal x232=((1.0)*x228);
ikfast_left_leg::IkReal x233=(cj0*x229);
ikfast_left_leg::IkReal x234=(cj0*x232);
evalcond[0]=(((new_r11*sj0))+x229+((cj0*new_r01)));
evalcond[1]=(((new_r10*sj0))+(((-1.0)*x232))+((cj0*new_r00)));
evalcond[2]=(((sj0*x228))+x233+new_r01);
evalcond[3]=((((-1.0)*x234))+x231+new_r00);
evalcond[4]=((((-1.0)*x234))+x231+new_r11);
evalcond[5]=(((cj0*new_r10))+(((-1.0)*new_r00*x230))+(((-1.0)*x229)));
evalcond[6]=((((-1.0)*x232))+(((-1.0)*new_r01*x230))+((cj0*new_r11)));
evalcond[7]=(new_r10+(((-1.0)*x233))+(((-1.0)*x228*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x235=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r01*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj0))+(((-1.0)*new_r11*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r01*x235))))+IKsqr((((new_r01*sj0))+(((-1.0)*new_r11*x235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r11*sj0))+(((-1.0)*new_r01*x235))), (((new_r01*sj0))+(((-1.0)*new_r11*x235))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x236=IKsin(j2);
ikfast_left_leg::IkReal x237=IKcos(j2);
ikfast_left_leg::IkReal x238=((1.0)*sj0);
ikfast_left_leg::IkReal x239=(cj0*x236);
ikfast_left_leg::IkReal x240=((1.0)*x237);
ikfast_left_leg::IkReal x241=(x237*x238);
evalcond[0]=(((new_r11*sj0))+x236+((cj0*new_r01)));
evalcond[1]=(x236+((cj0*new_r10))+(((-1.0)*new_r00*x238)));
evalcond[2]=(x237+(((-1.0)*new_r01*x238))+((cj0*new_r11)));
evalcond[3]=(((new_r10*sj0))+((cj0*new_r00))+(((-1.0)*x240)));
evalcond[4]=(((sj0*x236))+new_r11+((cj0*x237)));
evalcond[5]=(x239+(((-1.0)*x241))+new_r01);
evalcond[6]=(x239+(((-1.0)*x241))+new_r10);
evalcond[7]=((((-1.0)*cj0*x240))+(((-1.0)*x236*x238))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x242=IKsin(j2);
ikfast_left_leg::IkReal x243=IKcos(j2);
ikfast_left_leg::IkReal x244=((1.0)*sj1);
ikfast_left_leg::IkReal x245=((1.0)*cj1);
ikfast_left_leg::IkReal x246=((1.0)*x243);
evalcond[0]=(x242+new_r01);
evalcond[1]=(((cj1*x242))+new_r20);
evalcond[2]=(((cj1*x243))+new_r21);
evalcond[3]=((((-1.0)*x246))+new_r00);
evalcond[4]=((((-1.0)*x243*x244))+new_r11);
evalcond[5]=((((-1.0)*x242*x244))+new_r10);
evalcond[6]=((((-1.0)*x242))+((new_r10*sj1))+(((-1.0)*new_r20*x245)));
evalcond[7]=(((new_r11*sj1))+(((-1.0)*new_r21*x245))+(((-1.0)*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x247=IKsin(j2);
ikfast_left_leg::IkReal x248=IKcos(j2);
evalcond[0]=(x247+new_r20);
evalcond[1]=(x248+new_r21);
evalcond[2]=(x247+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x248))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x249=IKsin(j2);
ikfast_left_leg::IkReal x250=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*x249))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x250)));
evalcond[2]=(x249+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x251=IKcos(j2);
ikfast_left_leg::IkReal x252=IKsin(j2);
evalcond[0]=(x251+new_r11);
evalcond[1]=(x252+(((-1.0)*new_r01)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x251)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x253=IKsin(j2);
ikfast_left_leg::IkReal x254=((1.0)*(IKcos(j2)));
evalcond[0]=(x253+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+(((-1.0)*x254)));
evalcond[2]=(x253+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x255=IKcos(j2);
ikfast_left_leg::IkReal x256=IKsin(j2);
ikfast_left_leg::IkReal x257=((-1.0)*x256);
evalcond[0]=(new_r22*x255);
evalcond[1]=x257;
evalcond[2]=((-1.0)*x255);
evalcond[3]=(new_r22*x257);
evalcond[4]=(x256+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x258=IKPowWithIntegerCheck(sj1,-1);
if(!x258.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x258.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x258.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x258.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x259=IKsin(j2);
ikfast_left_leg::IkReal x260=IKcos(j2);
ikfast_left_leg::IkReal x261=((1.0)*sj1);
ikfast_left_leg::IkReal x262=((1.0)*cj1);
ikfast_left_leg::IkReal x263=((1.0)*x260);
evalcond[0]=(((cj1*x259))+new_r20);
evalcond[1]=(((cj1*x260))+new_r21);
evalcond[2]=(x259+(((-1.0)*new_r01)));
evalcond[3]=(new_r11+((sj1*x260)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x263)));
evalcond[5]=((((-1.0)*x259*x261))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x261))+(((-1.0)*new_r20*x262))+(((-1.0)*x259)));
evalcond[7]=((((-1.0)*new_r21*x262))+(((-1.0)*new_r11*x261))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x264=IKPowWithIntegerCheck(cj1,-1);
if(!x264.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x264.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x264.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x264.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x265=IKsin(j2);
ikfast_left_leg::IkReal x266=IKcos(j2);
ikfast_left_leg::IkReal x267=((1.0)*sj1);
ikfast_left_leg::IkReal x268=((1.0)*cj1);
ikfast_left_leg::IkReal x269=((1.0)*x266);
evalcond[0]=(((cj1*x265))+new_r20);
evalcond[1]=(((cj1*x266))+new_r21);
evalcond[2]=(x265+(((-1.0)*new_r01)));
evalcond[3]=(new_r11+((sj1*x266)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x269)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x265*x267)));
evalcond[6]=((((-1.0)*x265))+(((-1.0)*new_r10*x267))+(((-1.0)*new_r20*x268)));
evalcond[7]=((((-1.0)*new_r21*x268))+(((-1.0)*new_r11*x267))+(((-1.0)*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x270=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x270.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x271 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x271.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x270.value)))+(x271.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x272=IKsin(j2);
ikfast_left_leg::IkReal x273=IKcos(j2);
ikfast_left_leg::IkReal x274=((1.0)*sj1);
ikfast_left_leg::IkReal x275=((1.0)*cj1);
ikfast_left_leg::IkReal x276=((1.0)*x273);
evalcond[0]=(((cj1*x272))+new_r20);
evalcond[1]=(((cj1*x273))+new_r21);
evalcond[2]=(x272+(((-1.0)*new_r01)));
evalcond[3]=(new_r11+((sj1*x273)));
evalcond[4]=((((-1.0)*x276))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x272*x274))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x272))+(((-1.0)*new_r20*x275))+(((-1.0)*new_r10*x274)));
evalcond[7]=((((-1.0)*new_r21*x275))+(((-1.0)*new_r11*x274))+(((-1.0)*x276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x277=IKsin(j2);
ikfast_left_leg::IkReal x278=IKcos(j2);
ikfast_left_leg::IkReal x279=((1.0)*x278);
evalcond[0]=(x277+new_r20);
evalcond[1]=(x278+new_r21);
evalcond[2]=(new_r01+((cj0*x277)));
evalcond[3]=(new_r11+((sj0*x277)));
evalcond[4]=((((-1.0)*cj0*x279))+new_r00);
evalcond[5]=((((-1.0)*sj0*x279))+new_r10);
evalcond[6]=(((new_r11*sj0))+x277+((cj0*new_r01)));
evalcond[7]=(((new_r10*sj0))+(((-1.0)*x279))+((cj0*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x280=IKsin(j2);
ikfast_left_leg::IkReal x281=IKcos(j2);
ikfast_left_leg::IkReal x282=((1.0)*x281);
evalcond[0]=((((-1.0)*x280))+new_r20);
evalcond[1]=((((-1.0)*x282))+new_r21);
evalcond[2]=(((cj0*x280))+new_r01);
evalcond[3]=(((sj0*x280))+new_r11);
evalcond[4]=((((-1.0)*cj0*x282))+new_r00);
evalcond[5]=((((-1.0)*sj0*x282))+new_r10);
evalcond[6]=(((new_r11*sj0))+x280+((cj0*new_r01)));
evalcond[7]=(((new_r10*sj0))+(((-1.0)*x282))+((cj0*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x283=IKsin(j2);
ikfast_left_leg::IkReal x284=IKcos(j2);
ikfast_left_leg::IkReal x285=((1.0)*cj1);
ikfast_left_leg::IkReal x286=((1.0)*sj1);
ikfast_left_leg::IkReal x287=((1.0)*x284);
evalcond[0]=(x283+new_r11);
evalcond[1]=(new_r20+((cj1*x283)));
evalcond[2]=(new_r21+((cj1*x284)));
evalcond[3]=((((-1.0)*x287))+new_r10);
evalcond[4]=(new_r01+((sj1*x284)));
evalcond[5]=(new_r00+((sj1*x283)));
evalcond[6]=((((-1.0)*new_r00*x286))+(((-1.0)*x283))+(((-1.0)*new_r20*x285)));
evalcond[7]=((((-1.0)*new_r01*x286))+(((-1.0)*x287))+(((-1.0)*new_r21*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
j2eval[1]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x288=IKsin(j2);
ikfast_left_leg::IkReal x289=((1.0)*(IKcos(j2)));
evalcond[0]=(x288+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x289))+new_r01);
evalcond[2]=((((-1.0)*x288))+new_r00);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x290=IKsin(j2);
ikfast_left_leg::IkReal x291=IKcos(j2);
evalcond[0]=(x291+new_r01);
evalcond[1]=(x290+new_r00);
evalcond[2]=(x290+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x291))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x292=IKsin(j2);
ikfast_left_leg::IkReal x293=IKcos(j2);
evalcond[0]=(x292+new_r20);
evalcond[1]=(x293+new_r21);
evalcond[2]=(x292+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x293))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x294=IKsin(j2);
ikfast_left_leg::IkReal x295=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*x294))+new_r20);
evalcond[1]=((((-1.0)*x295))+new_r21);
evalcond[2]=(x294+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x295))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x296=IKcos(j2);
ikfast_left_leg::IkReal x297=IKsin(j2);
ikfast_left_leg::IkReal x298=((-1.0)*x296);
ikfast_left_leg::IkReal x299=((-1.0)*x297);
evalcond[0]=x299;
evalcond[1]=x298;
evalcond[2]=(new_r22*x298);
evalcond[3]=(new_r22*x299);
evalcond[4]=(x297+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x296))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x300=IKPowWithIntegerCheck(cj1,-1);
if(!x300.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x301=IKPowWithIntegerCheck(sj1,-1);
if(!x301.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x300.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x300.value)))+IKsqr((new_r01*(x301.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20*(x300.value)), (new_r01*(x301.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x302=IKsin(j2);
ikfast_left_leg::IkReal x303=IKcos(j2);
ikfast_left_leg::IkReal x304=((1.0)*cj1);
ikfast_left_leg::IkReal x305=((1.0)*sj1);
ikfast_left_leg::IkReal x306=((1.0)*x303);
evalcond[0]=(((cj1*x302))+new_r20);
evalcond[1]=(((cj1*x303))+new_r21);
evalcond[2]=(x302+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x303*x305))+new_r01);
evalcond[4]=((((-1.0)*x302*x305))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x306)));
evalcond[6]=(((new_r00*sj1))+(((-1.0)*x302))+(((-1.0)*new_r20*x304)));
evalcond[7]=((((-1.0)*new_r21*x304))+((new_r01*sj1))+(((-1.0)*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x307=IKPowWithIntegerCheck(cj1,-1);
if(!x307.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x307.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x307.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x307.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x308=IKsin(j2);
ikfast_left_leg::IkReal x309=IKcos(j2);
ikfast_left_leg::IkReal x310=((1.0)*cj1);
ikfast_left_leg::IkReal x311=((1.0)*sj1);
ikfast_left_leg::IkReal x312=((1.0)*x309);
evalcond[0]=(((cj1*x308))+new_r20);
evalcond[1]=(((cj1*x309))+new_r21);
evalcond[2]=(x308+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+(((-1.0)*x309*x311)));
evalcond[4]=((((-1.0)*x308*x311))+new_r00);
evalcond[5]=((((-1.0)*x312))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x310))+((new_r00*sj1))+(((-1.0)*x308)));
evalcond[7]=((((-1.0)*new_r21*x310))+((new_r01*sj1))+(((-1.0)*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x313=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x313.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x314 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x315=IKsin(j2);
ikfast_left_leg::IkReal x316=IKcos(j2);
ikfast_left_leg::IkReal x317=((1.0)*cj1);
ikfast_left_leg::IkReal x318=((1.0)*sj1);
ikfast_left_leg::IkReal x319=((1.0)*x316);
evalcond[0]=(((cj1*x315))+new_r20);
evalcond[1]=(((cj1*x316))+new_r21);
evalcond[2]=(x315+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+(((-1.0)*x316*x318)));
evalcond[4]=((((-1.0)*x315*x318))+new_r00);
evalcond[5]=((((-1.0)*x319))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x317))+((new_r00*sj1))+(((-1.0)*x315)));
evalcond[7]=((((-1.0)*new_r21*x317))+((new_r01*sj1))+(((-1.0)*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=IKabs(new_r22);
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
ikfast_left_leg::IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
ikfast_left_leg::IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
ikfast_left_leg::IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x321=IKPowWithIntegerCheck(cj1,-1);
if(!x321.valid){
continue;
}
ikfast_left_leg::IkReal x320=x321.value;
CheckValue<ikfast_left_leg::IkReal> x322=IKPowWithIntegerCheck(sj0,-1);
if(!x322.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x323=IKPowWithIntegerCheck(sj1,-1);
if(!x323.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x320)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x320*(x322.value)*(x323.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x320))+IKsqr((x320*(x322.value)*(x323.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20*x320), (x320*(x322.value)*(x323.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x324=IKsin(j2);
ikfast_left_leg::IkReal x325=IKcos(j2);
ikfast_left_leg::IkReal x326=((1.0)*sj0);
ikfast_left_leg::IkReal x327=(cj0*new_r11);
ikfast_left_leg::IkReal x328=((1.0)*cj1);
ikfast_left_leg::IkReal x329=(cj0*new_r10);
ikfast_left_leg::IkReal x330=(cj0*sj1);
ikfast_left_leg::IkReal x331=((1.0)*x325);
ikfast_left_leg::IkReal x332=((1.0)*x324);
ikfast_left_leg::IkReal x333=(sj0*x324);
evalcond[0]=(((cj1*x324))+new_r20);
evalcond[1]=(((cj1*x325))+new_r21);
evalcond[2]=(((new_r11*sj0))+x324+((cj0*new_r01)));
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x331))+((cj0*new_r00)));
evalcond[4]=(((cj0*x324))+new_r01+((sj0*sj1*x325)));
evalcond[5]=((((-1.0)*cj0*x331))+new_r00+((sj1*x333)));
evalcond[6]=(x333+(((-1.0)*x330*x331))+new_r11);
evalcond[7]=(x329+(((-1.0)*new_r00*x326))+(((-1.0)*sj1*x332)));
evalcond[8]=(x327+(((-1.0)*new_r01*x326))+(((-1.0)*sj1*x331)));
evalcond[9]=((((-1.0)*x325*x326))+(((-1.0)*x330*x332))+new_r10);
evalcond[10]=((((-1.0)*new_r00*sj1*x326))+((sj1*x329))+(((-1.0)*x332))+(((-1.0)*new_r20*x328)));
evalcond[11]=((((-1.0)*new_r01*sj1*x326))+((sj1*x327))+(((-1.0)*x331))+(((-1.0)*new_r21*x328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x335=IKPowWithIntegerCheck(cj1,-1);
if(!x335.valid){
continue;
}
ikfast_left_leg::IkReal x334=x335.value;
CheckValue<ikfast_left_leg::IkReal> x336=IKPowWithIntegerCheck(cj0,-1);
if(!x336.valid){
continue;
}
if( IKabs((x334*(x336.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x334)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x334*(x336.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1))))))+IKsqr(((-1.0)*new_r21*x334))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x334*(x336.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1))))), ((-1.0)*new_r21*x334));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x337=IKsin(j2);
ikfast_left_leg::IkReal x338=IKcos(j2);
ikfast_left_leg::IkReal x339=((1.0)*sj0);
ikfast_left_leg::IkReal x340=(cj0*new_r11);
ikfast_left_leg::IkReal x341=((1.0)*cj1);
ikfast_left_leg::IkReal x342=(cj0*new_r10);
ikfast_left_leg::IkReal x343=(cj0*sj1);
ikfast_left_leg::IkReal x344=((1.0)*x338);
ikfast_left_leg::IkReal x345=((1.0)*x337);
ikfast_left_leg::IkReal x346=(sj0*x337);
evalcond[0]=(((cj1*x337))+new_r20);
evalcond[1]=(((cj1*x338))+new_r21);
evalcond[2]=(((new_r11*sj0))+x337+((cj0*new_r01)));
evalcond[3]=(((new_r10*sj0))+((cj0*new_r00))+(((-1.0)*x344)));
evalcond[4]=(((sj0*sj1*x338))+((cj0*x337))+new_r01);
evalcond[5]=(((sj1*x346))+(((-1.0)*cj0*x344))+new_r00);
evalcond[6]=(x346+(((-1.0)*x343*x344))+new_r11);
evalcond[7]=(x342+(((-1.0)*new_r00*x339))+(((-1.0)*sj1*x345)));
evalcond[8]=(x340+(((-1.0)*new_r01*x339))+(((-1.0)*sj1*x344)));
evalcond[9]=((((-1.0)*x338*x339))+(((-1.0)*x343*x345))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x341))+((sj1*x342))+(((-1.0)*x345))+(((-1.0)*new_r00*sj1*x339)));
evalcond[11]=((((-1.0)*new_r01*sj1*x339))+((sj1*x340))+(((-1.0)*x344))+(((-1.0)*new_r21*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x347=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x347.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x348 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x347.value)))+(x348.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x349=IKsin(j2);
ikfast_left_leg::IkReal x350=IKcos(j2);
ikfast_left_leg::IkReal x351=((1.0)*sj0);
ikfast_left_leg::IkReal x352=(cj0*new_r11);
ikfast_left_leg::IkReal x353=((1.0)*cj1);
ikfast_left_leg::IkReal x354=(cj0*new_r10);
ikfast_left_leg::IkReal x355=(cj0*sj1);
ikfast_left_leg::IkReal x356=((1.0)*x350);
ikfast_left_leg::IkReal x357=((1.0)*x349);
ikfast_left_leg::IkReal x358=(sj0*x349);
evalcond[0]=(((cj1*x349))+new_r20);
evalcond[1]=(((cj1*x350))+new_r21);
evalcond[2]=(((new_r11*sj0))+x349+((cj0*new_r01)));
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x356))+((cj0*new_r00)));
evalcond[4]=(((cj0*x349))+((sj0*sj1*x350))+new_r01);
evalcond[5]=(((sj1*x358))+(((-1.0)*cj0*x356))+new_r00);
evalcond[6]=(x358+new_r11+(((-1.0)*x355*x356)));
evalcond[7]=(x354+(((-1.0)*new_r00*x351))+(((-1.0)*sj1*x357)));
evalcond[8]=(x352+(((-1.0)*new_r01*x351))+(((-1.0)*sj1*x356)));
evalcond[9]=(new_r10+(((-1.0)*x355*x357))+(((-1.0)*x350*x351)));
evalcond[10]=((((-1.0)*new_r00*sj1*x351))+(((-1.0)*x357))+((sj1*x354))+(((-1.0)*new_r20*x353)));
evalcond[11]=((((-1.0)*x356))+(((-1.0)*new_r01*sj1*x351))+((sj1*x352))+(((-1.0)*new_r21*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x359=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x359.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x360 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x359.value)))+(x360.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[2];
evalcond[0]=(new_r20+((cj1*(IKsin(j2)))));
evalcond[1]=(((cj1*(IKcos(j2))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_left_leg::IkReal j0eval[3];
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[2];
j0eval[0]=cj1;
j0eval[1]=new_r01;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x361=((1.0)*sj2);
if( IKabs(((((-1.0)*new_r00*x361))+(((-1.0)*cj2*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*new_r00))+(((-1.0)*new_r01*x361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x361))+(((-1.0)*cj2*new_r01))))+IKsqr((((cj2*new_r00))+(((-1.0)*new_r01*x361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*new_r00*x361))+(((-1.0)*cj2*new_r01))), (((cj2*new_r00))+(((-1.0)*new_r01*x361))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x362=IKcos(j0);
ikfast_left_leg::IkReal x363=IKsin(j0);
ikfast_left_leg::IkReal x364=((1.0)*cj2);
ikfast_left_leg::IkReal x365=((1.0)*sj2);
ikfast_left_leg::IkReal x366=(sj2*x363);
ikfast_left_leg::IkReal x367=((1.0)*x363);
ikfast_left_leg::IkReal x368=(x362*x364);
evalcond[0]=(sj2+((new_r01*x362))+((new_r11*x363)));
evalcond[1]=(((sj2*x362))+((cj2*x363))+new_r01);
evalcond[2]=((((-1.0)*x368))+x366+new_r00);
evalcond[3]=((((-1.0)*x368))+x366+new_r11);
evalcond[4]=((((-1.0)*x364))+((new_r00*x362))+((new_r10*x363)));
evalcond[5]=((((-1.0)*x363*x364))+(((-1.0)*x362*x365))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x367))+(((-1.0)*x365))+((new_r10*x362)));
evalcond[7]=((((-1.0)*x364))+(((-1.0)*new_r01*x367))+((new_r11*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
ikfast_left_leg::IkReal x369=(((new_r11*sj2))+((cj2*new_r01)));
j0eval[0]=x369;
j0eval[1]=((IKabs(((-1.0)+(cj2*cj2)+(new_r01*new_r01))))+(IKabs(((((-1.0)*cj2*sj2))+(((-1.0)*new_r01*new_r11))))));
j0eval[2]=IKsign(x369);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
ikfast_left_leg::IkReal x370=((1.0)*sj2);
ikfast_left_leg::IkReal x371=(((new_r10*new_r11))+((new_r00*new_r01)));
j0eval[0]=x371;
j0eval[1]=((IKabs((((new_r01*sj2))+(((-1.0)*new_r10*x370)))))+(IKabs(((((-1.0)*new_r00*x370))+(((-1.0)*new_r11*x370))))));
j0eval[2]=IKsign(x371);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
ikfast_left_leg::IkReal x372=((1.0)*new_r11);
ikfast_left_leg::IkReal x373=((new_r01*new_r01)+(new_r11*new_r11));
j0eval[0]=x373;
j0eval[1]=((IKabs(((((-1.0)*sj2*x372))+((cj2*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj2))+(((-1.0)*cj2*x372))))));
j0eval[2]=IKsign(x373);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r01=0;
new_r11=0;
j0eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x375 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r00),ikfast_left_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
ikfast_left_leg::IkReal x374=x375.value;
j0array[0]=((-1.0)*x374);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x374)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j0))))+((new_r10*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x376=IKcos(j0);
ikfast_left_leg::IkReal x377=IKsin(j0);
ikfast_left_leg::IkReal x378=((1.0)*x377);
evalcond[0]=(x376+new_r11);
evalcond[1]=((((-1.0)*x378))+new_r01);
evalcond[2]=((((-1.0)*x376))+new_r00);
evalcond[3]=((((-1.0)*x378))+new_r10);
evalcond[4]=(((new_r01*x376))+((new_r11*x377)));
evalcond[5]=((-1.0)+((new_r00*x376))+((new_r10*x377)));
evalcond[6]=((((-1.0)*new_r00*x378))+((new_r10*x376)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x378))+((new_r11*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x379=IKsin(j0);
ikfast_left_leg::IkReal x380=IKcos(j0);
ikfast_left_leg::IkReal x381=((1.0)*x379);
evalcond[0]=(x379+new_r01);
evalcond[1]=(x380+new_r00);
evalcond[2]=(x379+new_r10);
evalcond[3]=((((-1.0)*x380))+new_r11);
evalcond[4]=(((new_r01*x380))+((new_r11*x379)));
evalcond[5]=((1.0)+((new_r00*x380))+((new_r10*x379)));
evalcond[6]=((((-1.0)*new_r00*x381))+((new_r10*x380)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x381))+((new_r11*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x383 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x383)==0){
continue;
}
ikfast_left_leg::IkReal x382=pow(x383,-0.5);
CheckValue<ikfast_left_leg::IkReal> x384 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x384.valid){
continue;
}
ikfast_left_leg::IkReal gconst0=((-1.0)*(x384.value));
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01*x382);
ikfast_left_leg::IkReal gconst2=(new_r11*x382);
CheckValue<ikfast_left_leg::IkReal> x385 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x385.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x385.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x388 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x388.valid){
continue;
}
ikfast_left_leg::IkReal x386=((-1.0)*(x388.value));
ikfast_left_leg::IkReal x387=x382;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x386;
ikfast_left_leg::IkReal gconst0=x386;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01*x387);
ikfast_left_leg::IkReal gconst2=(new_r11*x387);
ikfast_left_leg::IkReal x389=new_r01*new_r01;
ikfast_left_leg::IkReal x390=(new_r00*new_r01);
ikfast_left_leg::IkReal x391=(((new_r10*new_r11))+x390);
ikfast_left_leg::IkReal x392=x382;
ikfast_left_leg::IkReal x393=(new_r01*x392);
j0eval[0]=x391;
j0eval[1]=((IKabs((((new_r11*x393))+((x390*x392)))))+(IKabs(((((-1.0)*x389*x392))+((new_r10*x393))))));
j0eval[2]=IKsign(x391);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[2];
CheckValue<ikfast_left_leg::IkReal> x396 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
ikfast_left_leg::IkReal x394=((-1.0)*(x396.value));
ikfast_left_leg::IkReal x395=x382;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x394;
ikfast_left_leg::IkReal gconst0=x394;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01*x395);
ikfast_left_leg::IkReal gconst2=(new_r11*x395);
ikfast_left_leg::IkReal x397=((new_r01*new_r01)+(new_r11*new_r11));
j0eval[0]=x397;
j0eval[1]=IKsign(x397);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x400 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x400.valid){
continue;
}
ikfast_left_leg::IkReal x398=((-1.0)*(x400.value));
ikfast_left_leg::IkReal x399=x382;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x398;
ikfast_left_leg::IkReal gconst0=x398;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01*x399);
ikfast_left_leg::IkReal gconst2=(new_r11*x399);
j0eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x402 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
ikfast_left_leg::IkReal x401=((-1.0)*(x402.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x401;
new_r11=0;
new_r00=0;
ikfast_left_leg::IkReal gconst0=x401;
ikfast_left_leg::IkReal x403 = new_r01*new_r01;
if(IKabs(x403)==0){
continue;
}
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01*(pow(x403,-0.5)));
ikfast_left_leg::IkReal gconst2=0;
j0eval[0]=new_r01;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x404=IKPowWithIntegerCheck(gconst1,-1);
if(!x404.valid){
continue;
}
cj0array[0]=((-1.0)*new_r01*(x404.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x405=IKsin(j0);
ikfast_left_leg::IkReal x406=IKcos(j0);
ikfast_left_leg::IkReal x407=((-1.0)*x405);
evalcond[0]=(new_r10*x405);
evalcond[1]=(gconst1*x407);
evalcond[2]=(new_r01*x407);
evalcond[3]=(gconst1+((new_r01*x406)));
evalcond[4]=(gconst1+((new_r10*x406)));
evalcond[5]=(((gconst1*x406))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x408=IKPowWithIntegerCheck(new_r01,-1);
if(!x408.valid){
continue;
}
cj0array[0]=((-1.0)*gconst1*(x408.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x409=IKsin(j0);
ikfast_left_leg::IkReal x410=IKcos(j0);
ikfast_left_leg::IkReal x411=(gconst1*x410);
ikfast_left_leg::IkReal x412=((-1.0)*x409);
evalcond[0]=(new_r10*x409);
evalcond[1]=(gconst1*x412);
evalcond[2]=(new_r01*x412);
evalcond[3]=(x411+new_r01);
evalcond[4]=(gconst1+((new_r10*x410)));
evalcond[5]=(x411+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x414 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x414.valid){
continue;
}
ikfast_left_leg::IkReal x413=((-1.0)*(x414.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x413;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x413;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_left_leg::IkReal gconst2=new_r11;
j0eval[0]=-1.0;
j0eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j0eval[2]=-1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x416 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x416.valid){
continue;
}
ikfast_left_leg::IkReal x415=((-1.0)*(x416.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x415;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x415;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_left_leg::IkReal gconst2=new_r11;
j0eval[0]=-1.0;
j0eval[1]=-1.0;
j0eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x418 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x418.valid){
continue;
}
ikfast_left_leg::IkReal x417=((-1.0)*(x418.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x417;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x417;
ikfast_left_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_left_leg::IkReal gconst2=new_r11;
j0eval[0]=1.0;
j0eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j0eval[2]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x419=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x420 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((-1.0)*gconst1*x419))+((gconst2*new_r01)))),ikfast_left_leg::IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x421=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x421.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x420.value)+(((1.5707963267949)*(x421.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x422=IKcos(j0);
ikfast_left_leg::IkReal x423=IKsin(j0);
ikfast_left_leg::IkReal x424=(gconst1*x422);
ikfast_left_leg::IkReal x425=(gconst1*x423);
ikfast_left_leg::IkReal x426=((1.0)*x423);
ikfast_left_leg::IkReal x427=(gconst2*x422);
ikfast_left_leg::IkReal x428=(gconst2*x426);
evalcond[0]=(gconst1+((new_r11*x423))+((new_r01*x422)));
evalcond[1]=(x427+x425+new_r11);
evalcond[2]=((((-1.0)*x428))+x424);
evalcond[3]=((((-1.0)*x428))+x424+new_r01);
evalcond[4]=((((-1.0)*x427))+(((-1.0)*x425)));
evalcond[5]=(gconst2+((new_r11*x422))+(((-1.0)*new_r01*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x429=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x429.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x430 = IKatan2WithCheck(ikfast_left_leg::IkReal((gconst1*new_r11)),ikfast_left_leg::IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x429.value)))+(x430.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x431=IKcos(j0);
ikfast_left_leg::IkReal x432=IKsin(j0);
ikfast_left_leg::IkReal x433=(gconst1*x431);
ikfast_left_leg::IkReal x434=(gconst1*x432);
ikfast_left_leg::IkReal x435=((1.0)*x432);
ikfast_left_leg::IkReal x436=(gconst2*x431);
ikfast_left_leg::IkReal x437=(gconst2*x435);
evalcond[0]=(((new_r01*x431))+gconst1+((new_r11*x432)));
evalcond[1]=(x434+x436+new_r11);
evalcond[2]=((((-1.0)*x437))+x433);
evalcond[3]=((((-1.0)*x437))+x433+new_r01);
evalcond[4]=((((-1.0)*x434))+(((-1.0)*x436)));
evalcond[5]=((((-1.0)*new_r01*x435))+gconst2+((new_r11*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x438=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x438.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x439 = IKatan2WithCheck(ikfast_left_leg::IkReal((gconst1*gconst2)),ikfast_left_leg::IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x438.value)))+(x439.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x440=IKcos(j0);
ikfast_left_leg::IkReal x441=IKsin(j0);
ikfast_left_leg::IkReal x442=(gconst1*x440);
ikfast_left_leg::IkReal x443=(gconst1*x441);
ikfast_left_leg::IkReal x444=((1.0)*x441);
ikfast_left_leg::IkReal x445=(gconst2*x440);
ikfast_left_leg::IkReal x446=(gconst2*x444);
evalcond[0]=(((new_r01*x440))+gconst1+((new_r11*x441)));
evalcond[1]=(x445+x443+new_r11);
evalcond[2]=((((-1.0)*x446))+x442);
evalcond[3]=((((-1.0)*x446))+x442+new_r01);
evalcond[4]=((((-1.0)*x443))+(((-1.0)*x445)));
evalcond[5]=((((-1.0)*new_r01*x444))+gconst2+((new_r11*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x447=IKPowWithIntegerCheck(gconst2,-1);
if(!x447.valid){
continue;
}
cj0array[0]=(new_r00*(x447.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x448=IKsin(j0);
ikfast_left_leg::IkReal x449=IKcos(j0);
ikfast_left_leg::IkReal x450=((-1.0)*x448);
evalcond[0]=(new_r11*x448);
evalcond[1]=(gconst2*x450);
evalcond[2]=(new_r00*x450);
evalcond[3]=(((gconst2*x449))+new_r11);
evalcond[4]=(gconst2+((new_r11*x449)));
evalcond[5]=(((new_r00*x449))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x452 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
ikfast_left_leg::IkReal x451=((-1.0)*(x452.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x451;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x451;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x453 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x453)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x453,-0.5)));
j0eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x455 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
ikfast_left_leg::IkReal x454=((-1.0)*(x455.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x454;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x454;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x456 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x456)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x456,-0.5)));
j0eval[0]=new_r11;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x458 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x458.valid){
continue;
}
ikfast_left_leg::IkReal x457=((-1.0)*(x458.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x457;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst0=x457;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x459 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x459)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x459,-0.5)));
j0eval[0]=new_r10;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x460=IKPowWithIntegerCheck(new_r10,-1);
if(!x460.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x461=IKPowWithIntegerCheck(gconst2,-1);
if(!x461.valid){
continue;
}
if( IKabs((gconst2*(x460.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x461.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x460.value)))+IKsqr(((-1.0)*new_r11*(x461.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((gconst2*(x460.value)), ((-1.0)*new_r11*(x461.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x462=IKsin(j0);
ikfast_left_leg::IkReal x463=IKcos(j0);
ikfast_left_leg::IkReal x464=(gconst2*x462);
ikfast_left_leg::IkReal x465=(gconst2*x463);
evalcond[0]=(new_r11*x462);
evalcond[1]=(new_r10*x463);
evalcond[2]=((-1.0)*x464);
evalcond[3]=((-1.0)*x465);
evalcond[4]=(x465+new_r11);
evalcond[5]=(((new_r11*x463))+gconst2);
evalcond[6]=((((-1.0)*x464))+new_r10);
evalcond[7]=(((new_r10*x462))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x466=IKPowWithIntegerCheck(gconst2,-1);
if(!x466.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x467=IKPowWithIntegerCheck(new_r11,-1);
if(!x467.valid){
continue;
}
if( IKabs((new_r10*(x466.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x467.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x466.value)))+IKsqr(((-1.0)*gconst2*(x467.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((new_r10*(x466.value)), ((-1.0)*gconst2*(x467.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x468=IKsin(j0);
ikfast_left_leg::IkReal x469=IKcos(j0);
ikfast_left_leg::IkReal x470=(gconst2*x468);
ikfast_left_leg::IkReal x471=(gconst2*x469);
evalcond[0]=(new_r11*x468);
evalcond[1]=(new_r10*x469);
evalcond[2]=((-1.0)*x470);
evalcond[3]=((-1.0)*x471);
evalcond[4]=(x471+new_r11);
evalcond[5]=(((new_r11*x469))+gconst2);
evalcond[6]=((((-1.0)*x470))+new_r10);
evalcond[7]=(((new_r10*x468))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x472 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x473=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x473.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x472.value)+(((1.5707963267949)*(x473.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x474=IKsin(j0);
ikfast_left_leg::IkReal x475=IKcos(j0);
ikfast_left_leg::IkReal x476=(gconst2*x474);
ikfast_left_leg::IkReal x477=(gconst2*x475);
evalcond[0]=(new_r11*x474);
evalcond[1]=(new_r10*x475);
evalcond[2]=((-1.0)*x476);
evalcond[3]=((-1.0)*x477);
evalcond[4]=(x477+new_r11);
evalcond[5]=(gconst2+((new_r11*x475)));
evalcond[6]=((((-1.0)*x476))+new_r10);
evalcond[7]=(((new_r10*x474))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x479 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x479.valid){
continue;
}
ikfast_left_leg::IkReal x478=((-1.0)*(x479.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x478;
new_r01=0;
ikfast_left_leg::IkReal gconst0=x478;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x480 = new_r11*new_r11;
if(IKabs(x480)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x480,-0.5)));
j0eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x482 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x482.valid){
continue;
}
ikfast_left_leg::IkReal x481=((-1.0)*(x482.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x481;
new_r01=0;
ikfast_left_leg::IkReal gconst0=x481;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x483 = new_r11*new_r11;
if(IKabs(x483)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x483,-0.5)));
j0eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x485 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
ikfast_left_leg::IkReal x484=((-1.0)*(x485.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst1;
cj2=gconst2;
j2=x484;
new_r01=0;
ikfast_left_leg::IkReal gconst0=x484;
ikfast_left_leg::IkReal gconst1=0;
ikfast_left_leg::IkReal x486 = new_r11*new_r11;
if(IKabs(x486)==0){
continue;
}
ikfast_left_leg::IkReal gconst2=(new_r11*(pow(x486,-0.5)));
j0eval[0]=new_r11;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x487=IKPowWithIntegerCheck(gconst2,-1);
if(!x487.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x488=IKPowWithIntegerCheck(new_r11,-1);
if(!x488.valid){
continue;
}
if( IKabs((new_r10*(x487.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x488.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x487.value)))+IKsqr(((-1.0)*gconst2*(x488.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((new_r10*(x487.value)), ((-1.0)*gconst2*(x488.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x489=IKsin(j0);
ikfast_left_leg::IkReal x490=IKcos(j0);
ikfast_left_leg::IkReal x491=((1.0)*x489);
ikfast_left_leg::IkReal x492=(gconst2*x490);
evalcond[0]=(new_r11*x489);
evalcond[1]=((-1.0)*gconst2*x489);
evalcond[2]=(x492+new_r11);
evalcond[3]=(gconst2+((new_r11*x490)));
evalcond[4]=((((-1.0)*x492))+new_r00);
evalcond[5]=((((-1.0)*gconst2*x491))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x491))+((new_r10*x490)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x489))+((new_r00*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x493 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x493.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x494=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x494.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x493.value)+(((1.5707963267949)*(x494.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x495=IKsin(j0);
ikfast_left_leg::IkReal x496=IKcos(j0);
ikfast_left_leg::IkReal x497=((1.0)*x495);
ikfast_left_leg::IkReal x498=(gconst2*x496);
evalcond[0]=(new_r11*x495);
evalcond[1]=((-1.0)*gconst2*x495);
evalcond[2]=(x498+new_r11);
evalcond[3]=(gconst2+((new_r11*x496)));
evalcond[4]=((((-1.0)*x498))+new_r00);
evalcond[5]=((((-1.0)*gconst2*x497))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x497))+((new_r10*x496)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x495))+((new_r00*x496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x499=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x499.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x500 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x499.value)))+(x500.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x501=IKsin(j0);
ikfast_left_leg::IkReal x502=IKcos(j0);
ikfast_left_leg::IkReal x503=((1.0)*x501);
ikfast_left_leg::IkReal x504=(gconst2*x502);
evalcond[0]=(new_r11*x501);
evalcond[1]=((-1.0)*gconst2*x501);
evalcond[2]=(x504+new_r11);
evalcond[3]=(gconst2+((new_r11*x502)));
evalcond[4]=(new_r00+(((-1.0)*x504)));
evalcond[5]=((((-1.0)*gconst2*x503))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x503))+((new_r10*x502)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x501))+((new_r00*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x505=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x506 = IKatan2WithCheck(ikfast_left_leg::IkReal(((((-1.0)*gconst1*x505))+((gconst2*new_r01)))),ikfast_left_leg::IkReal(((((-1.0)*gconst2*x505))+(((-1.0)*gconst1*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x506.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x507=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x506.value)+(((1.5707963267949)*(x507.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x508=IKcos(j0);
ikfast_left_leg::IkReal x509=IKsin(j0);
ikfast_left_leg::IkReal x510=(gconst1*x508);
ikfast_left_leg::IkReal x511=(gconst1*x509);
ikfast_left_leg::IkReal x512=((1.0)*x509);
ikfast_left_leg::IkReal x513=(gconst2*x508);
ikfast_left_leg::IkReal x514=(gconst2*x512);
evalcond[0]=(gconst1+((new_r11*x509))+((new_r01*x508)));
evalcond[1]=(x513+x511+new_r11);
evalcond[2]=(x510+new_r01+(((-1.0)*x514)));
evalcond[3]=(gconst1+((new_r10*x508))+(((-1.0)*new_r00*x512)));
evalcond[4]=(gconst2+((new_r11*x508))+(((-1.0)*new_r01*x512)));
evalcond[5]=(x510+new_r10+(((-1.0)*x514)));
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x509))+((new_r00*x508)));
evalcond[7]=((((-1.0)*x511))+(((-1.0)*x513))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x515=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x516=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x516.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x517 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x515)))),ikfast_left_leg::IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x516.value)))+(x517.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x518=IKcos(j0);
ikfast_left_leg::IkReal x519=IKsin(j0);
ikfast_left_leg::IkReal x520=(gconst1*x518);
ikfast_left_leg::IkReal x521=(gconst1*x519);
ikfast_left_leg::IkReal x522=((1.0)*x519);
ikfast_left_leg::IkReal x523=(gconst2*x518);
ikfast_left_leg::IkReal x524=(gconst2*x522);
evalcond[0]=(((new_r01*x518))+((new_r11*x519))+gconst1);
evalcond[1]=(x523+x521+new_r11);
evalcond[2]=((((-1.0)*x524))+x520+new_r01);
evalcond[3]=(((new_r10*x518))+gconst1+(((-1.0)*new_r00*x522)));
evalcond[4]=(((new_r11*x518))+gconst2+(((-1.0)*new_r01*x522)));
evalcond[5]=((((-1.0)*x524))+x520+new_r10);
evalcond[6]=(((new_r00*x518))+((new_r10*x519))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x523))+(((-1.0)*x521))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x525=((1.0)*gconst1);
CheckValue<ikfast_left_leg::IkReal> x526 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x525)))),ikfast_left_leg::IkReal(((((-1.0)*new_r00*x525))+(((-1.0)*new_r11*x525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x527=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x527.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x526.value)+(((1.5707963267949)*(x527.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x528=IKcos(j0);
ikfast_left_leg::IkReal x529=IKsin(j0);
ikfast_left_leg::IkReal x530=(gconst1*x528);
ikfast_left_leg::IkReal x531=(gconst1*x529);
ikfast_left_leg::IkReal x532=((1.0)*x529);
ikfast_left_leg::IkReal x533=(gconst2*x528);
ikfast_left_leg::IkReal x534=(gconst2*x532);
evalcond[0]=(((new_r01*x528))+gconst1+((new_r11*x529)));
evalcond[1]=(x531+x533+new_r11);
evalcond[2]=((((-1.0)*x534))+x530+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x532))+((new_r10*x528)));
evalcond[4]=(gconst2+((new_r11*x528))+(((-1.0)*new_r01*x532)));
evalcond[5]=((((-1.0)*x534))+x530+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x529))+((new_r00*x528)));
evalcond[7]=((((-1.0)*x533))+(((-1.0)*x531))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_left_leg::IkReal x536 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x536)==0){
continue;
}
ikfast_left_leg::IkReal x535=pow(x536,-0.5);
CheckValue<ikfast_left_leg::IkReal> x537 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*(x537.value))));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01*x535);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*x535);
CheckValue<ikfast_left_leg::IkReal> x538 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x538.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x541 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
ikfast_left_leg::IkReal x539=((1.0)*(x541.value));
ikfast_left_leg::IkReal x540=x535;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x539)));
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x539)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01*x540);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*x540);
ikfast_left_leg::IkReal x542=new_r01*new_r01;
ikfast_left_leg::IkReal x543=(((new_r10*new_r11))+((new_r00*new_r01)));
ikfast_left_leg::IkReal x544=x535;
ikfast_left_leg::IkReal x545=((1.0)*new_r01*x544);
j0eval[0]=x543;
j0eval[1]=IKsign(x543);
j0eval[2]=((IKabs(((((-1.0)*new_r00*x545))+(((-1.0)*new_r11*x545)))))+(IKabs((((x542*x544))+(((-1.0)*new_r10*x545))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[2];
CheckValue<ikfast_left_leg::IkReal> x548 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
ikfast_left_leg::IkReal x546=((1.0)*(x548.value));
ikfast_left_leg::IkReal x547=x535;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x546)));
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x546)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01*x547);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*x547);
ikfast_left_leg::IkReal x549=((new_r01*new_r01)+(new_r11*new_r11));
j0eval[0]=x549;
j0eval[1]=IKsign(x549);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x552 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
ikfast_left_leg::IkReal x550=((1.0)*(x552.value));
ikfast_left_leg::IkReal x551=x535;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x550)));
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x550)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01*x551);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*x551);
j0eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x554 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
ikfast_left_leg::IkReal x553=((1.0)*(x554.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x553)));
new_r11=0;
new_r00=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x553)));
ikfast_left_leg::IkReal x555 = new_r01*new_r01;
if(IKabs(x555)==0){
continue;
}
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01*(pow(x555,-0.5)));
ikfast_left_leg::IkReal gconst5=0;
j0eval[0]=new_r01;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x556=IKPowWithIntegerCheck(gconst4,-1);
if(!x556.valid){
continue;
}
cj0array[0]=((-1.0)*new_r01*(x556.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x557=IKsin(j0);
ikfast_left_leg::IkReal x558=IKcos(j0);
ikfast_left_leg::IkReal x559=((-1.0)*x557);
evalcond[0]=(new_r10*x557);
evalcond[1]=(gconst4*x559);
evalcond[2]=(new_r01*x559);
evalcond[3]=(gconst4+((new_r01*x558)));
evalcond[4]=(((new_r10*x558))+gconst4);
evalcond[5]=(((gconst4*x558))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x560=IKPowWithIntegerCheck(new_r01,-1);
if(!x560.valid){
continue;
}
cj0array[0]=((-1.0)*gconst4*(x560.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x561=IKsin(j0);
ikfast_left_leg::IkReal x562=IKcos(j0);
ikfast_left_leg::IkReal x563=(gconst4*x562);
ikfast_left_leg::IkReal x564=((-1.0)*x561);
evalcond[0]=(new_r10*x561);
evalcond[1]=(gconst4*x564);
evalcond[2]=(new_r01*x564);
evalcond[3]=(x563+new_r01);
evalcond[4]=(gconst4+((new_r10*x562)));
evalcond[5]=(x563+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[4];
CheckValue<ikfast_left_leg::IkReal> x566 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
ikfast_left_leg::IkReal x565=((1.0)*(x566.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x565)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x565)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11);
j0eval[0]=1.0;
j0eval[1]=1.0;
j0eval[2]=new_r01;
j0eval[3]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x568 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
ikfast_left_leg::IkReal x567=((1.0)*(x568.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x567)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x567)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11);
j0eval[0]=-1.0;
j0eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j0eval[2]=-1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[3];
CheckValue<ikfast_left_leg::IkReal> x570 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
ikfast_left_leg::IkReal x569=((1.0)*(x570.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x569)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x569)));
ikfast_left_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11);
j0eval[0]=1.0;
j0eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j0eval[2]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x571=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x572 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x571)))),ikfast_left_leg::IkReal(((((-1.0)*gconst5*x571))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x573=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x573.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x572.value)+(((1.5707963267949)*(x573.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x574=IKcos(j0);
ikfast_left_leg::IkReal x575=IKsin(j0);
ikfast_left_leg::IkReal x576=((1.0)*gconst5);
ikfast_left_leg::IkReal x577=(gconst4*x574);
ikfast_left_leg::IkReal x578=((1.0)*x575);
ikfast_left_leg::IkReal x579=(x575*x576);
evalcond[0]=(((new_r11*x575))+((new_r01*x574))+gconst4);
evalcond[1]=(((gconst5*x574))+((gconst4*x575))+new_r11);
evalcond[2]=((((-1.0)*x579))+x577);
evalcond[3]=((((-1.0)*x579))+x577+new_r01);
evalcond[4]=((((-1.0)*gconst4*x578))+(((-1.0)*x574*x576)));
evalcond[5]=(((new_r11*x574))+gconst5+(((-1.0)*new_r01*x578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x580 = IKatan2WithCheck(ikfast_left_leg::IkReal((gconst4*new_r11)),ikfast_left_leg::IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x580.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x581=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x581.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x580.value)+(((1.5707963267949)*(x581.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x582=IKcos(j0);
ikfast_left_leg::IkReal x583=IKsin(j0);
ikfast_left_leg::IkReal x584=((1.0)*gconst5);
ikfast_left_leg::IkReal x585=(gconst4*x582);
ikfast_left_leg::IkReal x586=((1.0)*x583);
ikfast_left_leg::IkReal x587=(x583*x584);
evalcond[0]=(gconst4+((new_r01*x582))+((new_r11*x583)));
evalcond[1]=(((gconst5*x582))+((gconst4*x583))+new_r11);
evalcond[2]=(x585+(((-1.0)*x587)));
evalcond[3]=(x585+new_r01+(((-1.0)*x587)));
evalcond[4]=((((-1.0)*x582*x584))+(((-1.0)*gconst4*x586)));
evalcond[5]=((((-1.0)*new_r01*x586))+gconst5+((new_r11*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x588 = IKatan2WithCheck(ikfast_left_leg::IkReal((gconst4*gconst5)),ikfast_left_leg::IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x589=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x589.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x588.value)+(((1.5707963267949)*(x589.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x590=IKcos(j0);
ikfast_left_leg::IkReal x591=IKsin(j0);
ikfast_left_leg::IkReal x592=((1.0)*gconst5);
ikfast_left_leg::IkReal x593=(gconst4*x590);
ikfast_left_leg::IkReal x594=((1.0)*x591);
ikfast_left_leg::IkReal x595=(x591*x592);
evalcond[0]=(((new_r11*x591))+gconst4+((new_r01*x590)));
evalcond[1]=(((gconst5*x590))+((gconst4*x591))+new_r11);
evalcond[2]=((((-1.0)*x595))+x593);
evalcond[3]=((((-1.0)*x595))+x593+new_r01);
evalcond[4]=((((-1.0)*x590*x592))+(((-1.0)*gconst4*x594)));
evalcond[5]=(((new_r11*x590))+gconst5+(((-1.0)*new_r01*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x596=IKPowWithIntegerCheck(gconst5,-1);
if(!x596.valid){
continue;
}
cj0array[0]=(new_r00*(x596.value));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x597=IKsin(j0);
ikfast_left_leg::IkReal x598=IKcos(j0);
ikfast_left_leg::IkReal x599=((-1.0)*x597);
evalcond[0]=(new_r11*x597);
evalcond[1]=(gconst5*x599);
evalcond[2]=(new_r00*x599);
evalcond[3]=(((gconst5*x598))+new_r11);
evalcond[4]=(((new_r11*x598))+gconst5);
evalcond[5]=(((new_r00*x598))+(((-1.0)*gconst5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x601 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
ikfast_left_leg::IkReal x600=((1.0)*(x601.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x600)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x600)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x602 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x602)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x602,-0.5)));
j0eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x604 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
ikfast_left_leg::IkReal x603=((1.0)*(x604.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x603)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x603)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x605 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x605)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x605,-0.5)));
j0eval[0]=new_r11;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x607 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
ikfast_left_leg::IkReal x606=((1.0)*(x607.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x606)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x606)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x608 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x608)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x608,-0.5)));
j0eval[0]=new_r10;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x609=IKPowWithIntegerCheck(new_r10,-1);
if(!x609.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x610=IKPowWithIntegerCheck(gconst5,-1);
if(!x610.valid){
continue;
}
if( IKabs((gconst5*(x609.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x610.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x609.value)))+IKsqr(((-1.0)*new_r11*(x610.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((gconst5*(x609.value)), ((-1.0)*new_r11*(x610.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x611=IKsin(j0);
ikfast_left_leg::IkReal x612=IKcos(j0);
ikfast_left_leg::IkReal x613=((1.0)*gconst5);
ikfast_left_leg::IkReal x614=(gconst5*x612);
evalcond[0]=(new_r11*x611);
evalcond[1]=(new_r10*x612);
evalcond[2]=((-1.0)*gconst5*x611);
evalcond[3]=((-1.0)*x614);
evalcond[4]=(x614+new_r11);
evalcond[5]=(gconst5+((new_r11*x612)));
evalcond[6]=((((-1.0)*x611*x613))+new_r10);
evalcond[7]=(((new_r10*x611))+(((-1.0)*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x615=IKPowWithIntegerCheck(gconst5,-1);
if(!x615.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x616=IKPowWithIntegerCheck(new_r11,-1);
if(!x616.valid){
continue;
}
if( IKabs((new_r10*(x615.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x616.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x615.value)))+IKsqr(((-1.0)*gconst5*(x616.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((new_r10*(x615.value)), ((-1.0)*gconst5*(x616.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x617=IKsin(j0);
ikfast_left_leg::IkReal x618=IKcos(j0);
ikfast_left_leg::IkReal x619=((1.0)*gconst5);
ikfast_left_leg::IkReal x620=(gconst5*x618);
evalcond[0]=(new_r11*x617);
evalcond[1]=(new_r10*x618);
evalcond[2]=((-1.0)*gconst5*x617);
evalcond[3]=((-1.0)*x620);
evalcond[4]=(x620+new_r11);
evalcond[5]=(gconst5+((new_r11*x618)));
evalcond[6]=((((-1.0)*x617*x619))+new_r10);
evalcond[7]=(((new_r10*x617))+(((-1.0)*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x621 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x622=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x622.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x621.value)+(((1.5707963267949)*(x622.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x623=IKsin(j0);
ikfast_left_leg::IkReal x624=IKcos(j0);
ikfast_left_leg::IkReal x625=((1.0)*gconst5);
ikfast_left_leg::IkReal x626=(gconst5*x624);
evalcond[0]=(new_r11*x623);
evalcond[1]=(new_r10*x624);
evalcond[2]=((-1.0)*gconst5*x623);
evalcond[3]=((-1.0)*x626);
evalcond[4]=(x626+new_r11);
evalcond[5]=(gconst5+((new_r11*x624)));
evalcond[6]=((((-1.0)*x623*x625))+new_r10);
evalcond[7]=((((-1.0)*x625))+((new_r10*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x628 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
ikfast_left_leg::IkReal x627=((1.0)*(x628.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x627)));
new_r01=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x627)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x629 = new_r11*new_r11;
if(IKabs(x629)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x629,-0.5)));
j0eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x631 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
ikfast_left_leg::IkReal x630=((1.0)*(x631.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x630)));
new_r01=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x630)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x632 = new_r11*new_r11;
if(IKabs(x632)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x632,-0.5)));
j0eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
CheckValue<ikfast_left_leg::IkReal> x634 = IKatan2WithCheck(ikfast_left_leg::IkReal(0),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
ikfast_left_leg::IkReal x633=((1.0)*(x634.value));
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+(((-1.0)*x633)));
new_r01=0;
ikfast_left_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x633)));
ikfast_left_leg::IkReal gconst4=0;
ikfast_left_leg::IkReal x635 = new_r11*new_r11;
if(IKabs(x635)==0){
continue;
}
ikfast_left_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x635,-0.5)));
j0eval[0]=new_r11;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x636=IKPowWithIntegerCheck(gconst5,-1);
if(!x636.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x637=IKPowWithIntegerCheck(new_r11,-1);
if(!x637.valid){
continue;
}
if( IKabs((new_r10*(x636.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x637.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x636.value)))+IKsqr(((-1.0)*gconst5*(x637.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((new_r10*(x636.value)), ((-1.0)*gconst5*(x637.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x638=IKsin(j0);
ikfast_left_leg::IkReal x639=IKcos(j0);
ikfast_left_leg::IkReal x640=((1.0)*gconst5);
ikfast_left_leg::IkReal x641=(gconst5*x639);
evalcond[0]=(new_r11*x638);
evalcond[1]=((-1.0)*gconst5*x638);
evalcond[2]=(x641+new_r11);
evalcond[3]=(gconst5+((new_r11*x639)));
evalcond[4]=((((-1.0)*x639*x640))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x638*x640)));
evalcond[6]=((((-1.0)*new_r00*x638))+((new_r10*x639)));
evalcond[7]=(((new_r00*x639))+(((-1.0)*x640))+((new_r10*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x642 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x643=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x643.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x642.value)+(((1.5707963267949)*(x643.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x644=IKsin(j0);
ikfast_left_leg::IkReal x645=IKcos(j0);
ikfast_left_leg::IkReal x646=((1.0)*gconst5);
ikfast_left_leg::IkReal x647=(gconst5*x645);
evalcond[0]=(new_r11*x644);
evalcond[1]=((-1.0)*gconst5*x644);
evalcond[2]=(x647+new_r11);
evalcond[3]=(gconst5+((new_r11*x645)));
evalcond[4]=((((-1.0)*x645*x646))+new_r00);
evalcond[5]=((((-1.0)*x644*x646))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x644))+((new_r10*x645)));
evalcond[7]=((((-1.0)*x646))+((new_r10*x644))+((new_r00*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x648 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r10),ikfast_left_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x648.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x649=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x649.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x648.value)+(((1.5707963267949)*(x649.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x650=IKsin(j0);
ikfast_left_leg::IkReal x651=IKcos(j0);
ikfast_left_leg::IkReal x652=((1.0)*gconst5);
ikfast_left_leg::IkReal x653=(gconst5*x651);
evalcond[0]=(new_r11*x650);
evalcond[1]=((-1.0)*gconst5*x650);
evalcond[2]=(x653+new_r11);
evalcond[3]=(gconst5+((new_r11*x651)));
evalcond[4]=((((-1.0)*x651*x652))+new_r00);
evalcond[5]=((((-1.0)*x650*x652))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x650))+((new_r10*x651)));
evalcond[7]=((((-1.0)*x652))+((new_r10*x650))+((new_r00*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x654=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x655=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x655.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x656 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x654)))),ikfast_left_leg::IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x655.value)))+(x656.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x657=IKcos(j0);
ikfast_left_leg::IkReal x658=IKsin(j0);
ikfast_left_leg::IkReal x659=((1.0)*gconst5);
ikfast_left_leg::IkReal x660=(gconst4*x657);
ikfast_left_leg::IkReal x661=((1.0)*x658);
ikfast_left_leg::IkReal x662=(x658*x659);
evalcond[0]=(gconst4+((new_r01*x657))+((new_r11*x658)));
evalcond[1]=(((gconst4*x658))+new_r11+((gconst5*x657)));
evalcond[2]=((((-1.0)*x662))+x660+new_r01);
evalcond[3]=(gconst4+((new_r10*x657))+(((-1.0)*new_r00*x661)));
evalcond[4]=(gconst5+((new_r11*x657))+(((-1.0)*new_r01*x661)));
evalcond[5]=((((-1.0)*x662))+x660+new_r10);
evalcond[6]=((((-1.0)*x659))+((new_r10*x658))+((new_r00*x657)));
evalcond[7]=((((-1.0)*x657*x659))+new_r00+(((-1.0)*gconst4*x661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x663=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x664 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x663)))),ikfast_left_leg::IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x665=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x665.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x664.value)+(((1.5707963267949)*(x665.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x666=IKcos(j0);
ikfast_left_leg::IkReal x667=IKsin(j0);
ikfast_left_leg::IkReal x668=((1.0)*gconst5);
ikfast_left_leg::IkReal x669=(gconst4*x666);
ikfast_left_leg::IkReal x670=((1.0)*x667);
ikfast_left_leg::IkReal x671=(x667*x668);
evalcond[0]=(gconst4+((new_r11*x667))+((new_r01*x666)));
evalcond[1]=(((gconst5*x666))+((gconst4*x667))+new_r11);
evalcond[2]=(x669+new_r01+(((-1.0)*x671)));
evalcond[3]=((((-1.0)*new_r00*x670))+gconst4+((new_r10*x666)));
evalcond[4]=((((-1.0)*new_r01*x670))+gconst5+((new_r11*x666)));
evalcond[5]=(x669+new_r10+(((-1.0)*x671)));
evalcond[6]=(((new_r10*x667))+(((-1.0)*x668))+((new_r00*x666)));
evalcond[7]=((((-1.0)*gconst4*x670))+(((-1.0)*x666*x668))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x672=((1.0)*gconst4);
CheckValue<ikfast_left_leg::IkReal> x673 = IKatan2WithCheck(ikfast_left_leg::IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x672)))),ikfast_left_leg::IkReal(((((-1.0)*new_r00*x672))+(((-1.0)*new_r11*x672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x674=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x674.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x673.value)+(((1.5707963267949)*(x674.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x675=IKcos(j0);
ikfast_left_leg::IkReal x676=IKsin(j0);
ikfast_left_leg::IkReal x677=((1.0)*gconst5);
ikfast_left_leg::IkReal x678=(gconst4*x675);
ikfast_left_leg::IkReal x679=((1.0)*x676);
ikfast_left_leg::IkReal x680=(x676*x677);
evalcond[0]=(((new_r11*x676))+((new_r01*x675))+gconst4);
evalcond[1]=(((gconst5*x675))+((gconst4*x676))+new_r11);
evalcond[2]=((((-1.0)*x680))+x678+new_r01);
evalcond[3]=(((new_r10*x675))+(((-1.0)*new_r00*x679))+gconst4);
evalcond[4]=(((new_r11*x675))+(((-1.0)*new_r01*x679))+gconst5);
evalcond[5]=((((-1.0)*x680))+x678+new_r10);
evalcond[6]=(((new_r00*x675))+((new_r10*x676))+(((-1.0)*x677)));
evalcond[7]=((((-1.0)*x675*x677))+(((-1.0)*gconst4*x679))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j0eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x682 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r00),ikfast_left_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
ikfast_left_leg::IkReal x681=x682.value;
j0array[0]=((-1.0)*x681);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x681)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j0))))+((new_r10*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x683=((1.0)*new_r11);
CheckValue<ikfast_left_leg::IkReal> x684 = IKatan2WithCheck(ikfast_left_leg::IkReal((((cj2*new_r01))+(((-1.0)*sj2*x683)))),ikfast_left_leg::IkReal(((((-1.0)*new_r01*sj2))+(((-1.0)*cj2*x683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x685=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x685.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x684.value)+(((1.5707963267949)*(x685.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x686=IKcos(j0);
ikfast_left_leg::IkReal x687=IKsin(j0);
ikfast_left_leg::IkReal x688=((1.0)*cj2);
ikfast_left_leg::IkReal x689=(sj2*x686);
ikfast_left_leg::IkReal x690=(sj2*x687);
ikfast_left_leg::IkReal x691=((1.0)*x687);
ikfast_left_leg::IkReal x692=(x687*x688);
evalcond[0]=(sj2+((new_r01*x686))+((new_r11*x687)));
evalcond[1]=(x690+new_r11+((cj2*x686)));
evalcond[2]=(x689+(((-1.0)*x692))+new_r01);
evalcond[3]=(sj2+(((-1.0)*new_r00*x691))+((new_r10*x686)));
evalcond[4]=(cj2+(((-1.0)*new_r01*x691))+((new_r11*x686)));
evalcond[5]=(x689+(((-1.0)*x692))+new_r10);
evalcond[6]=((((-1.0)*x688))+((new_r00*x686))+((new_r10*x687)));
evalcond[7]=((((-1.0)*x686*x688))+new_r00+(((-1.0)*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
ikfast_left_leg::IkReal x693=((1.0)*sj2);
CheckValue<ikfast_left_leg::IkReal> x694 = IKatan2WithCheck(ikfast_left_leg::IkReal((((new_r01*sj2))+(((-1.0)*new_r10*x693)))),ikfast_left_leg::IkReal(((((-1.0)*new_r00*x693))+(((-1.0)*new_r11*x693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x695=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x695.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x694.value)+(((1.5707963267949)*(x695.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x696=IKcos(j0);
ikfast_left_leg::IkReal x697=IKsin(j0);
ikfast_left_leg::IkReal x698=((1.0)*cj2);
ikfast_left_leg::IkReal x699=(sj2*x696);
ikfast_left_leg::IkReal x700=(sj2*x697);
ikfast_left_leg::IkReal x701=((1.0)*x697);
ikfast_left_leg::IkReal x702=(x697*x698);
evalcond[0]=(sj2+((new_r11*x697))+((new_r01*x696)));
evalcond[1]=(x700+((cj2*x696))+new_r11);
evalcond[2]=((((-1.0)*x702))+x699+new_r01);
evalcond[3]=(sj2+((new_r10*x696))+(((-1.0)*new_r00*x701)));
evalcond[4]=(cj2+((new_r11*x696))+(((-1.0)*new_r01*x701)));
evalcond[5]=((((-1.0)*x702))+x699+new_r10);
evalcond[6]=(((new_r10*x697))+(((-1.0)*x698))+((new_r00*x696)));
evalcond[7]=((((-1.0)*x696*x698))+(((-1.0)*x700))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x703=IKPowWithIntegerCheck(IKsign((((new_r11*sj2))+((cj2*new_r01)))),-1);
if(!x703.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x704 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)+(cj2*cj2)+(new_r01*new_r01))),ikfast_left_leg::IkReal(((((-1.0)*cj2*sj2))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x703.value)))+(x704.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x705=IKcos(j0);
ikfast_left_leg::IkReal x706=IKsin(j0);
ikfast_left_leg::IkReal x707=((1.0)*cj2);
ikfast_left_leg::IkReal x708=(sj2*x705);
ikfast_left_leg::IkReal x709=(sj2*x706);
ikfast_left_leg::IkReal x710=((1.0)*x706);
ikfast_left_leg::IkReal x711=(x706*x707);
evalcond[0]=(sj2+((new_r01*x705))+((new_r11*x706)));
evalcond[1]=(((cj2*x705))+x709+new_r11);
evalcond[2]=((((-1.0)*x711))+x708+new_r01);
evalcond[3]=(sj2+((new_r10*x705))+(((-1.0)*new_r00*x710)));
evalcond[4]=(cj2+((new_r11*x705))+(((-1.0)*new_r01*x710)));
evalcond[5]=((((-1.0)*x711))+x708+new_r10);
evalcond[6]=(((new_r00*x705))+(((-1.0)*x707))+((new_r10*x706)));
evalcond[7]=((((-1.0)*x709))+(((-1.0)*x705*x707))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j0eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j0eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j0eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j0eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j0eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x713 = IKatan2WithCheck(ikfast_left_leg::IkReal((new_r10*new_r22)),ikfast_left_leg::IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
ikfast_left_leg::IkReal x712=x713.value;
j0array[0]=((-1.0)*x712);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x712)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[5];
ikfast_left_leg::IkReal x714=IKcos(j0);
ikfast_left_leg::IkReal x715=IKsin(j0);
ikfast_left_leg::IkReal x716=((1.0)*x715);
ikfast_left_leg::IkReal x717=(new_r11*x714);
evalcond[0]=(((new_r01*x714))+((new_r11*x715)));
evalcond[1]=(((new_r00*x714))+((new_r10*x715)));
evalcond[2]=(((new_r10*x714))+(((-1.0)*new_r00*x716)));
evalcond[3]=(x717+(((-1.0)*new_r01*x716)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x716))+((new_r22*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x719 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r00),ikfast_left_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
ikfast_left_leg::IkReal x718=x719.value;
j0array[0]=((-1.0)*x718);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x718)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[5];
ikfast_left_leg::IkReal x720=IKcos(j0);
ikfast_left_leg::IkReal x721=IKsin(j0);
ikfast_left_leg::IkReal x722=(new_r10*x720);
ikfast_left_leg::IkReal x723=((1.0)*x721);
ikfast_left_leg::IkReal x724=(new_r11*x720);
evalcond[0]=(((new_r01*x720))+((new_r11*x721)));
evalcond[1]=(x722+(((-1.0)*new_r00*x723)));
evalcond[2]=(x724+(((-1.0)*new_r01*x723)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x723))+((new_r22*x722)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x723))+((new_r22*x724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<ikfast_left_leg::IkReal> x726 = IKatan2WithCheck(ikfast_left_leg::IkReal(new_r01),ikfast_left_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
ikfast_left_leg::IkReal x725=x726.value;
j0array[0]=((-1.0)*x725);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x725)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[5];
ikfast_left_leg::IkReal x727=IKcos(j0);
ikfast_left_leg::IkReal x728=IKsin(j0);
ikfast_left_leg::IkReal x729=(new_r10*x727);
ikfast_left_leg::IkReal x730=((1.0)*x728);
ikfast_left_leg::IkReal x731=(new_r11*x727);
ikfast_left_leg::IkReal x732=(new_r22*x730);
evalcond[0]=(((new_r00*x727))+((new_r10*x728)));
evalcond[1]=(x729+(((-1.0)*new_r00*x730)));
evalcond[2]=(x731+(((-1.0)*new_r01*x730)));
evalcond[3]=((((-1.0)*new_r00*x732))+((new_r22*x729)));
evalcond[4]=(((new_r22*x731))+(((-1.0)*new_r01*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x734=IKPowWithIntegerCheck(cj1,-1);
if(!x734.valid){
continue;
}
ikfast_left_leg::IkReal x733=x734.value;
CheckValue<ikfast_left_leg::IkReal> x735=IKPowWithIntegerCheck(new_r01,-1);
if(!x735.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x733)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x733*(x735.value)*(((((-1.0)*cj1*sj2))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x733))+IKsqr((x733*(x735.value)*(((((-1.0)*cj1*sj2))+((new_r02*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r02*x733), (x733*(x735.value)*(((((-1.0)*cj1*sj2))+((new_r02*new_r11))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[18];
ikfast_left_leg::IkReal x736=IKcos(j0);
ikfast_left_leg::IkReal x737=IKsin(j0);
ikfast_left_leg::IkReal x738=((1.0)*cj2);
ikfast_left_leg::IkReal x739=((1.0)*sj1);
ikfast_left_leg::IkReal x740=((1.0)*cj1);
ikfast_left_leg::IkReal x741=(cj1*x736);
ikfast_left_leg::IkReal x742=(new_r10*x736);
ikfast_left_leg::IkReal x743=((1.0)*x737);
ikfast_left_leg::IkReal x744=(sj2*x737);
ikfast_left_leg::IkReal x745=(cj2*x736);
ikfast_left_leg::IkReal x746=(new_r11*x736);
ikfast_left_leg::IkReal x747=(sj2*x736);
ikfast_left_leg::IkReal x748=(new_r12*x736);
ikfast_left_leg::IkReal x749=(x737*x740);
ikfast_left_leg::IkReal x750=(x737*x739);
evalcond[0]=(new_r02+((cj1*x737)));
evalcond[1]=(new_r12+(((-1.0)*x736*x740)));
evalcond[2]=(((new_r02*x736))+((new_r12*x737)));
evalcond[3]=(sj2+((new_r01*x736))+((new_r11*x737)));
evalcond[4]=(x747+new_r01+((cj2*sj1*x737)));
evalcond[5]=(((new_r00*x736))+(((-1.0)*x738))+((new_r10*x737)));
evalcond[6]=((((-1.0)*x736*x738))+((sj1*x744))+new_r00);
evalcond[7]=((((-1.0)*sj1*x736*x738))+x744+new_r11);
evalcond[8]=((((-1.0)*new_r02*x743))+x748+(((-1.0)*x740)));
evalcond[9]=((((-1.0)*x737*x738))+(((-1.0)*x739*x747))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x743))+(((-1.0)*sj2*x739))+x742);
evalcond[11]=((((-1.0)*new_r01*x743))+(((-1.0)*sj1*x738))+x746);
evalcond[12]=((((-1.0)*new_r00*x749))+((new_r20*sj1))+((new_r10*x741)));
evalcond[13]=((((-1.0)*new_r01*x749))+((new_r11*x741))+((new_r21*sj1)));
evalcond[14]=((((-1.0)*new_r22*x740))+(((-1.0)*new_r02*x750))+((sj1*x748)));
evalcond[15]=((-1.0)+(((-1.0)*new_r02*x749))+((new_r22*sj1))+((new_r12*x741)));
evalcond[16]=((((-1.0)*sj2))+(((-1.0)*new_r00*x750))+(((-1.0)*new_r20*x740))+((sj1*x742)));
evalcond[17]=((((-1.0)*new_r01*x750))+((sj1*x746))+(((-1.0)*x738))+(((-1.0)*new_r21*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x751=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x751.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x752 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r02)),ikfast_left_leg::IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x751.value)))+(x752.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[18];
ikfast_left_leg::IkReal x753=IKcos(j0);
ikfast_left_leg::IkReal x754=IKsin(j0);
ikfast_left_leg::IkReal x755=((1.0)*cj2);
ikfast_left_leg::IkReal x756=((1.0)*sj1);
ikfast_left_leg::IkReal x757=((1.0)*cj1);
ikfast_left_leg::IkReal x758=(cj1*x753);
ikfast_left_leg::IkReal x759=(new_r10*x753);
ikfast_left_leg::IkReal x760=((1.0)*x754);
ikfast_left_leg::IkReal x761=(sj2*x754);
ikfast_left_leg::IkReal x762=(cj2*x753);
ikfast_left_leg::IkReal x763=(new_r11*x753);
ikfast_left_leg::IkReal x764=(sj2*x753);
ikfast_left_leg::IkReal x765=(new_r12*x753);
ikfast_left_leg::IkReal x766=(x754*x757);
ikfast_left_leg::IkReal x767=(x754*x756);
evalcond[0]=(((cj1*x754))+new_r02);
evalcond[1]=((((-1.0)*x753*x757))+new_r12);
evalcond[2]=(((new_r12*x754))+((new_r02*x753)));
evalcond[3]=(sj2+((new_r11*x754))+((new_r01*x753)));
evalcond[4]=(((cj2*sj1*x754))+x764+new_r01);
evalcond[5]=(((new_r00*x753))+((new_r10*x754))+(((-1.0)*x755)));
evalcond[6]=(((sj1*x761))+(((-1.0)*x753*x755))+new_r00);
evalcond[7]=((((-1.0)*sj1*x753*x755))+x761+new_r11);
evalcond[8]=(x765+(((-1.0)*new_r02*x760))+(((-1.0)*x757)));
evalcond[9]=((((-1.0)*x756*x764))+(((-1.0)*x754*x755))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x760))+(((-1.0)*sj2*x756))+x759);
evalcond[11]=((((-1.0)*sj1*x755))+x763+(((-1.0)*new_r01*x760)));
evalcond[12]=((((-1.0)*new_r00*x766))+((new_r20*sj1))+((new_r10*x758)));
evalcond[13]=(((new_r11*x758))+((new_r21*sj1))+(((-1.0)*new_r01*x766)));
evalcond[14]=(((sj1*x765))+(((-1.0)*new_r22*x757))+(((-1.0)*new_r02*x767)));
evalcond[15]=((-1.0)+((new_r22*sj1))+((new_r12*x758))+(((-1.0)*new_r02*x766)));
evalcond[16]=((((-1.0)*sj2))+(((-1.0)*new_r00*x767))+((sj1*x759))+(((-1.0)*new_r20*x757)));
evalcond[17]=(((sj1*x763))+(((-1.0)*new_r21*x757))+(((-1.0)*x755))+(((-1.0)*new_r01*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<ikfast_left_leg::IkReal> x768=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x768.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x769 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r02)),ikfast_left_leg::IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x768.value)))+(x769.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x770=IKcos(j0);
ikfast_left_leg::IkReal x771=IKsin(j0);
ikfast_left_leg::IkReal x772=((1.0)*cj1);
ikfast_left_leg::IkReal x773=(cj1*x770);
ikfast_left_leg::IkReal x774=(new_r12*x770);
ikfast_left_leg::IkReal x775=(x771*x772);
ikfast_left_leg::IkReal x776=((1.0)*new_r02*x771);
evalcond[0]=(((cj1*x771))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x770*x772)));
evalcond[2]=(((new_r12*x771))+((new_r02*x770)));
evalcond[3]=(x774+(((-1.0)*x776))+(((-1.0)*x772)));
evalcond[4]=((((-1.0)*new_r00*x775))+((new_r20*sj1))+((new_r10*x773)));
evalcond[5]=((((-1.0)*new_r01*x775))+((new_r11*x773))+((new_r21*sj1)));
evalcond[6]=((((-1.0)*new_r22*x772))+((sj1*x774))+(((-1.0)*sj1*x776)));
evalcond[7]=((-1.0)+(((-1.0)*new_r02*x775))+((new_r12*x773))+((new_r22*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_left_leg::IkReal j2eval[3];
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[3];
j2eval[0]=cj1;
j2eval[1]=sj0;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x777=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj0*x777))+(((-1.0)*new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*new_r00))+(((-1.0)*sj0*x777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x777))+(((-1.0)*new_r00*sj0))))+IKsqr((((cj0*new_r00))+(((-1.0)*sj0*x777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*x777))+(((-1.0)*new_r00*sj0))), (((cj0*new_r00))+(((-1.0)*sj0*x777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x778=IKcos(j2);
ikfast_left_leg::IkReal x779=IKsin(j2);
ikfast_left_leg::IkReal x780=((1.0)*sj0);
ikfast_left_leg::IkReal x781=(sj0*x779);
ikfast_left_leg::IkReal x782=((1.0)*x778);
ikfast_left_leg::IkReal x783=(cj0*x779);
ikfast_left_leg::IkReal x784=(cj0*x782);
evalcond[0]=(((new_r11*sj0))+x779+((cj0*new_r01)));
evalcond[1]=(((new_r10*sj0))+(((-1.0)*x782))+((cj0*new_r00)));
evalcond[2]=(((sj0*x778))+x783+new_r01);
evalcond[3]=((((-1.0)*x784))+x781+new_r00);
evalcond[4]=((((-1.0)*x784))+x781+new_r11);
evalcond[5]=((((-1.0)*x779))+((cj0*new_r10))+(((-1.0)*new_r00*x780)));
evalcond[6]=((((-1.0)*new_r01*x780))+(((-1.0)*x782))+((cj0*new_r11)));
evalcond[7]=((((-1.0)*x783))+new_r10+(((-1.0)*x778*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
ikfast_left_leg::IkReal x785=((1.0)*cj0);
if( IKabs(((((-1.0)*new_r01*x785))+(((-1.0)*new_r11*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj0))+(((-1.0)*new_r11*x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x785))+(((-1.0)*new_r11*sj0))))+IKsqr((((new_r01*sj0))+(((-1.0)*new_r11*x785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*new_r01*x785))+(((-1.0)*new_r11*sj0))), (((new_r01*sj0))+(((-1.0)*new_r11*x785))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x786=IKsin(j2);
ikfast_left_leg::IkReal x787=IKcos(j2);
ikfast_left_leg::IkReal x788=((1.0)*sj0);
ikfast_left_leg::IkReal x789=(cj0*x786);
ikfast_left_leg::IkReal x790=((1.0)*x787);
ikfast_left_leg::IkReal x791=(x787*x788);
evalcond[0]=(((new_r11*sj0))+x786+((cj0*new_r01)));
evalcond[1]=(x786+((cj0*new_r10))+(((-1.0)*new_r00*x788)));
evalcond[2]=((((-1.0)*new_r01*x788))+x787+((cj0*new_r11)));
evalcond[3]=((((-1.0)*x790))+((new_r10*sj0))+((cj0*new_r00)));
evalcond[4]=(((sj0*x786))+((cj0*x787))+new_r11);
evalcond[5]=((((-1.0)*x791))+x789+new_r01);
evalcond[6]=((((-1.0)*x791))+x789+new_r10);
evalcond[7]=((((-1.0)*cj0*x790))+(((-1.0)*x786*x788))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x792=IKsin(j2);
ikfast_left_leg::IkReal x793=IKcos(j2);
ikfast_left_leg::IkReal x794=((1.0)*sj1);
ikfast_left_leg::IkReal x795=((1.0)*cj1);
ikfast_left_leg::IkReal x796=((1.0)*x793);
evalcond[0]=(x792+new_r01);
evalcond[1]=(((cj1*x792))+new_r20);
evalcond[2]=(((cj1*x793))+new_r21);
evalcond[3]=((((-1.0)*x796))+new_r00);
evalcond[4]=((((-1.0)*x793*x794))+new_r11);
evalcond[5]=((((-1.0)*x792*x794))+new_r10);
evalcond[6]=(((new_r10*sj1))+(((-1.0)*x792))+(((-1.0)*new_r20*x795)));
evalcond[7]=((((-1.0)*new_r21*x795))+(((-1.0)*x796))+((new_r11*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x797=IKsin(j2);
ikfast_left_leg::IkReal x798=IKcos(j2);
evalcond[0]=(x797+new_r20);
evalcond[1]=(x798+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x797);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x799=IKsin(j2);
ikfast_left_leg::IkReal x800=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*x799))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x800)));
evalcond[2]=((((-1.0)*new_r01))+x799);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x801=IKcos(j2);
ikfast_left_leg::IkReal x802=IKsin(j2);
evalcond[0]=(new_r11+x801);
evalcond[1]=((((-1.0)*new_r01))+x802);
evalcond[2]=((((-1.0)*x801))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x802))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x803=IKsin(j2);
ikfast_left_leg::IkReal x804=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*new_r01))+x803);
evalcond[1]=(new_r11+(((-1.0)*x804)));
evalcond[2]=((((-1.0)*new_r10))+x803);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x805=IKcos(j2);
ikfast_left_leg::IkReal x806=IKsin(j2);
ikfast_left_leg::IkReal x807=((-1.0)*x806);
evalcond[0]=(new_r22*x805);
evalcond[1]=x807;
evalcond[2]=((-1.0)*x805);
evalcond[3]=(new_r22*x807);
evalcond[4]=((((-1.0)*new_r01))+x806);
evalcond[5]=((((-1.0)*x805))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x808=IKPowWithIntegerCheck(sj1,-1);
if(!x808.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x808.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x808.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x809=IKsin(j2);
ikfast_left_leg::IkReal x810=IKcos(j2);
ikfast_left_leg::IkReal x811=((1.0)*sj1);
ikfast_left_leg::IkReal x812=((1.0)*cj1);
ikfast_left_leg::IkReal x813=((1.0)*x810);
evalcond[0]=(((cj1*x809))+new_r20);
evalcond[1]=(((cj1*x810))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x809);
evalcond[3]=(((sj1*x810))+new_r11);
evalcond[4]=((((-1.0)*x813))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x809*x811))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x809))+(((-1.0)*new_r10*x811))+(((-1.0)*new_r20*x812)));
evalcond[7]=((((-1.0)*new_r11*x811))+(((-1.0)*new_r21*x812))+(((-1.0)*x813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x814=IKPowWithIntegerCheck(cj1,-1);
if(!x814.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x814.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x814.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x814.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x815=IKsin(j2);
ikfast_left_leg::IkReal x816=IKcos(j2);
ikfast_left_leg::IkReal x817=((1.0)*sj1);
ikfast_left_leg::IkReal x818=((1.0)*cj1);
ikfast_left_leg::IkReal x819=((1.0)*x816);
evalcond[0]=(((cj1*x815))+new_r20);
evalcond[1]=(((cj1*x816))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x815);
evalcond[3]=(((sj1*x816))+new_r11);
evalcond[4]=((((-1.0)*x819))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x815*x817))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x817))+(((-1.0)*new_r20*x818))+(((-1.0)*x815)));
evalcond[7]=((((-1.0)*new_r11*x817))+(((-1.0)*new_r21*x818))+(((-1.0)*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x820=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x820.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x821 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x821.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x820.value)))+(x821.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x822=IKsin(j2);
ikfast_left_leg::IkReal x823=IKcos(j2);
ikfast_left_leg::IkReal x824=((1.0)*sj1);
ikfast_left_leg::IkReal x825=((1.0)*cj1);
ikfast_left_leg::IkReal x826=((1.0)*x823);
evalcond[0]=(new_r20+((cj1*x822)));
evalcond[1]=(new_r21+((cj1*x823)));
evalcond[2]=((((-1.0)*new_r01))+x822);
evalcond[3]=(((sj1*x823))+new_r11);
evalcond[4]=((((-1.0)*x826))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x822*x824))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x825))+(((-1.0)*new_r10*x824))+(((-1.0)*x822)));
evalcond[7]=((((-1.0)*x826))+(((-1.0)*new_r11*x824))+(((-1.0)*new_r21*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x827=IKsin(j2);
ikfast_left_leg::IkReal x828=IKcos(j2);
ikfast_left_leg::IkReal x829=((1.0)*x828);
evalcond[0]=(new_r20+x827);
evalcond[1]=(new_r21+x828);
evalcond[2]=(((cj0*x827))+new_r01);
evalcond[3]=(((sj0*x827))+new_r11);
evalcond[4]=((((-1.0)*cj0*x829))+new_r00);
evalcond[5]=((((-1.0)*sj0*x829))+new_r10);
evalcond[6]=(((new_r11*sj0))+((cj0*new_r01))+x827);
evalcond[7]=(((new_r10*sj0))+(((-1.0)*x829))+((cj0*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x830=IKsin(j2);
ikfast_left_leg::IkReal x831=IKcos(j2);
ikfast_left_leg::IkReal x832=((1.0)*x831);
evalcond[0]=((((-1.0)*x830))+new_r20);
evalcond[1]=((((-1.0)*x832))+new_r21);
evalcond[2]=(((cj0*x830))+new_r01);
evalcond[3]=(new_r11+((sj0*x830)));
evalcond[4]=((((-1.0)*cj0*x832))+new_r00);
evalcond[5]=((((-1.0)*sj0*x832))+new_r10);
evalcond[6]=(((new_r11*sj0))+((cj0*new_r01))+x830);
evalcond[7]=(((new_r10*sj0))+(((-1.0)*x832))+((cj0*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x833=IKsin(j2);
ikfast_left_leg::IkReal x834=IKcos(j2);
ikfast_left_leg::IkReal x835=((1.0)*cj1);
ikfast_left_leg::IkReal x836=((1.0)*sj1);
ikfast_left_leg::IkReal x837=((1.0)*x834);
evalcond[0]=(new_r11+x833);
evalcond[1]=(new_r20+((cj1*x833)));
evalcond[2]=(new_r21+((cj1*x834)));
evalcond[3]=((((-1.0)*x837))+new_r10);
evalcond[4]=(new_r01+((sj1*x834)));
evalcond[5]=(new_r00+((sj1*x833)));
evalcond[6]=((((-1.0)*x833))+(((-1.0)*new_r20*x835))+(((-1.0)*new_r00*x836)));
evalcond[7]=((((-1.0)*x837))+(((-1.0)*new_r21*x835))+(((-1.0)*new_r01*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal j2eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=cj1;
j2eval[1]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
ikfast_left_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x838=IKsin(j2);
ikfast_left_leg::IkReal x839=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*new_r11))+x838);
evalcond[1]=((((-1.0)*x839))+new_r01);
evalcond[2]=((((-1.0)*x838))+new_r00);
evalcond[3]=((((-1.0)*x839))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x840=IKsin(j2);
ikfast_left_leg::IkReal x841=IKcos(j2);
evalcond[0]=(new_r01+x841);
evalcond[1]=(new_r00+x840);
evalcond[2]=((((-1.0)*new_r11))+x840);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x842=IKsin(j2);
ikfast_left_leg::IkReal x843=IKcos(j2);
evalcond[0]=(new_r20+x842);
evalcond[1]=(new_r21+x843);
evalcond[2]=((((-1.0)*new_r11))+x842);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r20, new_r21);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[4];
ikfast_left_leg::IkReal x844=IKsin(j2);
ikfast_left_leg::IkReal x845=((1.0)*(IKcos(j2)));
evalcond[0]=((((-1.0)*x844))+new_r20);
evalcond[1]=((((-1.0)*x845))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x844);
evalcond[3]=((((-1.0)*x845))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[6];
ikfast_left_leg::IkReal x846=IKcos(j2);
ikfast_left_leg::IkReal x847=IKsin(j2);
ikfast_left_leg::IkReal x848=((-1.0)*x846);
ikfast_left_leg::IkReal x849=((-1.0)*x847);
evalcond[0]=x849;
evalcond[1]=x848;
evalcond[2]=(new_r22*x848);
evalcond[3]=(new_r22*x849);
evalcond[4]=((((-1.0)*new_r11))+x847);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x850=IKPowWithIntegerCheck(cj1,-1);
if(!x850.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x851=IKPowWithIntegerCheck(sj1,-1);
if(!x851.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x850.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x851.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x850.value)))+IKsqr((new_r01*(x851.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20*(x850.value)), (new_r01*(x851.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x852=IKsin(j2);
ikfast_left_leg::IkReal x853=IKcos(j2);
ikfast_left_leg::IkReal x854=((1.0)*cj1);
ikfast_left_leg::IkReal x855=((1.0)*sj1);
ikfast_left_leg::IkReal x856=((1.0)*x853);
evalcond[0]=(((cj1*x852))+new_r20);
evalcond[1]=(((cj1*x853))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x852);
evalcond[3]=((((-1.0)*x853*x855))+new_r01);
evalcond[4]=((((-1.0)*x852*x855))+new_r00);
evalcond[5]=((((-1.0)*x856))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x854))+(((-1.0)*x852))+((new_r00*sj1)));
evalcond[7]=((((-1.0)*new_r21*x854))+(((-1.0)*x856))+((new_r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x857=IKPowWithIntegerCheck(cj1,-1);
if(!x857.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x857.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x857.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x857.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x858=IKsin(j2);
ikfast_left_leg::IkReal x859=IKcos(j2);
ikfast_left_leg::IkReal x860=((1.0)*cj1);
ikfast_left_leg::IkReal x861=((1.0)*sj1);
ikfast_left_leg::IkReal x862=((1.0)*x859);
evalcond[0]=(((cj1*x858))+new_r20);
evalcond[1]=(((cj1*x859))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x858);
evalcond[3]=((((-1.0)*x859*x861))+new_r01);
evalcond[4]=((((-1.0)*x858*x861))+new_r00);
evalcond[5]=((((-1.0)*x862))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x858))+((new_r00*sj1))+(((-1.0)*new_r20*x860)));
evalcond[7]=((((-1.0)*x862))+(((-1.0)*new_r21*x860))+((new_r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x863=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x863.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x864 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[8];
ikfast_left_leg::IkReal x865=IKsin(j2);
ikfast_left_leg::IkReal x866=IKcos(j2);
ikfast_left_leg::IkReal x867=((1.0)*cj1);
ikfast_left_leg::IkReal x868=((1.0)*sj1);
ikfast_left_leg::IkReal x869=((1.0)*x866);
evalcond[0]=(((cj1*x865))+new_r20);
evalcond[1]=(((cj1*x866))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x865);
evalcond[3]=((((-1.0)*x866*x868))+new_r01);
evalcond[4]=((((-1.0)*x865*x868))+new_r00);
evalcond[5]=((((-1.0)*x869))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x865))+((new_r00*sj1))+(((-1.0)*new_r20*x867)));
evalcond[7]=((((-1.0)*x869))+(((-1.0)*new_r21*x867))+((new_r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_left_leg::IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=IKabs(new_r22);
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
ikfast_left_leg::IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
ikfast_left_leg::IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
ikfast_left_leg::IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x871=IKPowWithIntegerCheck(cj1,-1);
if(!x871.valid){
continue;
}
ikfast_left_leg::IkReal x870=x871.value;
CheckValue<ikfast_left_leg::IkReal> x872=IKPowWithIntegerCheck(sj0,-1);
if(!x872.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x873=IKPowWithIntegerCheck(sj1,-1);
if(!x873.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x870)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x870*(x872.value)*(x873.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x870))+IKsqr((x870*(x872.value)*(x873.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r20*x870), (x870*(x872.value)*(x873.value)*((((cj0*new_r20))+(((-1.0)*cj1*new_r01))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x874=IKsin(j2);
ikfast_left_leg::IkReal x875=IKcos(j2);
ikfast_left_leg::IkReal x876=((1.0)*sj0);
ikfast_left_leg::IkReal x877=(cj0*new_r11);
ikfast_left_leg::IkReal x878=((1.0)*cj1);
ikfast_left_leg::IkReal x879=(cj0*new_r10);
ikfast_left_leg::IkReal x880=(cj0*sj1);
ikfast_left_leg::IkReal x881=((1.0)*x875);
ikfast_left_leg::IkReal x882=((1.0)*x874);
ikfast_left_leg::IkReal x883=(sj0*x874);
evalcond[0]=(((cj1*x874))+new_r20);
evalcond[1]=(((cj1*x875))+new_r21);
evalcond[2]=(((new_r11*sj0))+((cj0*new_r01))+x874);
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x881))+((cj0*new_r00)));
evalcond[4]=(((sj0*sj1*x875))+new_r01+((cj0*x874)));
evalcond[5]=(((sj1*x883))+(((-1.0)*cj0*x881))+new_r00);
evalcond[6]=(new_r11+x883+(((-1.0)*x880*x881)));
evalcond[7]=((((-1.0)*new_r00*x876))+x879+(((-1.0)*sj1*x882)));
evalcond[8]=((((-1.0)*new_r01*x876))+x877+(((-1.0)*sj1*x881)));
evalcond[9]=((((-1.0)*x875*x876))+new_r10+(((-1.0)*x880*x882)));
evalcond[10]=((((-1.0)*new_r20*x878))+(((-1.0)*new_r00*sj1*x876))+(((-1.0)*x882))+((sj1*x879)));
evalcond[11]=((((-1.0)*new_r21*x878))+(((-1.0)*x881))+(((-1.0)*new_r01*sj1*x876))+((sj1*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x885=IKPowWithIntegerCheck(cj1,-1);
if(!x885.valid){
continue;
}
ikfast_left_leg::IkReal x884=x885.value;
CheckValue<ikfast_left_leg::IkReal> x886=IKPowWithIntegerCheck(cj0,-1);
if(!x886.valid){
continue;
}
if( IKabs((x884*(x886.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x884)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x884*(x886.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1))))))+IKsqr(((-1.0)*new_r21*x884))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x884*(x886.value)*(((((-1.0)*cj1*new_r01))+((new_r21*sj0*sj1))))), ((-1.0)*new_r21*x884));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x887=IKsin(j2);
ikfast_left_leg::IkReal x888=IKcos(j2);
ikfast_left_leg::IkReal x889=((1.0)*sj0);
ikfast_left_leg::IkReal x890=(cj0*new_r11);
ikfast_left_leg::IkReal x891=((1.0)*cj1);
ikfast_left_leg::IkReal x892=(cj0*new_r10);
ikfast_left_leg::IkReal x893=(cj0*sj1);
ikfast_left_leg::IkReal x894=((1.0)*x888);
ikfast_left_leg::IkReal x895=((1.0)*x887);
ikfast_left_leg::IkReal x896=(sj0*x887);
evalcond[0]=(((cj1*x887))+new_r20);
evalcond[1]=(((cj1*x888))+new_r21);
evalcond[2]=(((new_r11*sj0))+((cj0*new_r01))+x887);
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x894))+((cj0*new_r00)));
evalcond[4]=(((sj0*sj1*x888))+((cj0*x887))+new_r01);
evalcond[5]=(((sj1*x896))+(((-1.0)*cj0*x894))+new_r00);
evalcond[6]=((((-1.0)*x893*x894))+new_r11+x896);
evalcond[7]=((((-1.0)*new_r00*x889))+x892+(((-1.0)*sj1*x895)));
evalcond[8]=((((-1.0)*new_r01*x889))+x890+(((-1.0)*sj1*x894)));
evalcond[9]=((((-1.0)*x893*x895))+(((-1.0)*x888*x889))+new_r10);
evalcond[10]=(((sj1*x892))+(((-1.0)*x895))+(((-1.0)*new_r20*x891))+(((-1.0)*new_r00*sj1*x889)));
evalcond[11]=(((sj1*x890))+(((-1.0)*new_r21*x891))+(((-1.0)*x894))+(((-1.0)*new_r01*sj1*x889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_left_leg::IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<ikfast_left_leg::IkReal> x897=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x897.valid){
continue;
}
CheckValue<ikfast_left_leg::IkReal> x898 = IKatan2WithCheck(ikfast_left_leg::IkReal(((-1.0)*new_r20)),ikfast_left_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x898.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x897.value)))+(x898.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
ikfast_left_leg::IkReal evalcond[12];
ikfast_left_leg::IkReal x899=IKsin(j2);
ikfast_left_leg::IkReal x900=IKcos(j2);
ikfast_left_leg::IkReal x901=((1.0)*sj0);
ikfast_left_leg::IkReal x902=(cj0*new_r11);
ikfast_left_leg::IkReal x903=((1.0)*cj1);
ikfast_left_leg::IkReal x904=(cj0*new_r10);
ikfast_left_leg::IkReal x905=(cj0*sj1);
ikfast_left_leg::IkReal x906=((1.0)*x900);
ikfast_left_leg::IkReal x907=((1.0)*x899);
ikfast_left_leg::IkReal x908=(sj0*x899);
evalcond[0]=(((cj1*x899))+new_r20);
evalcond[1]=(((cj1*x900))+new_r21);
evalcond[2]=(((new_r11*sj0))+((cj0*new_r01))+x899);
evalcond[3]=(((new_r10*sj0))+(((-1.0)*x906))+((cj0*new_r00)));
evalcond[4]=(((cj0*x899))+((sj0*sj1*x900))+new_r01);
evalcond[5]=((((-1.0)*cj0*x906))+new_r00+((sj1*x908)));
evalcond[6]=(new_r11+x908+(((-1.0)*x905*x906)));
evalcond[7]=((((-1.0)*sj1*x907))+(((-1.0)*new_r00*x901))+x904);
evalcond[8]=((((-1.0)*sj1*x906))+(((-1.0)*new_r01*x901))+x902);
evalcond[9]=((((-1.0)*x900*x901))+new_r10+(((-1.0)*x905*x907)));
evalcond[10]=((((-1.0)*new_r20*x903))+(((-1.0)*new_r00*sj1*x901))+(((-1.0)*x907))+((sj1*x904)));
evalcond[11]=((((-1.0)*x906))+(((-1.0)*new_r21*x903))+(((-1.0)*new_r01*sj1*x901))+((sj1*x902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_left_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(ikfast_left_leg::IkReal rawcoeffs[3+1], ikfast_left_leg::IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const ikfast_left_leg::IkReal tol = 128.0*std::numeric_limits<ikfast_left_leg::IkReal>::epsilon();
    const ikfast_left_leg::IkReal tolsqrt = sqrt(std::numeric_limits<ikfast_left_leg::IkReal>::epsilon());
    complex<ikfast_left_leg::IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<ikfast_left_leg::IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<ikfast_left_leg::IkReal> roots[3];
    ikfast_left_leg::IkReal err[3];
    roots[0] = complex<ikfast_left_leg::IkReal>(1,0);
    roots[1] = complex<ikfast_left_leg::IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<ikfast_left_leg::IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<ikfast_left_leg::IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(ikfast_left_leg::IkReal rawcoeffs[2+1], ikfast_left_leg::IkReal rawroots[2], int& numroots) {
    ikfast_left_leg::IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(ikfast_left_leg::IkReal rawcoeffs[4+1], ikfast_left_leg::IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const ikfast_left_leg::IkReal tol = 128.0*std::numeric_limits<ikfast_left_leg::IkReal>::epsilon();
    const ikfast_left_leg::IkReal tolsqrt = sqrt(std::numeric_limits<ikfast_left_leg::IkReal>::epsilon());
    complex<ikfast_left_leg::IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<ikfast_left_leg::IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<ikfast_left_leg::IkReal> roots[4];
    ikfast_left_leg::IkReal err[4];
    roots[0] = complex<ikfast_left_leg::IkReal>(1,0);
    roots[1] = complex<ikfast_left_leg::IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<ikfast_left_leg::IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<ikfast_left_leg::IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
bool ComputeIk(const ikfast_left_leg::IkReal* eetrans, const ikfast_left_leg::IkReal* eerot, const ikfast_left_leg::IkReal* pfree, IkSolutionListBase<ikfast_left_leg::IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

bool ComputeIk2(const ikfast_left_leg::IkReal* eetrans, const ikfast_left_leg::IkReal* eerot, const ikfast_left_leg::IkReal* pfree, IkSolutionListBase<ikfast_left_leg::IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

const char* GetKinematicsHash() { return "<robot:GenericRobot - talos (b5711066cf78f3ca2f78c520c687367a)>"; }

const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE_LEFT;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<ikfast_left_leg::IkReal> solutions;
    std::vector<ikfast_left_leg::IkReal> vfree(GetNumFreeParameters());
    ikfast_left_leg::IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<ikfast_left_leg::IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<ikfast_left_leg::IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<ikfast_left_leg::IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

}
