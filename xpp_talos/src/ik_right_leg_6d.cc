/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-11-01 23:46:45.633982
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include <xpp_talos/ikfast_right.h> // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast_right_leg::ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((ikfast_right_leg::IkReal)6.28318530717959)
#define IKPI  ((ikfast_right_leg::IkReal)3.14159265358979)
#define IKPI_2  ((ikfast_right_leg::IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

namespace ikfast_right_leg {
using namespace ikfast;

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE_RIGHT {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((ikfast_right_leg::IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((ikfast_right_leg::IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((ikfast_right_leg::IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((ikfast_right_leg::IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
void ComputeFk(const ikfast_right_leg::IkReal* j, ikfast_right_leg::IkReal* eetrans, ikfast_right_leg::IkReal* eerot) {
ikfast_right_leg::IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[5]);
x12=((1.0)*x7);
x13=((0.107)*x11);
x14=((0.325)*x1);
x15=((0.107)*x8);
x16=((0.325)*x4);
x17=((0.107)*x7);
x18=((0.38)*x4);
x19=((1.0)*x2);
x20=((1.0)*x4);
x21=((1.0)*x3);
x22=((1.0)*x8);
x23=(x1*x10);
x24=(x2*x4);
x25=(x10*x6);
x26=(x0*x1);
x27=((-1.0)*x5);
x28=(x0*x3);
x29=((-1.0)*x6);
x30=(x10*x3);
x31=(x2*x28);
x32=(x0*x10*x5);
x33=(x1*x19*x4);
x34=((((-1.0)*x33))+x28);
x35=((((-1.0)*x1*x20))+x31);
x36=(x26+((x24*x3)));
x37=((((-1.0)*x19*x26))+(((-1.0)*x20*x3)));
x38=((((-1.0)*x32))+((x25*x4)));
x39=(x34*x5);
x40=(x35*x6);
x41=(((x10*x20*x5))+(((1.0)*x0*x25)));
x42=(x37*x6);
x43=(((x35*x5))+((x6*(((((-1.0)*x19*x3*x4))+(((-1.0)*x26)))))));
x44=(((x6*(((((-1.0)*x0*x21))+x33))))+((x37*x5)));
x45=(((x27*x36))+((x29*x35)));
x46=((((-1.0)*x12*x38))+(((-1.0)*x22*x41)));
x47=((((-1.0)*x12*x43))+(((-1.0)*x22*x45)));
x48=(((x22*(((((-1.0)*x27*x34))+(((-1.0)*x29*x37))))))+(((-1.0)*x12*x44)));
eerot[0]=(((x7*((x39+x42))))+((x44*x8)));
eerot[1]=(((x11*x48))+(((-1.0)*x23*x9)));
eerot[2]=(((x11*x23))+((x48*x9)));
ikfast_right_leg::IkReal x49=((1.0)*x3);
eetrans[0]=((-0.02)+((x5*(((((-1.0)*x0*x14*x2))+(((-1.0)*x16*x49))))))+(((-1.0)*x13*x23))+(((-1.0)*x18*x49))+((x9*((((x17*x44))+((x15*(((((-1.0)*x39))+(((-1.0)*x42))))))))))+(((-0.38)*x2*x26))+((x6*((((x14*x24))+(((-0.325)*x28)))))));
eerot[3]=(((x43*x8))+((x7*((x40+((x36*x5)))))));
eerot[4]=(((x30*x9))+((x11*x47)));
eerot[5]=(((x47*x9))+(((-1.0)*x10*x11*x21)));
ikfast_right_leg::IkReal x50=((1.0)*x14);
eetrans[1]=((-0.085)+((x9*((((x17*x43))+((x15*x45))))))+(((-1.0)*x1*x18))+(((0.38)*x31))+((x13*x30))+((x6*(((((-1.0)*x16*x2*x3))+(((-1.0)*x0*x50))))))+((x5*(((((0.325)*x31))+(((-1.0)*x4*x50)))))));
eerot[6]=(((x38*x8))+(((-1.0)*x41*x7)));
eerot[7]=(((x11*x46))+((x2*x9)));
eerot[8]=((((-1.0)*x11*x19))+((x46*x9)));
eetrans[2]=((-0.27105)+(((-0.38)*x0*x10))+(((-0.325)*x32))+((x16*x25))+((x9*((((x17*x38))+((x15*x41))))))+((x13*x2)));
}

int GetNumFreeParameters() { return 0; }
int* GetFreeParameters() { return NULL; }
int GetNumJoints() { return 6; }

int GetIkRealSize() { return sizeof(ikfast_right_leg::IkReal); }

int GetIkType() { return 0x67000001; }

class IKSolver {
public:
ikfast_right_leg::IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

ikfast_right_leg::IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const ikfast_right_leg::IkReal* eetrans, const ikfast_right_leg::IkReal* eerot, const ikfast_right_leg::IkReal* pfree, IkSolutionListBase<ikfast_right_leg::IkReal>& solutions) {
j6=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<ikfast_right_leg::IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((0.02)+(((0.107)*r02))+px);
new_r10=((-1.0)*r12);
new_r11=r11;
new_r12=r10;
new_py=((0.085)+(((0.107)*r12))+py);
new_r20=((-1.0)*r22);
new_r21=r21;
new_r22=r20;
new_pz=((0.27105)+pz+(((0.107)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
ikfast_right_leg::IkReal x51=((1.0)*px);
ikfast_right_leg::IkReal x52=((1.0)*pz);
ikfast_right_leg::IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
{
ikfast_right_leg::IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
cj9array[0]=((-1.01224696356275)+(((4.04858299595142)*pp)));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
ikfast_right_leg::IkReal j11eval[1];
j11eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j10eval[2];
j10eval[0]=((IKabs(sj9))+(((2.63157894736842)*(IKabs(((0.325)+(((0.38)*cj9))))))));
j10eval[1]=((1.0)+(((1.36710059171598)*(sj9*sj9)))+(((1.36710059171598)*(cj9*cj9)))+(((2.33846153846154)*cj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10, j11]

} else
{
{
ikfast_right_leg::IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
ikfast_right_leg::IkReal x54=((0.325)+(((0.38)*cj9)));
CheckValue<ikfast_right_leg::IkReal> x57 = IKatan2WithCheck(ikfast_right_leg::IkReal(((0.38)*sj9)),ikfast_right_leg::IkReal(x54),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
ikfast_right_leg::IkReal x55=((1.0)*(x57.value));
if((((x54*x54)+(((0.1444)*(sj9*sj9))))) < -0.00001)
continue;
CheckValue<ikfast_right_leg::IkReal> x58=IKPowWithIntegerCheck(IKabs(IKsqrt(((x54*x54)+(((0.1444)*(sj9*sj9)))))),-1);
if(!x58.valid){
continue;
}
if( ((npz*(x58.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x58.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
ikfast_right_leg::IkReal x56=IKasin((npz*(x58.value)));
j10array[0]=(x56+(((-1.0)*x55)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x55))+(((-1.0)*x56)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
ikfast_right_leg::IkReal j11eval[3];
ikfast_right_leg::IkReal x59=((19.0)*sj9);
ikfast_right_leg::IkReal x60=((50.0)*cj10*npz);
ikfast_right_leg::IkReal x61=(((sj10*(npy*npy)))+((sj10*(npx*npx))));
j11eval[0]=x61;
j11eval[1]=IKsign(x61);
j11eval[2]=((IKabs((((npx*x60))+(((-1.0)*npx*x59)))))+(IKabs((((npy*x59))+(((-1.0)*npy*x60))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j11eval[3];
ikfast_right_leg::IkReal x62=((76.0)*cj9);
ikfast_right_leg::IkReal x63=((200.0)*npz*sj10);
ikfast_right_leg::IkReal x64=(((cj10*(npy*npy)))+((cj10*(npx*npx))));
j11eval[0]=x64;
j11eval[1]=IKsign(x64);
j11eval[2]=((IKabs((((npy*x63))+(((-1.0)*npy*x62))+(((-65.0)*npy)))))+(IKabs((((npx*x62))+(((-1.0)*npx*x63))+(((65.0)*npx))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j11eval[3];
ikfast_right_leg::IkReal x65=((76.0)*npx);
ikfast_right_leg::IkReal x66=(sj10*sj9);
ikfast_right_leg::IkReal x67=(cj10*npy);
ikfast_right_leg::IkReal x68=((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))));
j11eval[0]=x68;
j11eval[1]=IKsign(x68);
j11eval[2]=((IKabs(((((-1.0)*cj10*cj9*x65))+(((-65.0)*cj10*npx))+((x65*x66)))))+(IKabs(((((76.0)*cj9*x67))+(((-76.0)*npy*x66))+(((65.0)*x67))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[4];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
ikfast_right_leg::IkReal x69=npy*npy;
ikfast_right_leg::IkReal x70=npx*npx;
j11eval[0]=(x70+x69);
j11eval[1]=IKsign(((((50.0)*x69))+(((50.0)*x70))));
j11eval[2]=361.0;
j11eval[3]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  || IKabs(j11eval[3]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j11eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<ikfast_right_leg::IkReal> x72 = IKatan2WithCheck(ikfast_right_leg::IkReal(npx),ikfast_right_leg::IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x72.valid){
continue;
}
ikfast_right_leg::IkReal x71=x72.value;
j11array[0]=((-1.0)*x71);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x71)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npx*(IKsin(j11))))+(((-1.0)*npy*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j11eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<ikfast_right_leg::IkReal> x915 = IKatan2WithCheck(ikfast_right_leg::IkReal(npx),ikfast_right_leg::IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
ikfast_right_leg::IkReal x914=x915.value;
j11array[0]=((-1.0)*x914);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x914)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npx*(IKsin(j11))))+(((-1.0)*npy*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<ikfast_right_leg::IkReal> x916 = IKatan2WithCheck(ikfast_right_leg::IkReal(((19.0)*npy*sj9)),ikfast_right_leg::IkReal(((-19.0)*npx*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x917=IKPowWithIntegerCheck(IKsign(((((50.0)*(npy*npy)))+(((50.0)*(npx*npx))))),-1);
if(!x917.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x916.value)+(((1.5707963267949)*(x917.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[2];
ikfast_right_leg::IkReal x918=IKcos(j11);
ikfast_right_leg::IkReal x919=IKsin(j11);
ikfast_right_leg::IkReal x920=((1.0)*npy);
evalcond[0]=((((-1.0)*npx*x919))+(((-1.0)*x918*x920)));
evalcond[1]=(((npx*x918))+(((0.38)*sj9))+(((-1.0)*x919*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[4];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
ikfast_right_leg::IkReal x921=npy*npy;
ikfast_right_leg::IkReal x922=npx*npx;
j11eval[0]=((((-1.0)*x921))+(((-1.0)*x922)));
j11eval[1]=IKsign(((((-50.0)*x921))+(((-50.0)*x922))));
j11eval[2]=361.0;
j11eval[3]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  || IKabs(j11eval[3]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j11eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<ikfast_right_leg::IkReal> x924 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*npx)),ikfast_right_leg::IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
ikfast_right_leg::IkReal x923=x924.value;
j11array[0]=((-1.0)*x923);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x923)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npx*(IKsin(j11))))+(((-1.0)*npy*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j11eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<ikfast_right_leg::IkReal> x926 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*npx)),ikfast_right_leg::IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
ikfast_right_leg::IkReal x925=x926.value;
j11array[0]=((-1.0)*x925);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x925)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*npx*(IKsin(j11))))+(((-1.0)*npy*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<ikfast_right_leg::IkReal> x927 = IKatan2WithCheck(ikfast_right_leg::IkReal(((19.0)*npy*sj9)),ikfast_right_leg::IkReal(((-19.0)*npx*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x927.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x928=IKPowWithIntegerCheck(IKsign(((((-50.0)*(npx*npx)))+(((-50.0)*(npy*npy))))),-1);
if(!x928.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x927.value)+(((1.5707963267949)*(x928.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[2];
ikfast_right_leg::IkReal x929=IKsin(j11);
ikfast_right_leg::IkReal x930=IKcos(j11);
ikfast_right_leg::IkReal x931=((1.0)*x930);
evalcond[0]=((((-1.0)*npy*x931))+(((-1.0)*npx*x929)));
evalcond[1]=((((-1.0)*npx*x931))+((npy*x929))+(((0.38)*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
ikfast_right_leg::IkReal x932=((76.0)*cj9);
ikfast_right_leg::IkReal x933=((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))));
j11eval[0]=x933;
j11eval[1]=IKsign(x933);
j11eval[2]=((IKabs(((((-1.0)*npx*x932))+(((-65.0)*npx)))))+(IKabs((((npy*x932))+(((65.0)*npy))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
ikfast_right_leg::IkReal x934=((0.38)*cj9);
CheckValue<ikfast_right_leg::IkReal> x935=IKPowWithIntegerCheck(IKsign(((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))))),-1);
if(!x935.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x936 = IKatan2WithCheck(ikfast_right_leg::IkReal((((npy*x934))+(((0.325)*npy)))),ikfast_right_leg::IkReal(((((-1.0)*npx*x934))+(((-0.325)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x935.value)))+(x936.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[2];
ikfast_right_leg::IkReal x937=IKsin(j11);
ikfast_right_leg::IkReal x938=IKcos(j11);
ikfast_right_leg::IkReal x939=((1.0)*x938);
evalcond[0]=((((-1.0)*npy*x939))+(((-1.0)*npx*x937)));
evalcond[1]=((0.325)+((npy*x937))+(((-1.0)*npx*x939))+(((0.38)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
ikfast_right_leg::IkReal x940=((76.0)*cj9);
ikfast_right_leg::IkReal x941=((npx*npx)+(npy*npy));
j11eval[0]=x941;
j11eval[1]=IKsign(x941);
j11eval[2]=((IKabs(((((-1.0)*npx*x940))+(((-65.0)*npx)))))+(IKabs(((((65.0)*npy))+((npy*x940))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
ikfast_right_leg::IkReal x942=((0.38)*cj9);
CheckValue<ikfast_right_leg::IkReal> x943=IKPowWithIntegerCheck(IKsign(((npx*npx)+(npy*npy))),-1);
if(!x943.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x944 = IKatan2WithCheck(ikfast_right_leg::IkReal(((((0.325)*npy))+((npy*x942)))),ikfast_right_leg::IkReal(((((-1.0)*npx*x942))+(((-0.325)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x943.value)))+(x944.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[2];
ikfast_right_leg::IkReal x945=IKcos(j11);
ikfast_right_leg::IkReal x946=IKsin(j11);
ikfast_right_leg::IkReal x947=((1.0)*npy);
evalcond[0]=((((-1.0)*x945*x947))+(((-1.0)*npx*x946)));
evalcond[1]=((0.325)+(((0.38)*cj9))+(((-1.0)*x946*x947))+((npx*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
ikfast_right_leg::IkReal x948=(cj10*npy);
ikfast_right_leg::IkReal x949=((0.38)*cj9);
ikfast_right_leg::IkReal x950=(cj10*npx);
ikfast_right_leg::IkReal x951=((0.38)*sj10*sj9);
CheckValue<ikfast_right_leg::IkReal> x952=IKPowWithIntegerCheck(IKsign(((((-1.0)*(npy*npy)))+(((-1.0)*(npx*npx))))),-1);
if(!x952.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x953 = IKatan2WithCheck(ikfast_right_leg::IkReal((((x948*x949))+(((-1.0)*npy*x951))+(((0.325)*x948)))),ikfast_right_leg::IkReal((((npx*x951))+(((-0.325)*x950))+(((-1.0)*x949*x950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x952.value)))+(x953.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x954=IKcos(j11);
ikfast_right_leg::IkReal x955=IKsin(j11);
ikfast_right_leg::IkReal x956=((1.0)*npz);
ikfast_right_leg::IkReal x957=((0.38)*cj9);
ikfast_right_leg::IkReal x958=((0.38)*sj9);
ikfast_right_leg::IkReal x959=((1.0)*x954);
ikfast_right_leg::IkReal x960=(npy*x955);
evalcond[0]=((((-1.0)*npx*x955))+(((-1.0)*npy*x959)));
evalcond[1]=((((-1.0)*cj10*x956))+((npx*sj10*x954))+(((-1.0)*sj10*x960))+x958);
evalcond[2]=((0.325)+(((-1.0)*sj10*x956))+((cj10*x960))+x957+(((-1.0)*cj10*npx*x959)));
evalcond[3]=((((-1.0)*sj10*x958))+(((-1.0)*npx*x959))+((cj10*x957))+(((0.325)*cj10))+x960);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
ikfast_right_leg::IkReal x961=(npz*sj10);
ikfast_right_leg::IkReal x962=((0.38)*cj9);
CheckValue<ikfast_right_leg::IkReal> x963=IKPowWithIntegerCheck(IKsign((((cj10*(npy*npy)))+((cj10*(npx*npx))))),-1);
if(!x963.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x964 = IKatan2WithCheck(ikfast_right_leg::IkReal((((npy*x961))+(((-1.0)*npy*x962))+(((-0.325)*npy)))),ikfast_right_leg::IkReal(((((0.325)*npx))+((npx*x962))+(((-1.0)*npx*x961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x963.value)))+(x964.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x965=IKcos(j11);
ikfast_right_leg::IkReal x966=IKsin(j11);
ikfast_right_leg::IkReal x967=((1.0)*npz);
ikfast_right_leg::IkReal x968=((0.38)*cj9);
ikfast_right_leg::IkReal x969=((0.38)*sj9);
ikfast_right_leg::IkReal x970=((1.0)*x965);
ikfast_right_leg::IkReal x971=(npy*x966);
evalcond[0]=((((-1.0)*npy*x970))+(((-1.0)*npx*x966)));
evalcond[1]=((((-1.0)*cj10*x967))+((npx*sj10*x965))+x969+(((-1.0)*sj10*x971)));
evalcond[2]=((0.325)+(((-1.0)*sj10*x967))+((cj10*x971))+(((-1.0)*cj10*npx*x970))+x968);
evalcond[3]=((((-1.0)*sj10*x969))+(((-1.0)*npx*x970))+((cj10*x968))+(((0.325)*cj10))+x971);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
ikfast_right_leg::IkReal x972=((0.38)*sj9);
ikfast_right_leg::IkReal x973=(cj10*npz);
CheckValue<ikfast_right_leg::IkReal> x974=IKPowWithIntegerCheck(IKsign((((sj10*(npy*npy)))+((sj10*(npx*npx))))),-1);
if(!x974.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x975 = IKatan2WithCheck(ikfast_right_leg::IkReal((((npy*x972))+(((-1.0)*npy*x973)))),ikfast_right_leg::IkReal(((((-1.0)*npx*x972))+((npx*x973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x976=IKcos(j11);
ikfast_right_leg::IkReal x977=IKsin(j11);
ikfast_right_leg::IkReal x978=((1.0)*npz);
ikfast_right_leg::IkReal x979=((0.38)*cj9);
ikfast_right_leg::IkReal x980=((0.38)*sj9);
ikfast_right_leg::IkReal x981=((1.0)*x976);
ikfast_right_leg::IkReal x982=(npy*x977);
evalcond[0]=((((-1.0)*npy*x981))+(((-1.0)*npx*x977)));
evalcond[1]=((((-1.0)*cj10*x978))+((npx*sj10*x976))+(((-1.0)*sj10*x982))+x980);
evalcond[2]=((0.325)+(((-1.0)*sj10*x978))+((cj10*x982))+(((-1.0)*cj10*npx*x981))+x979);
evalcond[3]=((((-1.0)*sj10*x980))+(((-1.0)*npx*x981))+((cj10*x979))+(((0.325)*cj10))+x982);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<ikfast_right_leg::IkReal> x984 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*npy)),ikfast_right_leg::IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
ikfast_right_leg::IkReal x983=x984.value;
j11array[0]=((-1.0)*x983);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x983)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
ikfast_right_leg::IkReal j10eval[3];
ikfast_right_leg::IkReal x985=((950.0)*cj9);
ikfast_right_leg::IkReal x986=(npy*sj11);
ikfast_right_leg::IkReal x987=((950.0)*sj9);
ikfast_right_leg::IkReal x988=(cj11*npx);
j10eval[0]=((1.01224696356275)+cj9);
j10eval[1]=IKsign(((625.0625)+(((617.5)*cj9))));
j10eval[2]=((IKabs((((npz*x985))+((x986*x987))+(((812.5)*npz))+(((-1.0)*x987*x988)))))+(IKabs((((npz*x987))+(((812.5)*x988))+(((-812.5)*x986))+((x985*x988))+(((-1.0)*x985*x986))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j10eval[3];
ikfast_right_leg::IkReal x989=(npy*sj11);
ikfast_right_leg::IkReal x990=((19.0)*cj9);
ikfast_right_leg::IkReal x991=(cj11*npx);
ikfast_right_leg::IkReal x992=((50.0)*npz);
ikfast_right_leg::IkReal x993=((1.16923076923077)*cj9);
ikfast_right_leg::IkReal x994=(npz*sj9);
j10eval[0]=((((-1.0)*x991))+((x989*x993))+(((-1.0)*x991*x993))+(((1.16923076923077)*x994))+x989);
j10eval[1]=IKsign((((x989*x990))+(((16.25)*x989))+(((-1.0)*x990*x991))+(((19.0)*x994))+(((-16.25)*x991))));
j10eval[2]=((IKabs(((((7.22)*cj9*sj9))+((x989*x992))+(((6.175)*sj9))+(((-1.0)*x991*x992)))))+(IKabs(((-5.28125)+(((-12.35)*cj9))+((npz*x992))+(((-7.22)*(cj9*cj9)))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j10eval[3];
ikfast_right_leg::IkReal x995=npy*npy;
ikfast_right_leg::IkReal x996=cj11*cj11;
ikfast_right_leg::IkReal x997=npz*npz;
ikfast_right_leg::IkReal x998=npx*npx;
ikfast_right_leg::IkReal x999=(npy*sj11);
ikfast_right_leg::IkReal x1000=((19.0)*cj9);
ikfast_right_leg::IkReal x1001=(cj11*npx);
ikfast_right_leg::IkReal x1002=((19.0)*sj9);
ikfast_right_leg::IkReal x1003=((50.0)*x995);
ikfast_right_leg::IkReal x1004=(x996*x998);
j10eval[0]=((((-1.0)*x997))+(((-1.0)*x995))+(((-1.0)*x1004))+(((2.0)*x1001*x999))+((x995*x996)));
j10eval[1]=IKsign(((((-1.0)*x1003))+((x1003*x996))+(((-50.0)*x997))+(((-50.0)*x1004))+(((100.0)*x1001*x999))));
j10eval[2]=((IKabs(((((-16.25)*npz))+(((-1.0)*x1002*x999))+(((-1.0)*npz*x1000))+((x1001*x1002)))))+(IKabs(((((-16.25)*x1001))+((x1000*x999))+(((-1.0)*npz*x1002))+(((16.25)*x999))+(((-1.0)*x1000*x1001))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
ikfast_right_leg::IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
ikfast_right_leg::IkReal x1005=npy*npy;
ikfast_right_leg::IkReal x1006=cj11*cj11;
ikfast_right_leg::IkReal x1007=(npy*sj11);
ikfast_right_leg::IkReal x1008=((19.0)*cj9);
ikfast_right_leg::IkReal x1009=(cj11*npx);
ikfast_right_leg::IkReal x1010=((19.0)*sj9);
ikfast_right_leg::IkReal x1011=((50.0)*x1005);
CheckValue<ikfast_right_leg::IkReal> x1012=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1011))+(((100.0)*x1007*x1009))+((x1006*x1011))+(((-50.0)*(npz*npz)))+(((-50.0)*x1006*(npx*npx))))),-1);
if(!x1012.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x1013 = IKatan2WithCheck(ikfast_right_leg::IkReal(((((-16.25)*npz))+((x1009*x1010))+(((-1.0)*npz*x1008))+(((-1.0)*x1007*x1010)))),ikfast_right_leg::IkReal(((((-16.25)*x1009))+(((-1.0)*x1008*x1009))+(((16.25)*x1007))+((x1007*x1008))+(((-1.0)*npz*x1010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1012.value)))+(x1013.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x1014=IKsin(j10);
ikfast_right_leg::IkReal x1015=IKcos(j10);
ikfast_right_leg::IkReal x1016=(npy*sj11);
ikfast_right_leg::IkReal x1017=((1.0)*npz);
ikfast_right_leg::IkReal x1018=((0.38)*sj9);
ikfast_right_leg::IkReal x1019=((0.38)*cj9);
ikfast_right_leg::IkReal x1020=(cj11*npx);
ikfast_right_leg::IkReal x1021=((1.0)*x1014);
evalcond[0]=(((x1014*x1019))+(((-1.0)*x1017))+(((0.325)*x1014))+((x1015*x1018)));
evalcond[1]=(x1018+((x1014*x1020))+(((-1.0)*x1015*x1017))+(((-1.0)*x1016*x1021)));
evalcond[2]=((0.325)+x1019+(((-1.0)*x1014*x1017))+(((-1.0)*x1015*x1020))+((x1015*x1016)));
evalcond[3]=(x1016+(((-1.0)*x1014*x1018))+(((-1.0)*x1020))+(((0.325)*x1015))+((x1015*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
ikfast_right_leg::IkReal x1022=(npy*sj11);
ikfast_right_leg::IkReal x1023=((19.0)*cj9);
ikfast_right_leg::IkReal x1024=(cj11*npx);
ikfast_right_leg::IkReal x1025=((50.0)*npz);
CheckValue<ikfast_right_leg::IkReal> x1026=IKPowWithIntegerCheck(IKsign(((((16.25)*x1022))+(((-1.0)*x1023*x1024))+((x1022*x1023))+(((-16.25)*x1024))+(((19.0)*npz*sj9)))),-1);
if(!x1026.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x1027 = IKatan2WithCheck(ikfast_right_leg::IkReal(((((7.22)*cj9*sj9))+(((6.175)*sj9))+((x1022*x1025))+(((-1.0)*x1024*x1025)))),ikfast_right_leg::IkReal(((-5.28125)+(((-12.35)*cj9))+(((-7.22)*(cj9*cj9)))+((npz*x1025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x1028=IKsin(j10);
ikfast_right_leg::IkReal x1029=IKcos(j10);
ikfast_right_leg::IkReal x1030=(npy*sj11);
ikfast_right_leg::IkReal x1031=((1.0)*npz);
ikfast_right_leg::IkReal x1032=((0.38)*sj9);
ikfast_right_leg::IkReal x1033=((0.38)*cj9);
ikfast_right_leg::IkReal x1034=(cj11*npx);
ikfast_right_leg::IkReal x1035=((1.0)*x1028);
evalcond[0]=((((-1.0)*x1031))+(((0.325)*x1028))+((x1028*x1033))+((x1029*x1032)));
evalcond[1]=(x1032+(((-1.0)*x1029*x1031))+((x1028*x1034))+(((-1.0)*x1030*x1035)));
evalcond[2]=((0.325)+(((-1.0)*x1029*x1034))+(((-1.0)*x1028*x1031))+x1033+((x1029*x1030)));
evalcond[3]=((((-1.0)*x1028*x1032))+x1030+(((-1.0)*x1034))+(((0.325)*x1029))+((x1029*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
ikfast_right_leg::IkReal x1036=((950.0)*cj9);
ikfast_right_leg::IkReal x1037=(npy*sj11);
ikfast_right_leg::IkReal x1038=((950.0)*sj9);
ikfast_right_leg::IkReal x1039=(cj11*npx);
CheckValue<ikfast_right_leg::IkReal> x1040=IKPowWithIntegerCheck(IKsign(((625.0625)+(((617.5)*cj9)))),-1);
if(!x1040.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x1041 = IKatan2WithCheck(ikfast_right_leg::IkReal(((((-1.0)*x1038*x1039))+(((812.5)*npz))+((npz*x1036))+((x1037*x1038)))),ikfast_right_leg::IkReal((((x1036*x1039))+(((812.5)*x1039))+(((-812.5)*x1037))+(((-1.0)*x1036*x1037))+((npz*x1038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1041.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1040.value)))+(x1041.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x1042=IKsin(j10);
ikfast_right_leg::IkReal x1043=IKcos(j10);
ikfast_right_leg::IkReal x1044=(npy*sj11);
ikfast_right_leg::IkReal x1045=((1.0)*npz);
ikfast_right_leg::IkReal x1046=((0.38)*sj9);
ikfast_right_leg::IkReal x1047=((0.38)*cj9);
ikfast_right_leg::IkReal x1048=(cj11*npx);
ikfast_right_leg::IkReal x1049=((1.0)*x1042);
evalcond[0]=(((x1042*x1047))+((x1043*x1046))+(((0.325)*x1042))+(((-1.0)*x1045)));
evalcond[1]=(x1046+((x1042*x1048))+(((-1.0)*x1044*x1049))+(((-1.0)*x1043*x1045)));
evalcond[2]=((0.325)+x1047+((x1043*x1044))+(((-1.0)*x1043*x1048))+(((-1.0)*x1042*x1045)));
evalcond[3]=(x1044+((x1043*x1047))+(((-1.0)*x1042*x1046))+(((-1.0)*x1048))+(((0.325)*x1043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<ikfast_right_leg::IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
ikfast_right_leg::IkReal x73=(cj10*r12);
ikfast_right_leg::IkReal x74=(cj10*r22);
ikfast_right_leg::IkReal x75=((1.0)*sj10);
ikfast_right_leg::IkReal x76=((1.0)*sj9);
ikfast_right_leg::IkReal x77=((1.0)*sj11);
ikfast_right_leg::IkReal x78=((-1.0)*sj10);
ikfast_right_leg::IkReal x79=((((-1.0)*r01*x77))+((cj11*r00)));
ikfast_right_leg::IkReal x80=(((cj11*r10))+(((-1.0)*r11*x77)));
ikfast_right_leg::IkReal x81=(((cj11*r20))+(((-1.0)*r21*x77)));
ikfast_right_leg::IkReal x82=(sj10*x81);
ikfast_right_leg::IkReal x83=(((r02*sj10))+((cj10*x79)));
ikfast_right_leg::IkReal x84=(((cj10*r02))+(((-1.0)*x75*x79)));
ikfast_right_leg::IkReal x85=(((r12*sj10))+((cj10*x80)));
ikfast_right_leg::IkReal x86=(((r22*sj10))+((cj10*x81)));
new_r00=((((-1.0)*x76*x83))+((cj9*x84)));
new_r01=(((sj9*x84))+((cj9*x83)));
new_r02=(((r00*sj11))+((cj11*r01)));
new_r10=(((cj9*((((x78*x80))+x73))))+(((-1.0)*x76*x85)));
new_r11=(((sj9*((x73+(((-1.0)*x75*x80))))))+((cj9*x85)));
new_r12=(((cj11*r11))+((r10*sj11)));
new_r20=((((-1.0)*x76*x86))+((cj9*((x74+(((-1.0)*x75*x81)))))));
new_r21=(((sj9*((((x78*x81))+x74))))+((cj9*x86)));
new_r22=(((r20*sj11))+((cj11*r21)));
{
ikfast_right_leg::IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=new_r22;
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
ikfast_right_leg::IkReal j6eval[3];
j6eval[0]=cj7;
j6eval[1]=IKsign(cj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[2];
j6eval[0]=cj7;
j6eval[1]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
ikfast_right_leg::IkReal j8mul = 1;
j8=0;
j6mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].fmul = j6mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].fmul = j8mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
ikfast_right_leg::IkReal j8mul = 1;
j8=0;
j6mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].fmul = j6mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].fmul = j8mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
ikfast_right_leg::IkReal x87=new_r22*new_r22;
ikfast_right_leg::IkReal x88=((16.0)*new_r10);
ikfast_right_leg::IkReal x89=((16.0)*new_r01);
ikfast_right_leg::IkReal x90=((16.0)*new_r00);
ikfast_right_leg::IkReal x91=(new_r11*new_r22);
ikfast_right_leg::IkReal x92=((8.0)*new_r00);
ikfast_right_leg::IkReal x93=(x87*x88);
ikfast_right_leg::IkReal x94=(x87*x89);
j6eval[0]=((IKabs(((((32.0)*new_r00))+(((-16.0)*x91))+(((-1.0)*x87*x90)))))+(IKabs((((new_r22*x90))+(((16.0)*new_r11))+(((-32.0)*new_r11*x87)))))+(IKabs((((x87*x92))+(((-8.0)*x91)))))+(IKabs((x89+(((-1.0)*x94)))))+(IKabs((x88+(((-1.0)*x93)))))+(IKabs((((new_r22*x92))+(((-8.0)*new_r11)))))+(IKabs((x94+(((-1.0)*x89)))))+(IKabs((x93+(((-1.0)*x88))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j6, j8]

} else
{
ikfast_right_leg::IkReal op[4+1], zeror[4];
int numroots;
ikfast_right_leg::IkReal j6evalpoly[1];
ikfast_right_leg::IkReal x95=new_r22*new_r22;
ikfast_right_leg::IkReal x96=((16.0)*new_r01);
ikfast_right_leg::IkReal x97=(new_r00*new_r22);
ikfast_right_leg::IkReal x98=(x95*x96);
ikfast_right_leg::IkReal x99=((((8.0)*x97))+(((-8.0)*new_r11)));
op[0]=x99;
op[1]=(x98+(((-1.0)*x96)));
op[2]=((((-32.0)*new_r11*x95))+(((16.0)*x97))+(((16.0)*new_r11)));
op[3]=(x96+(((-1.0)*x98)));
op[4]=x99;
polyroots4(op,zeror,numroots);
ikfast_right_leg::IkReal j6array[4], cj6array[4], sj6array[4], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
ikfast_right_leg::IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[4]={true,true,true,true};
_nj6 = 4;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

ikfast_right_leg::IkReal x100=new_r22*new_r22;
ikfast_right_leg::IkReal x101=((16.0)*new_r10);
ikfast_right_leg::IkReal x102=(new_r11*new_r22);
ikfast_right_leg::IkReal x103=((8.0)*x102);
ikfast_right_leg::IkReal x104=(new_r00*x100);
ikfast_right_leg::IkReal x105=((8.0)*x104);
ikfast_right_leg::IkReal x106=(x100*x101);
j6evalpoly[0]=(((htj6*(((((-1.0)*x101))+x106))))+(((-1.0)*x103))+x105+(((htj6*htj6)*(((((32.0)*new_r00))+(((-16.0)*x102))+(((-16.0)*x104))))))+(((htj6*htj6*htj6)*(((((-1.0)*x106))+x101))))+(((htj6*htj6*htj6*htj6)*(((((-1.0)*x103))+x105)))));
if( IKabs(j6evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
ikfast_right_leg::IkReal j8eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
ikfast_right_leg::IkReal x107=new_r22*new_r22;
ikfast_right_leg::IkReal x108=cj6*cj6;
ikfast_right_leg::IkReal x109=(new_r22*sj6);
ikfast_right_leg::IkReal x110=(((x107*x108))+(((-1.0)*x107))+(((-1.0)*x108)));
j8eval[0]=x110;
j8eval[1]=((IKabs(((((-1.0)*cj6*new_r00))+((new_r01*x109)))))+(IKabs((((new_r00*x109))+((cj6*new_r01))))));
j8eval[2]=IKsign(x110);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=new_r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=cj6;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x111=IKsin(j8);
ikfast_right_leg::IkReal x112=IKcos(j8);
evalcond[0]=(x111+new_r11);
evalcond[1]=((-1.0)*x111);
evalcond[2]=((-1.0)*x112);
evalcond[3]=(new_r10+(((-1.0)*x112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x113=IKsin(j8);
ikfast_right_leg::IkReal x114=IKcos(j8);
evalcond[0]=((-1.0)*x113);
evalcond[1]=((-1.0)*x114);
evalcond[2]=(x113+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x115=new_r22*new_r22;
CheckValue<ikfast_right_leg::IkReal> x116=IKPowWithIntegerCheck(((-1.0)+x115),-1);
if(!x116.valid){
continue;
}
if(((x115*(x116.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst6=IKsqrt((x115*(x116.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
ikfast_right_leg::IkReal x117=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
cj6=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst6);
CheckValue<ikfast_right_leg::IkReal> x118=IKPowWithIntegerCheck(((-1.0)+x117),-1);
if(!x118.valid){
continue;
}
if(((x117*(x118.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst6=IKsqrt((x117*(x118.value)));
j8eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<ikfast_right_leg::IkReal> x119=IKPowWithIntegerCheck(gconst6,-1);
if(!x119.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x119.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x119.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x119.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x120=IKsin(j8);
ikfast_right_leg::IkReal x121=IKcos(j8);
ikfast_right_leg::IkReal x122=((1.0)*x121);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x123=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x120);
evalcond[1]=((-1.0)*x121);
evalcond[2]=(((gconst6*x120))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x122))+new_r00);
evalcond[4]=(((x120*x123))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x122*x123)));
evalcond[6]=(((gconst6*new_r01))+x120+((new_r11*x123)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x122))+((new_r10*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x124 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r01)),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x125=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x125.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x124.value)+(((1.5707963267949)*(x125.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x126=IKsin(j8);
ikfast_right_leg::IkReal x127=IKcos(j8);
ikfast_right_leg::IkReal x128=((1.0)*x127);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x129=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
evalcond[0]=((-1.0)*x126);
evalcond[1]=((-1.0)*x127);
evalcond[2]=(((gconst6*x126))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x128))+new_r00);
evalcond[4]=(((x126*x129))+new_r11);
evalcond[5]=((((-1.0)*x128*x129))+new_r10);
evalcond[6]=(((gconst6*new_r01))+x126+((new_r11*x129)));
evalcond[7]=(((gconst6*new_r00))+(((-1.0)*x128))+((new_r10*x129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x130=new_r22*new_r22;
CheckValue<ikfast_right_leg::IkReal> x131=IKPowWithIntegerCheck(((-1.0)+x130),-1);
if(!x131.valid){
continue;
}
if(((x130*(x131.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst6=IKsqrt((x130*(x131.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
ikfast_right_leg::IkReal x132=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))));
cj6=gconst6;
if( (gconst6) < -1-IKFAST_SINCOS_THRESH || (gconst6) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst6)));
CheckValue<ikfast_right_leg::IkReal> x133=IKPowWithIntegerCheck(((-1.0)+x132),-1);
if(!x133.valid){
continue;
}
if(((x132*(x133.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst6=IKsqrt((x132*(x133.value)));
j8eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
CheckValue<ikfast_right_leg::IkReal> x134=IKPowWithIntegerCheck(gconst6,-1);
if(!x134.valid){
continue;
}
if( IKabs(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x134.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))))+IKsqr((new_r00*(x134.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst6*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6))))))))), (new_r00*(x134.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x135=IKsin(j8);
ikfast_right_leg::IkReal x136=IKcos(j8);
ikfast_right_leg::IkReal x137=((1.0)*x136);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x138=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
ikfast_right_leg::IkReal x139=((1.0)*x138);
evalcond[0]=((-1.0)*x135);
evalcond[1]=((-1.0)*x136);
evalcond[2]=(((gconst6*x135))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x137))+new_r00);
evalcond[4]=(((x136*x138))+new_r10);
evalcond[5]=((((-1.0)*x135*x139))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x139))+((gconst6*new_r01))+x135);
evalcond[7]=((((-1.0)*new_r10*x139))+((gconst6*new_r00))+(((-1.0)*x137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x140 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r01)),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x141=IKPowWithIntegerCheck(IKsign(gconst6),-1);
if(!x141.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x140.value)+(((1.5707963267949)*(x141.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x142=IKsin(j8);
ikfast_right_leg::IkReal x143=IKcos(j8);
ikfast_right_leg::IkReal x144=((1.0)*x143);
if((((1.0)+(((-1.0)*(gconst6*gconst6))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x145=IKsqrt(((1.0)+(((-1.0)*(gconst6*gconst6)))));
ikfast_right_leg::IkReal x146=((1.0)*x145);
evalcond[0]=((-1.0)*x142);
evalcond[1]=((-1.0)*x143);
evalcond[2]=(((gconst6*x142))+new_r01);
evalcond[3]=((((-1.0)*gconst6*x144))+new_r00);
evalcond[4]=(new_r10+((x143*x145)));
evalcond[5]=((((-1.0)*x142*x146))+new_r11);
evalcond[6]=(((gconst6*new_r01))+(((-1.0)*new_r11*x146))+x142);
evalcond[7]=((((-1.0)*x144))+((gconst6*new_r00))+(((-1.0)*new_r10*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x147=new_r22*new_r22;
CheckValue<ikfast_right_leg::IkReal> x148=IKPowWithIntegerCheck(((-1.0)+x147),-1);
if(!x148.valid){
continue;
}
if(((x147*(x148.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst7=((-1.0)*(IKsqrt((x147*(x148.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst7)))))+(IKabs(((-1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
ikfast_right_leg::IkReal x149=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
cj6=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst7);
CheckValue<ikfast_right_leg::IkReal> x150=IKPowWithIntegerCheck(((-1.0)+x149),-1);
if(!x150.valid){
continue;
}
if(((x149*(x150.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst7=((-1.0)*(IKsqrt((x149*(x150.value)))));
j8eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<ikfast_right_leg::IkReal> x151=IKPowWithIntegerCheck(gconst7,-1);
if(!x151.valid){
continue;
}
if( IKabs(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x151.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))))+IKsqr((new_r00*(x151.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*gconst7*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))), (new_r00*(x151.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x152=IKsin(j8);
ikfast_right_leg::IkReal x153=IKcos(j8);
ikfast_right_leg::IkReal x154=((1.0)*x153);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x155=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x152);
evalcond[1]=((-1.0)*x153);
evalcond[2]=(new_r01+((gconst7*x152)));
evalcond[3]=((((-1.0)*gconst7*x154))+new_r00);
evalcond[4]=(((x152*x155))+new_r11);
evalcond[5]=((((-1.0)*x154*x155))+new_r10);
evalcond[6]=(((new_r11*x155))+x152+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x154))+((new_r10*x155))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x156 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r01)),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x157=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x157.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x156.value)+(((1.5707963267949)*(x157.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x158=IKsin(j8);
ikfast_right_leg::IkReal x159=IKcos(j8);
ikfast_right_leg::IkReal x160=((1.0)*x159);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x161=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
evalcond[0]=((-1.0)*x158);
evalcond[1]=((-1.0)*x159);
evalcond[2]=(new_r01+((gconst7*x158)));
evalcond[3]=((((-1.0)*gconst7*x160))+new_r00);
evalcond[4]=(new_r11+((x158*x161)));
evalcond[5]=((((-1.0)*x160*x161))+new_r10);
evalcond[6]=(((new_r11*x161))+x158+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x160))+((new_r10*x161))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x162=new_r22*new_r22;
CheckValue<ikfast_right_leg::IkReal> x163=IKPowWithIntegerCheck(((-1.0)+x162),-1);
if(!x163.valid){
continue;
}
if(((x162*(x163.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst7=((-1.0)*(IKsqrt((x162*(x163.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst7)))))+(IKabs(((1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
ikfast_right_leg::IkReal x164=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))))));
cj6=gconst7;
if( (gconst7) < -1-IKFAST_SINCOS_THRESH || (gconst7) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst7)));
CheckValue<ikfast_right_leg::IkReal> x165=IKPowWithIntegerCheck(((-1.0)+x164),-1);
if(!x165.valid){
continue;
}
if(((x164*(x165.value))) < -0.00001)
continue;
ikfast_right_leg::IkReal gconst7=((-1.0)*(IKsqrt((x164*(x165.value)))));
j8eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
CheckValue<ikfast_right_leg::IkReal> x166=IKPowWithIntegerCheck(gconst7,-1);
if(!x166.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))))+IKsqr((new_r00*(x166.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7))))))))+(((-1.0)*gconst7*new_r01))), (new_r00*(x166.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x167=IKsin(j8);
ikfast_right_leg::IkReal x168=IKcos(j8);
ikfast_right_leg::IkReal x169=((1.0)*x168);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x170=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
ikfast_right_leg::IkReal x171=((1.0)*x170);
evalcond[0]=((-1.0)*x167);
evalcond[1]=((-1.0)*x168);
evalcond[2]=(((gconst7*x167))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x169))+new_r00);
evalcond[4]=(((x168*x170))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x167*x171)));
evalcond[6]=((((-1.0)*new_r11*x171))+x167+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x169))+(((-1.0)*new_r10*x171))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x172 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r01)),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x173=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x173.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x172.value)+(((1.5707963267949)*(x173.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x174=IKsin(j8);
ikfast_right_leg::IkReal x175=IKcos(j8);
ikfast_right_leg::IkReal x176=((1.0)*x175);
if((((1.0)+(((-1.0)*(gconst7*gconst7))))) < -0.00001)
continue;
ikfast_right_leg::IkReal x177=IKsqrt(((1.0)+(((-1.0)*(gconst7*gconst7)))));
ikfast_right_leg::IkReal x178=((1.0)*x177);
evalcond[0]=((-1.0)*x174);
evalcond[1]=((-1.0)*x175);
evalcond[2]=(((gconst7*x174))+new_r01);
evalcond[3]=((((-1.0)*gconst7*x176))+new_r00);
evalcond[4]=(((x175*x177))+new_r10);
evalcond[5]=((((-1.0)*x174*x178))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x178))+x174+((gconst7*new_r01)));
evalcond[7]=((((-1.0)*x176))+(((-1.0)*new_r10*x178))+((gconst7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x179=(new_r11*new_r22);
ikfast_right_leg::IkReal x180=((1.0)*cj6*new_r01);
CheckValue<ikfast_right_leg::IkReal> x181=IKPowWithIntegerCheck(cj6,-1);
if(!x181.valid){
continue;
}
if( IKabs(((((-1.0)*x180))+(((-1.0)*new_r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x181.value)*(((((-1.0)*new_r22*sj6*x180))+(((-1.0)*x179))+new_r00+((x179*(cj6*cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x180))+(((-1.0)*new_r11*sj6))))+IKsqr(((x181.value)*(((((-1.0)*new_r22*sj6*x180))+(((-1.0)*x179))+new_r00+((x179*(cj6*cj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x180))+(((-1.0)*new_r11*sj6))), ((x181.value)*(((((-1.0)*new_r22*sj6*x180))+(((-1.0)*x179))+new_r00+((x179*(cj6*cj6)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[10];
ikfast_right_leg::IkReal x182=IKcos(j8);
ikfast_right_leg::IkReal x183=IKsin(j8);
ikfast_right_leg::IkReal x184=(cj6*new_r10);
ikfast_right_leg::IkReal x185=((1.0)*cj6);
ikfast_right_leg::IkReal x186=(new_r22*sj6);
ikfast_right_leg::IkReal x187=((1.0)*new_r01);
ikfast_right_leg::IkReal x188=(cj6*new_r22);
ikfast_right_leg::IkReal x189=((1.0)*sj6);
ikfast_right_leg::IkReal x190=((1.0)*x182);
ikfast_right_leg::IkReal x191=(new_r22*x182);
ikfast_right_leg::IkReal x192=((1.0)*x183);
evalcond[0]=(((new_r11*sj6))+x183+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x190))+((cj6*new_r00)));
evalcond[2]=(((cj6*x183))+new_r01+((x182*x186)));
evalcond[3]=(new_r00+((x183*x186))+(((-1.0)*x182*x185)));
evalcond[4]=(((sj6*x183))+(((-1.0)*x185*x191))+new_r11);
evalcond[5]=((((-1.0)*new_r22*x192))+x184+(((-1.0)*new_r00*x189)));
evalcond[6]=((((-1.0)*new_r22*x190))+((cj6*new_r11))+(((-1.0)*sj6*x187)));
evalcond[7]=((((-1.0)*new_r22*x183*x185))+new_r10+(((-1.0)*x182*x189)));
evalcond[8]=((((-1.0)*x192))+((new_r22*x184))+(((-1.0)*new_r00*x186)));
evalcond[9]=(((new_r11*x188))+(((-1.0)*x186*x187))+(((-1.0)*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x193=((1.0)*sj6);
CheckValue<ikfast_right_leg::IkReal> x194=IKPowWithIntegerCheck(new_r22,-1);
if(!x194.valid){
continue;
}
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x194.value)*((((cj6*new_r11))+(((-1.0)*new_r01*x193)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x193))))+IKsqr(((x194.value)*((((cj6*new_r11))+(((-1.0)*new_r01*x193))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x193))), ((x194.value)*((((cj6*new_r11))+(((-1.0)*new_r01*x193))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[10];
ikfast_right_leg::IkReal x195=IKcos(j8);
ikfast_right_leg::IkReal x196=IKsin(j8);
ikfast_right_leg::IkReal x197=(cj6*new_r10);
ikfast_right_leg::IkReal x198=((1.0)*cj6);
ikfast_right_leg::IkReal x199=(new_r22*sj6);
ikfast_right_leg::IkReal x200=((1.0)*new_r01);
ikfast_right_leg::IkReal x201=(cj6*new_r22);
ikfast_right_leg::IkReal x202=((1.0)*sj6);
ikfast_right_leg::IkReal x203=((1.0)*x195);
ikfast_right_leg::IkReal x204=(new_r22*x195);
ikfast_right_leg::IkReal x205=((1.0)*x196);
evalcond[0]=(((new_r11*sj6))+x196+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x203))+((cj6*new_r00)));
evalcond[2]=(((cj6*x196))+((x195*x199))+new_r01);
evalcond[3]=((((-1.0)*x195*x198))+((x196*x199))+new_r00);
evalcond[4]=((((-1.0)*x198*x204))+((sj6*x196))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x202))+(((-1.0)*new_r22*x205))+x197);
evalcond[6]=((((-1.0)*new_r22*x203))+((cj6*new_r11))+(((-1.0)*sj6*x200)));
evalcond[7]=((((-1.0)*x195*x202))+(((-1.0)*new_r22*x196*x198))+new_r10);
evalcond[8]=((((-1.0)*x205))+((new_r22*x197))+(((-1.0)*new_r00*x199)));
evalcond[9]=(((new_r11*x201))+(((-1.0)*x203))+(((-1.0)*x199*x200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x206=new_r22*new_r22;
ikfast_right_leg::IkReal x207=cj6*cj6;
ikfast_right_leg::IkReal x208=(new_r22*sj6);
CheckValue<ikfast_right_leg::IkReal> x209 = IKatan2WithCheck(ikfast_right_leg::IkReal((((new_r00*x208))+((cj6*new_r01)))),ikfast_right_leg::IkReal(((((-1.0)*cj6*new_r00))+((new_r01*x208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x209.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x210=IKPowWithIntegerCheck(IKsign(((((-1.0)*x207))+(((-1.0)*x206))+((x206*x207)))),-1);
if(!x210.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x209.value)+(((1.5707963267949)*(x210.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[10];
ikfast_right_leg::IkReal x211=IKcos(j8);
ikfast_right_leg::IkReal x212=IKsin(j8);
ikfast_right_leg::IkReal x213=(cj6*new_r10);
ikfast_right_leg::IkReal x214=((1.0)*cj6);
ikfast_right_leg::IkReal x215=(new_r22*sj6);
ikfast_right_leg::IkReal x216=((1.0)*new_r01);
ikfast_right_leg::IkReal x217=(cj6*new_r22);
ikfast_right_leg::IkReal x218=((1.0)*sj6);
ikfast_right_leg::IkReal x219=((1.0)*x211);
ikfast_right_leg::IkReal x220=(new_r22*x211);
ikfast_right_leg::IkReal x221=((1.0)*x212);
evalcond[0]=(((new_r11*sj6))+x212+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x219)));
evalcond[2]=(((x211*x215))+((cj6*x212))+new_r01);
evalcond[3]=(((x212*x215))+(((-1.0)*x211*x214))+new_r00);
evalcond[4]=((((-1.0)*x214*x220))+((sj6*x212))+new_r11);
evalcond[5]=(x213+(((-1.0)*new_r22*x221))+(((-1.0)*new_r00*x218)));
evalcond[6]=((((-1.0)*sj6*x216))+((cj6*new_r11))+(((-1.0)*new_r22*x219)));
evalcond[7]=((((-1.0)*new_r22*x212*x214))+(((-1.0)*x211*x218))+new_r10);
evalcond[8]=(((new_r22*x213))+(((-1.0)*new_r00*x215))+(((-1.0)*x221)));
evalcond[9]=((((-1.0)*x219))+((new_r11*x217))+(((-1.0)*x215*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x223=IKPowWithIntegerCheck(cj7,-1);
if(!x223.valid){
continue;
}
ikfast_right_leg::IkReal x222=x223.value;
CheckValue<ikfast_right_leg::IkReal> x224=IKPowWithIntegerCheck(new_r12,-1);
if(!x224.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x225=IKPowWithIntegerCheck(x222,-2);
if(!x225.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x222)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x222*(x224.value)*(((((-1.0)*(new_r02*new_r02)))+(x225.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x222))+IKsqr((x222*(x224.value)*(((((-1.0)*(new_r02*new_r02)))+(x225.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r02*x222), (x222*(x224.value)*(((((-1.0)*(new_r02*new_r02)))+(x225.value)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x226=IKcos(j6);
ikfast_right_leg::IkReal x227=IKsin(j6);
ikfast_right_leg::IkReal x228=((1.0)*cj7);
ikfast_right_leg::IkReal x229=(new_r02*x227);
ikfast_right_leg::IkReal x230=(cj7*x226);
ikfast_right_leg::IkReal x231=(new_r12*x226);
evalcond[0]=(((cj7*x227))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x226*x228)));
evalcond[2]=(((new_r02*x226))+((new_r12*x227)));
evalcond[3]=(x231+(((-1.0)*x228))+(((-1.0)*x229)));
evalcond[4]=(((new_r10*x230))+((new_r20*sj7))+(((-1.0)*new_r00*x227*x228)));
evalcond[5]=((((-1.0)*new_r01*x227*x228))+((new_r11*x230))+((new_r21*sj7)));
evalcond[6]=((((-1.0)*new_r22*x228))+(((-1.0)*sj7*x229))+((sj7*x231)));
evalcond[7]=((-1.0)+((new_r12*x230))+(((-1.0)*x228*x229))+((new_r22*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_right_leg::IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[2];
j8eval[0]=cj6;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=sj6;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x232=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*new_r00))+(((-1.0)*new_r01*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x232))))+IKsqr((((cj6*new_r00))+(((-1.0)*new_r01*x232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x232))), (((cj6*new_r00))+(((-1.0)*new_r01*x232))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x233=IKsin(j8);
ikfast_right_leg::IkReal x234=IKcos(j8);
ikfast_right_leg::IkReal x235=((1.0)*sj6);
ikfast_right_leg::IkReal x236=(sj6*x233);
ikfast_right_leg::IkReal x237=((1.0)*x234);
ikfast_right_leg::IkReal x238=((1.0)*x233);
ikfast_right_leg::IkReal x239=(cj6*x237);
evalcond[0]=(((new_r11*sj6))+x233+((cj6*new_r01)));
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x237))+((cj6*new_r00)));
evalcond[2]=(((cj6*x233))+new_r01+((sj6*x234)));
evalcond[3]=((((-1.0)*x239))+x236+new_r00);
evalcond[4]=((((-1.0)*x239))+x236+new_r11);
evalcond[5]=(((cj6*new_r10))+(((-1.0)*x238))+(((-1.0)*new_r00*x235)));
evalcond[6]=(((cj6*new_r11))+(((-1.0)*x237))+(((-1.0)*new_r01*x235)));
evalcond[7]=((((-1.0)*cj6*x238))+new_r10+(((-1.0)*x234*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x240=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj6))+(((-1.0)*cj6*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x240))))+IKsqr((((new_r01*sj6))+(((-1.0)*cj6*x240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x240))), (((new_r01*sj6))+(((-1.0)*cj6*x240))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x241=IKsin(j8);
ikfast_right_leg::IkReal x242=IKcos(j8);
ikfast_right_leg::IkReal x243=((1.0)*sj6);
ikfast_right_leg::IkReal x244=(cj6*x241);
ikfast_right_leg::IkReal x245=(cj6*x242);
ikfast_right_leg::IkReal x246=(x242*x243);
evalcond[0]=(((new_r11*sj6))+x241+((cj6*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x243))+((cj6*new_r10))+x241);
evalcond[2]=((((-1.0)*new_r01*x243))+((cj6*new_r11))+x242);
evalcond[3]=((((-1.0)*x242))+((new_r10*sj6))+((cj6*new_r00)));
evalcond[4]=(x245+((sj6*x241))+new_r11);
evalcond[5]=(x244+(((-1.0)*x246))+new_r01);
evalcond[6]=(x244+(((-1.0)*x246))+new_r10);
evalcond[7]=((((-1.0)*x245))+(((-1.0)*x241*x243))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x247=IKsin(j8);
ikfast_right_leg::IkReal x248=IKcos(j8);
ikfast_right_leg::IkReal x249=((1.0)*cj7);
ikfast_right_leg::IkReal x250=((1.0)*x248);
ikfast_right_leg::IkReal x251=((1.0)*x247);
evalcond[0]=(x247+new_r01);
evalcond[1]=(((cj7*x247))+new_r20);
evalcond[2]=(((cj7*x248))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x250)));
evalcond[4]=((((-1.0)*sj7*x250))+new_r11);
evalcond[5]=((((-1.0)*sj7*x251))+new_r10);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*new_r20*x249))+(((-1.0)*x251)));
evalcond[7]=(((new_r11*sj7))+(((-1.0)*new_r21*x249))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x252=IKsin(j8);
ikfast_right_leg::IkReal x253=IKcos(j8);
evalcond[0]=(x252+new_r20);
evalcond[1]=(x253+new_r21);
evalcond[2]=(x252+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x254=IKsin(j8);
ikfast_right_leg::IkReal x255=((1.0)*(IKcos(j8)));
evalcond[0]=(new_r20+(((-1.0)*x254)));
evalcond[1]=(new_r21+(((-1.0)*x255)));
evalcond[2]=(x254+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x256=IKcos(j8);
ikfast_right_leg::IkReal x257=IKsin(j8);
evalcond[0]=(x256+new_r11);
evalcond[1]=(x257+(((-1.0)*new_r01)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x256)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x258=IKsin(j8);
ikfast_right_leg::IkReal x259=((1.0)*(IKcos(j8)));
evalcond[0]=(x258+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+(((-1.0)*x259)));
evalcond[2]=(x258+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x260=IKcos(j8);
ikfast_right_leg::IkReal x261=IKsin(j8);
ikfast_right_leg::IkReal x262=((-1.0)*x261);
evalcond[0]=(new_r22*x260);
evalcond[1]=x262;
evalcond[2]=((-1.0)*x260);
evalcond[3]=(new_r22*x262);
evalcond[4]=(x261+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x260))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x263=IKPowWithIntegerCheck(sj7,-1);
if(!x263.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x263.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x263.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x263.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x264=IKsin(j8);
ikfast_right_leg::IkReal x265=IKcos(j8);
ikfast_right_leg::IkReal x266=((1.0)*cj7);
ikfast_right_leg::IkReal x267=((1.0)*sj7);
ikfast_right_leg::IkReal x268=((1.0)*x265);
ikfast_right_leg::IkReal x269=((1.0)*x264);
evalcond[0]=(((cj7*x264))+new_r20);
evalcond[1]=(((cj7*x265))+new_r21);
evalcond[2]=(x264+(((-1.0)*new_r01)));
evalcond[3]=(((sj7*x265))+new_r11);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x268)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x264*x267)));
evalcond[6]=((((-1.0)*new_r10*x267))+(((-1.0)*new_r20*x266))+(((-1.0)*x269)));
evalcond[7]=((((-1.0)*new_r21*x266))+(((-1.0)*new_r11*x267))+(((-1.0)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x270=IKPowWithIntegerCheck(cj7,-1);
if(!x270.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x270.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x270.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x270.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x271=IKsin(j8);
ikfast_right_leg::IkReal x272=IKcos(j8);
ikfast_right_leg::IkReal x273=((1.0)*cj7);
ikfast_right_leg::IkReal x274=((1.0)*sj7);
ikfast_right_leg::IkReal x275=((1.0)*x272);
ikfast_right_leg::IkReal x276=((1.0)*x271);
evalcond[0]=(((cj7*x271))+new_r20);
evalcond[1]=(((cj7*x272))+new_r21);
evalcond[2]=(x271+(((-1.0)*new_r01)));
evalcond[3]=(((sj7*x272))+new_r11);
evalcond[4]=((((-1.0)*x275))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x271*x274))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x273))+(((-1.0)*new_r10*x274))+(((-1.0)*x276)));
evalcond[7]=((((-1.0)*new_r21*x273))+(((-1.0)*new_r11*x274))+(((-1.0)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x277=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x277.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x278 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x278.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x277.value)))+(x278.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x279=IKsin(j8);
ikfast_right_leg::IkReal x280=IKcos(j8);
ikfast_right_leg::IkReal x281=((1.0)*cj7);
ikfast_right_leg::IkReal x282=((1.0)*sj7);
ikfast_right_leg::IkReal x283=((1.0)*x280);
ikfast_right_leg::IkReal x284=((1.0)*x279);
evalcond[0]=(((cj7*x279))+new_r20);
evalcond[1]=(((cj7*x280))+new_r21);
evalcond[2]=(x279+(((-1.0)*new_r01)));
evalcond[3]=(((sj7*x280))+new_r11);
evalcond[4]=((((-1.0)*x283))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x279*x282)));
evalcond[6]=((((-1.0)*new_r10*x282))+(((-1.0)*x284))+(((-1.0)*new_r20*x281)));
evalcond[7]=((((-1.0)*new_r11*x282))+(((-1.0)*x283))+(((-1.0)*new_r21*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x285=IKsin(j8);
ikfast_right_leg::IkReal x286=IKcos(j8);
ikfast_right_leg::IkReal x287=((1.0)*x286);
evalcond[0]=(x285+new_r20);
evalcond[1]=(x286+new_r21);
evalcond[2]=(((cj6*x285))+new_r01);
evalcond[3]=(((sj6*x285))+new_r11);
evalcond[4]=((((-1.0)*cj6*x287))+new_r00);
evalcond[5]=((((-1.0)*sj6*x287))+new_r10);
evalcond[6]=(((new_r11*sj6))+x285+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x288=IKsin(j8);
ikfast_right_leg::IkReal x289=IKcos(j8);
ikfast_right_leg::IkReal x290=((1.0)*x289);
evalcond[0]=((((-1.0)*x288))+new_r20);
evalcond[1]=((((-1.0)*x290))+new_r21);
evalcond[2]=(((cj6*x288))+new_r01);
evalcond[3]=(((sj6*x288))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj6*x290)));
evalcond[5]=((((-1.0)*sj6*x290))+new_r10);
evalcond[6]=(((new_r11*sj6))+x288+((cj6*new_r01)));
evalcond[7]=(((new_r10*sj6))+(((-1.0)*x290))+((cj6*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x291=IKsin(j8);
ikfast_right_leg::IkReal x292=IKcos(j8);
ikfast_right_leg::IkReal x293=((1.0)*cj7);
ikfast_right_leg::IkReal x294=((1.0)*sj7);
ikfast_right_leg::IkReal x295=((1.0)*x292);
evalcond[0]=(x291+new_r11);
evalcond[1]=(((cj7*x291))+new_r20);
evalcond[2]=(((cj7*x292))+new_r21);
evalcond[3]=((((-1.0)*x295))+new_r10);
evalcond[4]=(new_r01+((sj7*x292)));
evalcond[5]=(new_r00+((sj7*x291)));
evalcond[6]=((((-1.0)*x291))+(((-1.0)*new_r20*x293))+(((-1.0)*new_r00*x294)));
evalcond[7]=((((-1.0)*new_r01*x294))+(((-1.0)*new_r21*x293))+(((-1.0)*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x296=IKsin(j8);
ikfast_right_leg::IkReal x297=((1.0)*(IKcos(j8)));
evalcond[0]=(x296+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x297))+new_r01);
evalcond[2]=((((-1.0)*x296))+new_r00);
evalcond[3]=((((-1.0)*x297))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x298=IKsin(j8);
ikfast_right_leg::IkReal x299=IKcos(j8);
evalcond[0]=(x299+new_r01);
evalcond[1]=(x298+new_r00);
evalcond[2]=(x298+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x299))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x300=IKsin(j8);
ikfast_right_leg::IkReal x301=IKcos(j8);
evalcond[0]=(x300+new_r20);
evalcond[1]=(x301+new_r21);
evalcond[2]=(x300+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x301))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x302=IKsin(j8);
ikfast_right_leg::IkReal x303=((1.0)*(IKcos(j8)));
evalcond[0]=((((-1.0)*x302))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x303)));
evalcond[2]=(x302+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x304=IKcos(j8);
ikfast_right_leg::IkReal x305=IKsin(j8);
ikfast_right_leg::IkReal x306=((-1.0)*x304);
ikfast_right_leg::IkReal x307=((-1.0)*x305);
evalcond[0]=x307;
evalcond[1]=x306;
evalcond[2]=(new_r22*x306);
evalcond[3]=(new_r22*x307);
evalcond[4]=(x305+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x304))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x308=IKPowWithIntegerCheck(cj7,-1);
if(!x308.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x309=IKPowWithIntegerCheck(sj7,-1);
if(!x309.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x308.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x309.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x308.value)))+IKsqr((new_r01*(x309.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20*(x308.value)), (new_r01*(x309.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x310=IKsin(j8);
ikfast_right_leg::IkReal x311=IKcos(j8);
ikfast_right_leg::IkReal x312=((1.0)*cj7);
ikfast_right_leg::IkReal x313=((1.0)*x311);
ikfast_right_leg::IkReal x314=((1.0)*x310);
evalcond[0]=(new_r20+((cj7*x310)));
evalcond[1]=(new_r21+((cj7*x311)));
evalcond[2]=(x310+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj7*x313))+new_r01);
evalcond[4]=((((-1.0)*sj7*x314))+new_r00);
evalcond[5]=((((-1.0)*x313))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x312))+((new_r00*sj7))+(((-1.0)*x314)));
evalcond[7]=((((-1.0)*new_r21*x312))+((new_r01*sj7))+(((-1.0)*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x315=IKPowWithIntegerCheck(cj7,-1);
if(!x315.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x315.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x315.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x315.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x316=IKsin(j8);
ikfast_right_leg::IkReal x317=IKcos(j8);
ikfast_right_leg::IkReal x318=((1.0)*cj7);
ikfast_right_leg::IkReal x319=((1.0)*x317);
ikfast_right_leg::IkReal x320=((1.0)*x316);
evalcond[0]=(new_r20+((cj7*x316)));
evalcond[1]=(new_r21+((cj7*x317)));
evalcond[2]=(x316+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj7*x319))+new_r01);
evalcond[4]=((((-1.0)*sj7*x320))+new_r00);
evalcond[5]=((((-1.0)*x319))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x318))+(((-1.0)*x320))+((new_r00*sj7)));
evalcond[7]=((((-1.0)*new_r21*x318))+((new_r01*sj7))+(((-1.0)*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x321=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x321.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x322 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x322.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x321.value)))+(x322.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x323=IKsin(j8);
ikfast_right_leg::IkReal x324=IKcos(j8);
ikfast_right_leg::IkReal x325=((1.0)*cj7);
ikfast_right_leg::IkReal x326=((1.0)*x324);
ikfast_right_leg::IkReal x327=((1.0)*x323);
evalcond[0]=(((cj7*x323))+new_r20);
evalcond[1]=(((cj7*x324))+new_r21);
evalcond[2]=(x323+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj7*x326))+new_r01);
evalcond[4]=((((-1.0)*sj7*x327))+new_r00);
evalcond[5]=((((-1.0)*x326))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x327))+((new_r00*sj7))+(((-1.0)*new_r20*x325)));
evalcond[7]=(((new_r01*sj7))+(((-1.0)*x326))+(((-1.0)*new_r21*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=IKabs(new_r22);
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
ikfast_right_leg::IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
ikfast_right_leg::IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
ikfast_right_leg::IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x329=IKPowWithIntegerCheck(cj7,-1);
if(!x329.valid){
continue;
}
ikfast_right_leg::IkReal x328=x329.value;
CheckValue<ikfast_right_leg::IkReal> x330=IKPowWithIntegerCheck(sj6,-1);
if(!x330.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x331=IKPowWithIntegerCheck(sj7,-1);
if(!x331.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x328)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x328*(x330.value)*(x331.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x328))+IKsqr((x328*(x330.value)*(x331.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20*x328), (x328*(x330.value)*(x331.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x332=IKsin(j8);
ikfast_right_leg::IkReal x333=IKcos(j8);
ikfast_right_leg::IkReal x334=(cj6*new_r10);
ikfast_right_leg::IkReal x335=((1.0)*cj7);
ikfast_right_leg::IkReal x336=(cj6*new_r11);
ikfast_right_leg::IkReal x337=((1.0)*sj6);
ikfast_right_leg::IkReal x338=(sj6*sj7);
ikfast_right_leg::IkReal x339=((1.0)*x333);
ikfast_right_leg::IkReal x340=((1.0)*x332);
ikfast_right_leg::IkReal x341=(cj6*x339);
evalcond[0]=(((cj7*x332))+new_r20);
evalcond[1]=(((cj7*x333))+new_r21);
evalcond[2]=(((new_r11*sj6))+x332+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x339)));
evalcond[4]=(((cj6*x332))+((x333*x338))+new_r01);
evalcond[5]=(((x332*x338))+new_r00+(((-1.0)*x341)));
evalcond[6]=(((sj6*x332))+new_r11+(((-1.0)*sj7*x341)));
evalcond[7]=(x334+(((-1.0)*new_r00*x337))+(((-1.0)*sj7*x340)));
evalcond[8]=((((-1.0)*sj7*x339))+x336+(((-1.0)*new_r01*x337)));
evalcond[9]=((((-1.0)*x333*x337))+(((-1.0)*cj6*sj7*x340))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x335))+(((-1.0)*new_r00*sj7*x337))+(((-1.0)*x340))+((sj7*x334)));
evalcond[11]=((((-1.0)*new_r21*x335))+(((-1.0)*x339))+((sj7*x336))+(((-1.0)*new_r01*sj7*x337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x343=IKPowWithIntegerCheck(cj7,-1);
if(!x343.valid){
continue;
}
ikfast_right_leg::IkReal x342=x343.value;
CheckValue<ikfast_right_leg::IkReal> x344=IKPowWithIntegerCheck(cj6,-1);
if(!x344.valid){
continue;
}
if( IKabs((x342*(x344.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x342)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x342*(x344.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7))))))+IKsqr(((-1.0)*new_r21*x342))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x342*(x344.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7))))), ((-1.0)*new_r21*x342));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x345=IKsin(j8);
ikfast_right_leg::IkReal x346=IKcos(j8);
ikfast_right_leg::IkReal x347=(cj6*new_r10);
ikfast_right_leg::IkReal x348=((1.0)*cj7);
ikfast_right_leg::IkReal x349=(cj6*new_r11);
ikfast_right_leg::IkReal x350=((1.0)*sj6);
ikfast_right_leg::IkReal x351=(sj6*sj7);
ikfast_right_leg::IkReal x352=((1.0)*x346);
ikfast_right_leg::IkReal x353=((1.0)*x345);
ikfast_right_leg::IkReal x354=(cj6*x352);
evalcond[0]=(((cj7*x345))+new_r20);
evalcond[1]=(((cj7*x346))+new_r21);
evalcond[2]=(((new_r11*sj6))+x345+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x352))+((cj6*new_r00)));
evalcond[4]=(((cj6*x345))+((x346*x351))+new_r01);
evalcond[5]=(((x345*x351))+(((-1.0)*x354))+new_r00);
evalcond[6]=((((-1.0)*sj7*x354))+((sj6*x345))+new_r11);
evalcond[7]=((((-1.0)*sj7*x353))+x347+(((-1.0)*new_r00*x350)));
evalcond[8]=((((-1.0)*sj7*x352))+x349+(((-1.0)*new_r01*x350)));
evalcond[9]=((((-1.0)*cj6*sj7*x353))+(((-1.0)*x346*x350))+new_r10);
evalcond[10]=((((-1.0)*x353))+(((-1.0)*new_r00*sj7*x350))+(((-1.0)*new_r20*x348))+((sj7*x347)));
evalcond[11]=((((-1.0)*new_r01*sj7*x350))+(((-1.0)*x352))+((sj7*x349))+(((-1.0)*new_r21*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x355=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x355.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x356 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x355.value)))+(x356.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x357=IKsin(j8);
ikfast_right_leg::IkReal x358=IKcos(j8);
ikfast_right_leg::IkReal x359=(cj6*new_r10);
ikfast_right_leg::IkReal x360=((1.0)*cj7);
ikfast_right_leg::IkReal x361=(cj6*new_r11);
ikfast_right_leg::IkReal x362=((1.0)*sj6);
ikfast_right_leg::IkReal x363=(sj6*sj7);
ikfast_right_leg::IkReal x364=((1.0)*x358);
ikfast_right_leg::IkReal x365=((1.0)*x357);
ikfast_right_leg::IkReal x366=(cj6*x364);
evalcond[0]=(((cj7*x357))+new_r20);
evalcond[1]=(((cj7*x358))+new_r21);
evalcond[2]=(((new_r11*sj6))+x357+((cj6*new_r01)));
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x364))+((cj6*new_r00)));
evalcond[4]=(((x358*x363))+new_r01+((cj6*x357)));
evalcond[5]=((((-1.0)*x366))+new_r00+((x357*x363)));
evalcond[6]=((((-1.0)*sj7*x366))+((sj6*x357))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x362))+(((-1.0)*sj7*x365))+x359);
evalcond[8]=((((-1.0)*sj7*x364))+x361+(((-1.0)*new_r01*x362)));
evalcond[9]=((((-1.0)*x358*x362))+new_r10+(((-1.0)*cj6*sj7*x365)));
evalcond[10]=((((-1.0)*new_r20*x360))+(((-1.0)*x365))+(((-1.0)*new_r00*sj7*x362))+((sj7*x359)));
evalcond[11]=((((-1.0)*x364))+((sj7*x361))+(((-1.0)*new_r21*x360))+(((-1.0)*new_r01*sj7*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x367=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x367.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x368 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x367.value)))+(x368.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[2];
evalcond[0]=(((cj7*(IKsin(j8))))+new_r20);
evalcond[1]=(((cj7*(IKcos(j8))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_right_leg::IkReal j6eval[3];
j6eval[0]=cj7;
j6eval[1]=IKsign(cj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[2];
j6eval[0]=cj7;
j6eval[1]=new_r01;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x369=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x369))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x369))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x369))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x369))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj8*x369))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x369))+((cj8*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x370=IKsin(j6);
ikfast_right_leg::IkReal x371=IKcos(j6);
ikfast_right_leg::IkReal x372=((1.0)*cj8);
ikfast_right_leg::IkReal x373=((1.0)*sj8);
ikfast_right_leg::IkReal x374=(sj8*x370);
ikfast_right_leg::IkReal x375=((1.0)*x370);
ikfast_right_leg::IkReal x376=(x371*x372);
evalcond[0]=(sj8+((new_r01*x371))+((new_r11*x370)));
evalcond[1]=(((sj8*x371))+((cj8*x370))+new_r01);
evalcond[2]=((((-1.0)*x376))+x374+new_r00);
evalcond[3]=((((-1.0)*x376))+x374+new_r11);
evalcond[4]=((((-1.0)*x372))+((new_r00*x371))+((new_r10*x370)));
evalcond[5]=((((-1.0)*x370*x372))+(((-1.0)*x371*x373))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x375))+(((-1.0)*x373))+((new_r10*x371)));
evalcond[7]=((((-1.0)*x372))+(((-1.0)*new_r01*x375))+((new_r11*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
ikfast_right_leg::IkReal x377=(((new_r11*sj8))+((cj8*new_r01)));
j6eval[0]=x377;
j6eval[1]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj8*cj8))))+(IKabs(((((-1.0)*cj8*sj8))+(((-1.0)*new_r01*new_r11))))));
j6eval[2]=IKsign(x377);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
ikfast_right_leg::IkReal x378=((1.0)*sj8);
ikfast_right_leg::IkReal x379=(((new_r10*new_r11))+((new_r00*new_r01)));
j6eval[0]=x379;
j6eval[1]=IKsign(x379);
j6eval[2]=((IKabs(((((-1.0)*new_r00*x378))+(((-1.0)*new_r11*x378)))))+(IKabs((((new_r01*sj8))+(((-1.0)*new_r10*x378))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
ikfast_right_leg::IkReal x380=((1.0)*new_r11);
ikfast_right_leg::IkReal x381=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x381;
j6eval[1]=((IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x380)))))+(IKabs(((((-1.0)*sj8*x380))+((cj8*new_r01))))));
j6eval[2]=IKsign(x381);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
new_r01=0;
new_r11=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x383 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r00),ikfast_right_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x383.valid){
continue;
}
ikfast_right_leg::IkReal x382=x383.value;
j6array[0]=((-1.0)*x382);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x382)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j6))))+((new_r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x384=IKcos(j6);
ikfast_right_leg::IkReal x385=IKsin(j6);
ikfast_right_leg::IkReal x386=((1.0)*x385);
evalcond[0]=(x384+new_r11);
evalcond[1]=((((-1.0)*x386))+new_r01);
evalcond[2]=((((-1.0)*x384))+new_r00);
evalcond[3]=((((-1.0)*x386))+new_r10);
evalcond[4]=(((new_r01*x384))+((new_r11*x385)));
evalcond[5]=((-1.0)+((new_r00*x384))+((new_r10*x385)));
evalcond[6]=((((-1.0)*new_r00*x386))+((new_r10*x384)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x386))+((new_r11*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x387=IKsin(j6);
ikfast_right_leg::IkReal x388=IKcos(j6);
ikfast_right_leg::IkReal x389=((1.0)*x387);
evalcond[0]=(x387+new_r01);
evalcond[1]=(x388+new_r00);
evalcond[2]=(x387+new_r10);
evalcond[3]=((((-1.0)*x388))+new_r11);
evalcond[4]=(((new_r01*x388))+((new_r11*x387)));
evalcond[5]=((1.0)+((new_r00*x388))+((new_r10*x387)));
evalcond[6]=((((-1.0)*new_r00*x389))+((new_r10*x388)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x389))+((new_r11*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x391 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x391)==0){
continue;
}
ikfast_right_leg::IkReal x390=pow(x391,-0.5);
CheckValue<ikfast_right_leg::IkReal> x392 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x392.valid){
continue;
}
ikfast_right_leg::IkReal gconst0=((-1.0)*(x392.value));
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01*x390);
ikfast_right_leg::IkReal gconst2=(new_r11*x390);
CheckValue<ikfast_right_leg::IkReal> x393 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x393.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x396 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
ikfast_right_leg::IkReal x394=((-1.0)*(x396.value));
ikfast_right_leg::IkReal x395=x390;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x394;
ikfast_right_leg::IkReal gconst0=x394;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01*x395);
ikfast_right_leg::IkReal gconst2=(new_r11*x395);
ikfast_right_leg::IkReal x397=new_r01*new_r01;
ikfast_right_leg::IkReal x398=(new_r00*new_r01);
ikfast_right_leg::IkReal x399=(((new_r10*new_r11))+x398);
ikfast_right_leg::IkReal x400=x390;
ikfast_right_leg::IkReal x401=(new_r01*x400);
j6eval[0]=x399;
j6eval[1]=((IKabs((((new_r11*x401))+((x398*x400)))))+(IKabs(((((-1.0)*x397*x400))+((new_r10*x401))))));
j6eval[2]=IKsign(x399);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[2];
CheckValue<ikfast_right_leg::IkReal> x404 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
ikfast_right_leg::IkReal x402=((-1.0)*(x404.value));
ikfast_right_leg::IkReal x403=x390;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x402;
ikfast_right_leg::IkReal gconst0=x402;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01*x403);
ikfast_right_leg::IkReal gconst2=(new_r11*x403);
ikfast_right_leg::IkReal x405=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x405;
j6eval[1]=IKsign(x405);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x408 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x408.valid){
continue;
}
ikfast_right_leg::IkReal x406=((-1.0)*(x408.value));
ikfast_right_leg::IkReal x407=x390;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x406;
ikfast_right_leg::IkReal gconst0=x406;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01*x407);
ikfast_right_leg::IkReal gconst2=(new_r11*x407);
j6eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst1*gconst1)+(gconst2*gconst2));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=1.5707963267949;
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
j6array[2]=3.14159265358979;
sj6array[2]=IKsin(j6array[2]);
cj6array[2]=IKcos(j6array[2]);
j6array[3]=-1.5707963267949;
sj6array[3]=IKsin(j6array[3]);
cj6array[3]=IKcos(j6array[3]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6array[2] > IKPI )
{
    j6array[2]-=IK2PI;
}
else if( j6array[2] < -IKPI )
{    j6array[2]+=IK2PI;
}
j6valid[2] = true;
if( j6array[3] > IKPI )
{
    j6array[3]-=IK2PI;
}
else if( j6array[3] < -IKPI )
{    j6array[3]+=IK2PI;
}
j6valid[3] = true;
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x410 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
ikfast_right_leg::IkReal x409=((-1.0)*(x410.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x409;
new_r11=0;
new_r00=0;
ikfast_right_leg::IkReal gconst0=x409;
ikfast_right_leg::IkReal x411 = new_r01*new_r01;
if(IKabs(x411)==0){
continue;
}
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01*(pow(x411,-0.5)));
ikfast_right_leg::IkReal gconst2=0;
j6eval[0]=new_r01;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x412=IKPowWithIntegerCheck(gconst1,-1);
if(!x412.valid){
continue;
}
cj6array[0]=((-1.0)*new_r01*(x412.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x413=IKsin(j6);
ikfast_right_leg::IkReal x414=IKcos(j6);
ikfast_right_leg::IkReal x415=((-1.0)*x413);
evalcond[0]=(new_r10*x413);
evalcond[1]=(gconst1*x415);
evalcond[2]=(new_r01*x415);
evalcond[3]=(gconst1+((new_r01*x414)));
evalcond[4]=(gconst1+((new_r10*x414)));
evalcond[5]=(((gconst1*x414))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x416=IKPowWithIntegerCheck(new_r01,-1);
if(!x416.valid){
continue;
}
cj6array[0]=((-1.0)*gconst1*(x416.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x417=IKsin(j6);
ikfast_right_leg::IkReal x418=IKcos(j6);
ikfast_right_leg::IkReal x419=(gconst1*x418);
ikfast_right_leg::IkReal x420=((-1.0)*x417);
evalcond[0]=(new_r10*x417);
evalcond[1]=(gconst1*x420);
evalcond[2]=(new_r01*x420);
evalcond[3]=(x419+new_r01);
evalcond[4]=(gconst1+((new_r10*x418)));
evalcond[5]=(x419+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst1;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x422 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x422.valid){
continue;
}
ikfast_right_leg::IkReal x421=((-1.0)*(x422.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x421;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x421;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_right_leg::IkReal gconst2=new_r11;
j6eval[0]=-1.0;
j6eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j6eval[2]=-1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x424 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
ikfast_right_leg::IkReal x423=((-1.0)*(x424.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x423;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x423;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_right_leg::IkReal gconst2=new_r11;
j6eval[0]=-1.0;
j6eval[1]=-1.0;
j6eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x426 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x426.valid){
continue;
}
ikfast_right_leg::IkReal x425=((-1.0)*(x426.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x425;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x425;
ikfast_right_leg::IkReal gconst1=((-1.0)*new_r01);
ikfast_right_leg::IkReal gconst2=new_r11;
j6eval[0]=1.0;
j6eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j6eval[2]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x427=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x428 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x427)))),ikfast_right_leg::IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x428.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x429=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x429.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x428.value)+(((1.5707963267949)*(x429.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x430=IKcos(j6);
ikfast_right_leg::IkReal x431=IKsin(j6);
ikfast_right_leg::IkReal x432=(gconst1*x430);
ikfast_right_leg::IkReal x433=(gconst2*x430);
ikfast_right_leg::IkReal x434=((1.0)*x431);
ikfast_right_leg::IkReal x435=(gconst2*x434);
evalcond[0]=(((new_r01*x430))+gconst1+((new_r11*x431)));
evalcond[1]=(((gconst1*x431))+x433+new_r11);
evalcond[2]=((((-1.0)*x435))+x432);
evalcond[3]=((((-1.0)*x435))+x432+new_r01);
evalcond[4]=((((-1.0)*x433))+(((-1.0)*gconst1*x434)));
evalcond[5]=((((-1.0)*new_r01*x434))+gconst2+((new_r11*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x436=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x436.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x437 = IKatan2WithCheck(ikfast_right_leg::IkReal((gconst1*new_r11)),ikfast_right_leg::IkReal((gconst2*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x436.value)))+(x437.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x438=IKcos(j6);
ikfast_right_leg::IkReal x439=IKsin(j6);
ikfast_right_leg::IkReal x440=(gconst1*x438);
ikfast_right_leg::IkReal x441=(gconst2*x438);
ikfast_right_leg::IkReal x442=((1.0)*x439);
ikfast_right_leg::IkReal x443=(gconst2*x442);
evalcond[0]=(((new_r01*x438))+gconst1+((new_r11*x439)));
evalcond[1]=(((gconst1*x439))+x441+new_r11);
evalcond[2]=((((-1.0)*x443))+x440);
evalcond[3]=((((-1.0)*x443))+x440+new_r01);
evalcond[4]=((((-1.0)*x441))+(((-1.0)*gconst1*x442)));
evalcond[5]=((((-1.0)*new_r01*x442))+gconst2+((new_r11*x438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x444=IKPowWithIntegerCheck(IKsign((((gconst1*new_r01))+(((-1.0)*gconst2*new_r11)))),-1);
if(!x444.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x445 = IKatan2WithCheck(ikfast_right_leg::IkReal((gconst1*gconst2)),ikfast_right_leg::IkReal(((-1.0)*(gconst1*gconst1))),IKFAST_ATAN2_MAGTHRESH);
if(!x445.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x444.value)))+(x445.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x446=IKcos(j6);
ikfast_right_leg::IkReal x447=IKsin(j6);
ikfast_right_leg::IkReal x448=(gconst1*x446);
ikfast_right_leg::IkReal x449=(gconst2*x446);
ikfast_right_leg::IkReal x450=((1.0)*x447);
ikfast_right_leg::IkReal x451=(gconst2*x450);
evalcond[0]=(((new_r01*x446))+gconst1+((new_r11*x447)));
evalcond[1]=(((gconst1*x447))+x449+new_r11);
evalcond[2]=((((-1.0)*x451))+x448);
evalcond[3]=((((-1.0)*x451))+x448+new_r01);
evalcond[4]=((((-1.0)*x449))+(((-1.0)*gconst1*x450)));
evalcond[5]=(gconst2+(((-1.0)*new_r01*x450))+((new_r11*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x452=IKPowWithIntegerCheck(gconst2,-1);
if(!x452.valid){
continue;
}
cj6array[0]=(new_r00*(x452.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x453=IKsin(j6);
ikfast_right_leg::IkReal x454=IKcos(j6);
ikfast_right_leg::IkReal x455=((-1.0)*x453);
evalcond[0]=(new_r11*x453);
evalcond[1]=(gconst2*x455);
evalcond[2]=(new_r00*x455);
evalcond[3]=(new_r11+((gconst2*x454)));
evalcond[4]=(((new_r11*x454))+gconst2);
evalcond[5]=(((new_r00*x454))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x457 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
ikfast_right_leg::IkReal x456=((-1.0)*(x457.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x456;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x456;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x458 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x458)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x458,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x460 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
ikfast_right_leg::IkReal x459=((-1.0)*(x460.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x459;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x459;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x461 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x461)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x461,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x463 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x463.valid){
continue;
}
ikfast_right_leg::IkReal x462=((-1.0)*(x463.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x462;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst0=x462;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x464 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x464)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x464,-0.5)));
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x465=IKPowWithIntegerCheck(new_r10,-1);
if(!x465.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x466=IKPowWithIntegerCheck(gconst2,-1);
if(!x466.valid){
continue;
}
if( IKabs((gconst2*(x465.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x466.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst2*(x465.value)))+IKsqr(((-1.0)*new_r11*(x466.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((gconst2*(x465.value)), ((-1.0)*new_r11*(x466.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x467=IKsin(j6);
ikfast_right_leg::IkReal x468=IKcos(j6);
ikfast_right_leg::IkReal x469=(gconst2*x468);
ikfast_right_leg::IkReal x470=(gconst2*x467);
evalcond[0]=(new_r11*x467);
evalcond[1]=(new_r10*x468);
evalcond[2]=((-1.0)*x470);
evalcond[3]=((-1.0)*x469);
evalcond[4]=(x469+new_r11);
evalcond[5]=(((new_r11*x468))+gconst2);
evalcond[6]=((((-1.0)*x470))+new_r10);
evalcond[7]=(((new_r10*x467))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x471=IKPowWithIntegerCheck(gconst2,-1);
if(!x471.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x472=IKPowWithIntegerCheck(new_r11,-1);
if(!x472.valid){
continue;
}
if( IKabs((new_r10*(x471.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x472.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x471.value)))+IKsqr(((-1.0)*gconst2*(x472.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x471.value)), ((-1.0)*gconst2*(x472.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x473=IKsin(j6);
ikfast_right_leg::IkReal x474=IKcos(j6);
ikfast_right_leg::IkReal x475=(gconst2*x474);
ikfast_right_leg::IkReal x476=(gconst2*x473);
evalcond[0]=(new_r11*x473);
evalcond[1]=(new_r10*x474);
evalcond[2]=((-1.0)*x476);
evalcond[3]=((-1.0)*x475);
evalcond[4]=(x475+new_r11);
evalcond[5]=(gconst2+((new_r11*x474)));
evalcond[6]=((((-1.0)*x476))+new_r10);
evalcond[7]=(((new_r10*x473))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x477 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x478=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x478.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x477.value)+(((1.5707963267949)*(x478.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x479=IKsin(j6);
ikfast_right_leg::IkReal x480=IKcos(j6);
ikfast_right_leg::IkReal x481=(gconst2*x480);
ikfast_right_leg::IkReal x482=(gconst2*x479);
evalcond[0]=(new_r11*x479);
evalcond[1]=(new_r10*x480);
evalcond[2]=((-1.0)*x482);
evalcond[3]=((-1.0)*x481);
evalcond[4]=(x481+new_r11);
evalcond[5]=(((new_r11*x480))+gconst2);
evalcond[6]=((((-1.0)*x482))+new_r10);
evalcond[7]=(((new_r10*x479))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x484 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
ikfast_right_leg::IkReal x483=((-1.0)*(x484.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x483;
new_r01=0;
ikfast_right_leg::IkReal gconst0=x483;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x485 = new_r11*new_r11;
if(IKabs(x485)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x485,-0.5)));
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x487 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
ikfast_right_leg::IkReal x486=((-1.0)*(x487.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x486;
new_r01=0;
ikfast_right_leg::IkReal gconst0=x486;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x488 = new_r11*new_r11;
if(IKabs(x488)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x488,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x490 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
ikfast_right_leg::IkReal x489=((-1.0)*(x490.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst1;
cj8=gconst2;
j8=x489;
new_r01=0;
ikfast_right_leg::IkReal gconst0=x489;
ikfast_right_leg::IkReal gconst1=0;
ikfast_right_leg::IkReal x491 = new_r11*new_r11;
if(IKabs(x491)==0){
continue;
}
ikfast_right_leg::IkReal gconst2=(new_r11*(pow(x491,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x492=IKPowWithIntegerCheck(gconst2,-1);
if(!x492.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x493=IKPowWithIntegerCheck(new_r11,-1);
if(!x493.valid){
continue;
}
if( IKabs((new_r10*(x492.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst2*(x493.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x492.value)))+IKsqr(((-1.0)*gconst2*(x493.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x492.value)), ((-1.0)*gconst2*(x493.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x494=IKsin(j6);
ikfast_right_leg::IkReal x495=IKcos(j6);
ikfast_right_leg::IkReal x496=(gconst2*x495);
ikfast_right_leg::IkReal x497=((1.0)*x494);
evalcond[0]=(new_r11*x494);
evalcond[1]=((-1.0)*gconst2*x494);
evalcond[2]=(x496+new_r11);
evalcond[3]=(gconst2+((new_r11*x495)));
evalcond[4]=((((-1.0)*x496))+new_r00);
evalcond[5]=((((-1.0)*gconst2*x497))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x497))+((new_r10*x495)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x494))+((new_r00*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x498 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x499=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x499.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x498.value)+(((1.5707963267949)*(x499.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x500=IKsin(j6);
ikfast_right_leg::IkReal x501=IKcos(j6);
ikfast_right_leg::IkReal x502=(gconst2*x501);
ikfast_right_leg::IkReal x503=((1.0)*x500);
evalcond[0]=(new_r11*x500);
evalcond[1]=((-1.0)*gconst2*x500);
evalcond[2]=(x502+new_r11);
evalcond[3]=(gconst2+((new_r11*x501)));
evalcond[4]=(new_r00+(((-1.0)*x502)));
evalcond[5]=((((-1.0)*gconst2*x503))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x503))+((new_r10*x501)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x500))+((new_r00*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x504=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x504.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x505 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x505.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x504.value)))+(x505.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x506=IKsin(j6);
ikfast_right_leg::IkReal x507=IKcos(j6);
ikfast_right_leg::IkReal x508=(gconst2*x507);
ikfast_right_leg::IkReal x509=((1.0)*x506);
evalcond[0]=(new_r11*x506);
evalcond[1]=((-1.0)*gconst2*x506);
evalcond[2]=(x508+new_r11);
evalcond[3]=(gconst2+((new_r11*x507)));
evalcond[4]=(new_r00+(((-1.0)*x508)));
evalcond[5]=((((-1.0)*gconst2*x509))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x509))+((new_r10*x507)));
evalcond[7]=((((-1.0)*gconst2))+((new_r10*x506))+((new_r00*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x510=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x511 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x510)))),ikfast_right_leg::IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x512=IKPowWithIntegerCheck(IKsign(((gconst1*gconst1)+(gconst2*gconst2))),-1);
if(!x512.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x511.value)+(((1.5707963267949)*(x512.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x513=IKcos(j6);
ikfast_right_leg::IkReal x514=IKsin(j6);
ikfast_right_leg::IkReal x515=(gconst1*x513);
ikfast_right_leg::IkReal x516=(gconst2*x513);
ikfast_right_leg::IkReal x517=((1.0)*x514);
ikfast_right_leg::IkReal x518=(gconst2*x517);
evalcond[0]=(((new_r01*x513))+((new_r11*x514))+gconst1);
evalcond[1]=(((gconst1*x514))+x516+new_r11);
evalcond[2]=(x515+new_r01+(((-1.0)*x518)));
evalcond[3]=(((new_r10*x513))+gconst1+(((-1.0)*new_r00*x517)));
evalcond[4]=(((new_r11*x513))+gconst2+(((-1.0)*new_r01*x517)));
evalcond[5]=(x515+new_r10+(((-1.0)*x518)));
evalcond[6]=(((new_r00*x513))+((new_r10*x514))+(((-1.0)*gconst2)));
evalcond[7]=((((-1.0)*x516))+(((-1.0)*gconst1*x517))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x519=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x520 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst2*new_r01))+(((-1.0)*gconst1*x519)))),ikfast_right_leg::IkReal(((((-1.0)*gconst1*new_r01))+(((-1.0)*gconst2*x519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x520.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x521=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x521.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x520.value)+(((1.5707963267949)*(x521.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x522=IKcos(j6);
ikfast_right_leg::IkReal x523=IKsin(j6);
ikfast_right_leg::IkReal x524=(gconst1*x522);
ikfast_right_leg::IkReal x525=(gconst2*x522);
ikfast_right_leg::IkReal x526=((1.0)*x523);
ikfast_right_leg::IkReal x527=(gconst2*x526);
evalcond[0]=(((new_r01*x522))+gconst1+((new_r11*x523)));
evalcond[1]=(x525+((gconst1*x523))+new_r11);
evalcond[2]=((((-1.0)*x527))+x524+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x526))+((new_r10*x522)));
evalcond[4]=(gconst2+((new_r11*x522))+(((-1.0)*new_r01*x526)));
evalcond[5]=((((-1.0)*x527))+x524+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x523))+((new_r00*x522)));
evalcond[7]=((((-1.0)*x525))+new_r00+(((-1.0)*gconst1*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x528=((1.0)*gconst1);
CheckValue<ikfast_right_leg::IkReal> x529 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst1*new_r01))+(((-1.0)*new_r10*x528)))),ikfast_right_leg::IkReal(((((-1.0)*new_r00*x528))+(((-1.0)*new_r11*x528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x530=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x530.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x529.value)+(((1.5707963267949)*(x530.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x531=IKcos(j6);
ikfast_right_leg::IkReal x532=IKsin(j6);
ikfast_right_leg::IkReal x533=(gconst1*x531);
ikfast_right_leg::IkReal x534=(gconst2*x531);
ikfast_right_leg::IkReal x535=((1.0)*x532);
ikfast_right_leg::IkReal x536=(gconst2*x535);
evalcond[0]=(((new_r01*x531))+gconst1+((new_r11*x532)));
evalcond[1]=(((gconst1*x532))+x534+new_r11);
evalcond[2]=((((-1.0)*x536))+x533+new_r01);
evalcond[3]=(gconst1+(((-1.0)*new_r00*x535))+((new_r10*x531)));
evalcond[4]=(gconst2+((new_r11*x531))+(((-1.0)*new_r01*x535)));
evalcond[5]=((((-1.0)*x536))+x533+new_r10);
evalcond[6]=((((-1.0)*gconst2))+((new_r10*x532))+((new_r00*x531)));
evalcond[7]=((((-1.0)*x534))+new_r00+(((-1.0)*gconst1*x535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
ikfast_right_leg::IkReal x538 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x538)==0){
continue;
}
ikfast_right_leg::IkReal x537=pow(x538,-0.5);
CheckValue<ikfast_right_leg::IkReal> x539 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*(x539.value))));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01*x537);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*x537);
CheckValue<ikfast_right_leg::IkReal> x540 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x540.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x543 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x543.valid){
continue;
}
ikfast_right_leg::IkReal x541=((1.0)*(x543.value));
ikfast_right_leg::IkReal x542=x537;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x541)));
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x541)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01*x542);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*x542);
ikfast_right_leg::IkReal x544=new_r01*new_r01;
ikfast_right_leg::IkReal x545=(((new_r10*new_r11))+((new_r00*new_r01)));
ikfast_right_leg::IkReal x546=x537;
ikfast_right_leg::IkReal x547=((1.0)*new_r01*x546);
j6eval[0]=x545;
j6eval[1]=IKsign(x545);
j6eval[2]=((IKabs((((x544*x546))+(((-1.0)*new_r10*x547)))))+(IKabs(((((-1.0)*new_r00*x547))+(((-1.0)*new_r11*x547))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[2];
CheckValue<ikfast_right_leg::IkReal> x550 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x550.valid){
continue;
}
ikfast_right_leg::IkReal x548=((1.0)*(x550.value));
ikfast_right_leg::IkReal x549=x537;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x548)));
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x548)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01*x549);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*x549);
ikfast_right_leg::IkReal x551=((new_r01*new_r01)+(new_r11*new_r11));
j6eval[0]=x551;
j6eval[1]=IKsign(x551);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x554 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x554.valid){
continue;
}
ikfast_right_leg::IkReal x552=((1.0)*(x554.value));
ikfast_right_leg::IkReal x553=x537;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x552)));
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x552)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01*x553);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*x553);
j6eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst4*gconst4)+(gconst5*gconst5));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=1.5707963267949;
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
j6array[2]=3.14159265358979;
sj6array[2]=IKsin(j6array[2]);
cj6array[2]=IKcos(j6array[2]);
j6array[3]=-1.5707963267949;
sj6array[3]=IKsin(j6array[3]);
cj6array[3]=IKcos(j6array[3]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6array[2] > IKPI )
{
    j6array[2]-=IK2PI;
}
else if( j6array[2] < -IKPI )
{    j6array[2]+=IK2PI;
}
j6valid[2] = true;
if( j6array[3] > IKPI )
{
    j6array[3]-=IK2PI;
}
else if( j6array[3] < -IKPI )
{    j6array[3]+=IK2PI;
}
j6valid[3] = true;
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x556 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
ikfast_right_leg::IkReal x555=((1.0)*(x556.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x555)));
new_r11=0;
new_r00=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x555)));
ikfast_right_leg::IkReal x557 = new_r01*new_r01;
if(IKabs(x557)==0){
continue;
}
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01*(pow(x557,-0.5)));
ikfast_right_leg::IkReal gconst5=0;
j6eval[0]=new_r01;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x558=IKPowWithIntegerCheck(gconst4,-1);
if(!x558.valid){
continue;
}
cj6array[0]=((-1.0)*new_r01*(x558.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x559=IKsin(j6);
ikfast_right_leg::IkReal x560=IKcos(j6);
ikfast_right_leg::IkReal x561=((-1.0)*x559);
evalcond[0]=(new_r10*x559);
evalcond[1]=(gconst4*x561);
evalcond[2]=(new_r01*x561);
evalcond[3]=(gconst4+((new_r01*x560)));
evalcond[4]=(gconst4+((new_r10*x560)));
evalcond[5]=(((gconst4*x560))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x562=IKPowWithIntegerCheck(new_r01,-1);
if(!x562.valid){
continue;
}
cj6array[0]=((-1.0)*gconst4*(x562.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x563=IKsin(j6);
ikfast_right_leg::IkReal x564=IKcos(j6);
ikfast_right_leg::IkReal x565=(gconst4*x564);
ikfast_right_leg::IkReal x566=((-1.0)*x563);
evalcond[0]=(new_r10*x563);
evalcond[1]=(gconst4*x566);
evalcond[2]=(new_r01*x566);
evalcond[3]=(x565+new_r01);
evalcond[4]=(gconst4+((new_r10*x564)));
evalcond[5]=(x565+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst4;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[4];
CheckValue<ikfast_right_leg::IkReal> x568 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
ikfast_right_leg::IkReal x567=((1.0)*(x568.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x567)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x567)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=1.0;
j6eval[1]=1.0;
j6eval[2]=new_r01;
j6eval[3]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x570 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
ikfast_right_leg::IkReal x569=((1.0)*(x570.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x569)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x569)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=-1.0;
j6eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j6eval[2]=-1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[3];
CheckValue<ikfast_right_leg::IkReal> x572 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
ikfast_right_leg::IkReal x571=((1.0)*(x572.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x571)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x571)));
ikfast_right_leg::IkReal gconst4=((1.0)*new_r01);
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11);
j6eval[0]=1.0;
j6eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j6eval[2]=1.0;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x573=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x574=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x574.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x575 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x573)))),ikfast_right_leg::IkReal(((((-1.0)*gconst5*x573))+(((-1.0)*gconst4*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x574.value)))+(x575.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x576=IKsin(j6);
ikfast_right_leg::IkReal x577=IKcos(j6);
ikfast_right_leg::IkReal x578=(gconst4*x577);
ikfast_right_leg::IkReal x579=(gconst4*x576);
ikfast_right_leg::IkReal x580=((1.0)*x576);
ikfast_right_leg::IkReal x581=(gconst5*x577);
ikfast_right_leg::IkReal x582=(gconst5*x580);
evalcond[0]=(((new_r11*x576))+((new_r01*x577))+gconst4);
evalcond[1]=(x579+x581+new_r11);
evalcond[2]=(x578+(((-1.0)*x582)));
evalcond[3]=(x578+new_r01+(((-1.0)*x582)));
evalcond[4]=((((-1.0)*x581))+(((-1.0)*x579)));
evalcond[5]=((((-1.0)*new_r01*x580))+((new_r11*x577))+gconst5);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x583 = IKatan2WithCheck(ikfast_right_leg::IkReal((gconst4*new_r11)),ikfast_right_leg::IkReal((gconst5*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x584=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x584.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x585=IKsin(j6);
ikfast_right_leg::IkReal x586=IKcos(j6);
ikfast_right_leg::IkReal x587=(gconst4*x586);
ikfast_right_leg::IkReal x588=(gconst4*x585);
ikfast_right_leg::IkReal x589=((1.0)*x585);
ikfast_right_leg::IkReal x590=(gconst5*x586);
ikfast_right_leg::IkReal x591=(gconst5*x589);
evalcond[0]=(gconst4+((new_r01*x586))+((new_r11*x585)));
evalcond[1]=(x588+x590+new_r11);
evalcond[2]=((((-1.0)*x591))+x587);
evalcond[3]=((((-1.0)*x591))+x587+new_r01);
evalcond[4]=((((-1.0)*x588))+(((-1.0)*x590)));
evalcond[5]=((((-1.0)*new_r01*x589))+gconst5+((new_r11*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x592 = IKatan2WithCheck(ikfast_right_leg::IkReal((gconst4*gconst5)),ikfast_right_leg::IkReal(((-1.0)*(gconst4*gconst4))),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x593=IKPowWithIntegerCheck(IKsign((((gconst4*new_r01))+(((-1.0)*gconst5*new_r11)))),-1);
if(!x593.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x592.value)+(((1.5707963267949)*(x593.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x594=IKsin(j6);
ikfast_right_leg::IkReal x595=IKcos(j6);
ikfast_right_leg::IkReal x596=(gconst4*x595);
ikfast_right_leg::IkReal x597=(gconst4*x594);
ikfast_right_leg::IkReal x598=((1.0)*x594);
ikfast_right_leg::IkReal x599=(gconst5*x595);
ikfast_right_leg::IkReal x600=(gconst5*x598);
evalcond[0]=(((new_r11*x594))+gconst4+((new_r01*x595)));
evalcond[1]=(x597+x599+new_r11);
evalcond[2]=(x596+(((-1.0)*x600)));
evalcond[3]=(x596+(((-1.0)*x600))+new_r01);
evalcond[4]=((((-1.0)*x597))+(((-1.0)*x599)));
evalcond[5]=(((new_r11*x595))+gconst5+(((-1.0)*new_r01*x598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x601=IKPowWithIntegerCheck(gconst5,-1);
if(!x601.valid){
continue;
}
cj6array[0]=(new_r00*(x601.value));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x602=IKsin(j6);
ikfast_right_leg::IkReal x603=IKcos(j6);
ikfast_right_leg::IkReal x604=((-1.0)*x602);
evalcond[0]=(new_r11*x602);
evalcond[1]=(gconst5*x604);
evalcond[2]=(new_r00*x604);
evalcond[3]=(((gconst5*x603))+new_r11);
evalcond[4]=(gconst5+((new_r11*x603)));
evalcond[5]=((((-1.0)*gconst5))+((new_r00*x603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x606 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
ikfast_right_leg::IkReal x605=((1.0)*(x606.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x605)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x605)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x607 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x607)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x607,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x609 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
ikfast_right_leg::IkReal x608=((1.0)*(x609.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x608)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x608)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x610 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x610)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x610,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x612 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
ikfast_right_leg::IkReal x611=((1.0)*(x612.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x611)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x611)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x613 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x613)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x613,-0.5)));
j6eval[0]=new_r10;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x614=IKPowWithIntegerCheck(new_r10,-1);
if(!x614.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x615=IKPowWithIntegerCheck(gconst5,-1);
if(!x615.valid){
continue;
}
if( IKabs((gconst5*(x614.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x615.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst5*(x614.value)))+IKsqr(((-1.0)*new_r11*(x615.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((gconst5*(x614.value)), ((-1.0)*new_r11*(x615.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x616=IKsin(j6);
ikfast_right_leg::IkReal x617=IKcos(j6);
ikfast_right_leg::IkReal x618=((1.0)*gconst5);
ikfast_right_leg::IkReal x619=((-1.0)*gconst5);
evalcond[0]=(new_r11*x616);
evalcond[1]=(new_r10*x617);
evalcond[2]=(x616*x619);
evalcond[3]=(x617*x619);
evalcond[4]=(((gconst5*x617))+new_r11);
evalcond[5]=(gconst5+((new_r11*x617)));
evalcond[6]=(new_r10+(((-1.0)*x616*x618)));
evalcond[7]=(((new_r10*x616))+(((-1.0)*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x620=IKPowWithIntegerCheck(gconst5,-1);
if(!x620.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x621=IKPowWithIntegerCheck(new_r11,-1);
if(!x621.valid){
continue;
}
if( IKabs((new_r10*(x620.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x621.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x620.value)))+IKsqr(((-1.0)*gconst5*(x621.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x620.value)), ((-1.0)*gconst5*(x621.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x622=IKsin(j6);
ikfast_right_leg::IkReal x623=IKcos(j6);
ikfast_right_leg::IkReal x624=((1.0)*gconst5);
ikfast_right_leg::IkReal x625=((-1.0)*gconst5);
evalcond[0]=(new_r11*x622);
evalcond[1]=(new_r10*x623);
evalcond[2]=(x622*x625);
evalcond[3]=(x623*x625);
evalcond[4]=(((gconst5*x623))+new_r11);
evalcond[5]=(gconst5+((new_r11*x623)));
evalcond[6]=((((-1.0)*x622*x624))+new_r10);
evalcond[7]=((((-1.0)*x624))+((new_r10*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x626 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x627=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x627.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x628=IKsin(j6);
ikfast_right_leg::IkReal x629=IKcos(j6);
ikfast_right_leg::IkReal x630=((1.0)*gconst5);
ikfast_right_leg::IkReal x631=((-1.0)*gconst5);
evalcond[0]=(new_r11*x628);
evalcond[1]=(new_r10*x629);
evalcond[2]=(x628*x631);
evalcond[3]=(x629*x631);
evalcond[4]=(((gconst5*x629))+new_r11);
evalcond[5]=(gconst5+((new_r11*x629)));
evalcond[6]=((((-1.0)*x628*x630))+new_r10);
evalcond[7]=((((-1.0)*x630))+((new_r10*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x633 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
ikfast_right_leg::IkReal x632=((1.0)*(x633.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x632)));
new_r01=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x632)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x634 = new_r11*new_r11;
if(IKabs(x634)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x634,-0.5)));
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x636 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x636.valid){
continue;
}
ikfast_right_leg::IkReal x635=((1.0)*(x636.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x635)));
new_r01=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x635)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x637 = new_r11*new_r11;
if(IKabs(x637)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x637,-0.5)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
CheckValue<ikfast_right_leg::IkReal> x639 = IKatan2WithCheck(ikfast_right_leg::IkReal(0),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
ikfast_right_leg::IkReal x638=((1.0)*(x639.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj8=gconst4;
cj8=gconst5;
j8=((3.14159265)+(((-1.0)*x638)));
new_r01=0;
ikfast_right_leg::IkReal gconst3=((3.14159265358979)+(((-1.0)*x638)));
ikfast_right_leg::IkReal gconst4=0;
ikfast_right_leg::IkReal x640 = new_r11*new_r11;
if(IKabs(x640)==0){
continue;
}
ikfast_right_leg::IkReal gconst5=((-1.0)*new_r11*(pow(x640,-0.5)));
j6eval[0]=new_r11;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x641=IKPowWithIntegerCheck(gconst5,-1);
if(!x641.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x642=IKPowWithIntegerCheck(new_r11,-1);
if(!x642.valid){
continue;
}
if( IKabs((new_r10*(x641.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst5*(x642.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x641.value)))+IKsqr(((-1.0)*gconst5*(x642.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r10*(x641.value)), ((-1.0)*gconst5*(x642.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x643=IKsin(j6);
ikfast_right_leg::IkReal x644=IKcos(j6);
ikfast_right_leg::IkReal x645=((1.0)*gconst5);
evalcond[0]=(new_r11*x643);
evalcond[1]=((-1.0)*gconst5*x643);
evalcond[2]=(new_r11+((gconst5*x644)));
evalcond[3]=(gconst5+((new_r11*x644)));
evalcond[4]=((((-1.0)*x644*x645))+new_r00);
evalcond[5]=((((-1.0)*x643*x645))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x643))+((new_r10*x644)));
evalcond[7]=((((-1.0)*x645))+((new_r10*x643))+((new_r00*x644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x646 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x647=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x647.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x646.value)+(((1.5707963267949)*(x647.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x648=IKsin(j6);
ikfast_right_leg::IkReal x649=IKcos(j6);
ikfast_right_leg::IkReal x650=((1.0)*gconst5);
evalcond[0]=(new_r11*x648);
evalcond[1]=((-1.0)*gconst5*x648);
evalcond[2]=(new_r11+((gconst5*x649)));
evalcond[3]=(gconst5+((new_r11*x649)));
evalcond[4]=((((-1.0)*x649*x650))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x648*x650)));
evalcond[6]=((((-1.0)*new_r00*x648))+((new_r10*x649)));
evalcond[7]=((((-1.0)*x650))+((new_r10*x648))+((new_r00*x649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x651 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r10),ikfast_right_leg::IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x652=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x652.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x651.value)+(((1.5707963267949)*(x652.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x653=IKsin(j6);
ikfast_right_leg::IkReal x654=IKcos(j6);
ikfast_right_leg::IkReal x655=((1.0)*gconst5);
evalcond[0]=(new_r11*x653);
evalcond[1]=((-1.0)*gconst5*x653);
evalcond[2]=(new_r11+((gconst5*x654)));
evalcond[3]=(gconst5+((new_r11*x654)));
evalcond[4]=(new_r00+(((-1.0)*x654*x655)));
evalcond[5]=(new_r10+(((-1.0)*x653*x655)));
evalcond[6]=((((-1.0)*new_r00*x653))+((new_r10*x654)));
evalcond[7]=((((-1.0)*x655))+((new_r10*x653))+((new_r00*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x656=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x657 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x656)))),ikfast_right_leg::IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x658=IKPowWithIntegerCheck(IKsign(((gconst4*gconst4)+(gconst5*gconst5))),-1);
if(!x658.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x657.value)+(((1.5707963267949)*(x658.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x659=IKsin(j6);
ikfast_right_leg::IkReal x660=IKcos(j6);
ikfast_right_leg::IkReal x661=((1.0)*gconst5);
ikfast_right_leg::IkReal x662=(gconst4*x660);
ikfast_right_leg::IkReal x663=(gconst4*x659);
ikfast_right_leg::IkReal x664=((1.0)*x659);
ikfast_right_leg::IkReal x665=(x659*x661);
evalcond[0]=(gconst4+((new_r11*x659))+((new_r01*x660)));
evalcond[1]=(((gconst5*x660))+x663+new_r11);
evalcond[2]=((((-1.0)*x665))+x662+new_r01);
evalcond[3]=(gconst4+((new_r10*x660))+(((-1.0)*new_r00*x664)));
evalcond[4]=(gconst5+((new_r11*x660))+(((-1.0)*new_r01*x664)));
evalcond[5]=((((-1.0)*x665))+x662+new_r10);
evalcond[6]=((((-1.0)*x661))+((new_r10*x659))+((new_r00*x660)));
evalcond[7]=((((-1.0)*x660*x661))+(((-1.0)*x663))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x666=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x667 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst5*new_r01))+(((-1.0)*gconst4*x666)))),ikfast_right_leg::IkReal(((((-1.0)*gconst4*new_r01))+(((-1.0)*gconst5*x666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x668=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x668.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x667.value)+(((1.5707963267949)*(x668.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x669=IKsin(j6);
ikfast_right_leg::IkReal x670=IKcos(j6);
ikfast_right_leg::IkReal x671=((1.0)*gconst5);
ikfast_right_leg::IkReal x672=(gconst4*x670);
ikfast_right_leg::IkReal x673=(gconst4*x669);
ikfast_right_leg::IkReal x674=((1.0)*x669);
ikfast_right_leg::IkReal x675=(x669*x671);
evalcond[0]=(((new_r01*x670))+gconst4+((new_r11*x669)));
evalcond[1]=(((gconst5*x670))+x673+new_r11);
evalcond[2]=(x672+new_r01+(((-1.0)*x675)));
evalcond[3]=(((new_r10*x670))+(((-1.0)*new_r00*x674))+gconst4);
evalcond[4]=(((new_r11*x670))+(((-1.0)*new_r01*x674))+gconst5);
evalcond[5]=(x672+new_r10+(((-1.0)*x675)));
evalcond[6]=(((new_r00*x670))+((new_r10*x669))+(((-1.0)*x671)));
evalcond[7]=((((-1.0)*x670*x671))+(((-1.0)*x673))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x676=((1.0)*gconst4);
CheckValue<ikfast_right_leg::IkReal> x677 = IKatan2WithCheck(ikfast_right_leg::IkReal((((gconst4*new_r01))+(((-1.0)*new_r10*x676)))),ikfast_right_leg::IkReal(((((-1.0)*new_r00*x676))+(((-1.0)*new_r11*x676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x678=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x678.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x677.value)+(((1.5707963267949)*(x678.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x679=IKsin(j6);
ikfast_right_leg::IkReal x680=IKcos(j6);
ikfast_right_leg::IkReal x681=((1.0)*gconst5);
ikfast_right_leg::IkReal x682=(gconst4*x680);
ikfast_right_leg::IkReal x683=(gconst4*x679);
ikfast_right_leg::IkReal x684=((1.0)*x679);
ikfast_right_leg::IkReal x685=(x679*x681);
evalcond[0]=(((new_r11*x679))+gconst4+((new_r01*x680)));
evalcond[1]=(((gconst5*x680))+x683+new_r11);
evalcond[2]=((((-1.0)*x685))+x682+new_r01);
evalcond[3]=(gconst4+((new_r10*x680))+(((-1.0)*new_r00*x684)));
evalcond[4]=((((-1.0)*new_r01*x684))+gconst5+((new_r11*x680)));
evalcond[5]=((((-1.0)*x685))+x682+new_r10);
evalcond[6]=(((new_r10*x679))+(((-1.0)*x681))+((new_r00*x680)));
evalcond[7]=((((-1.0)*x680*x681))+new_r00+(((-1.0)*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x687 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r00),ikfast_right_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
ikfast_right_leg::IkReal x686=x687.value;
j6array[0]=((-1.0)*x686);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x686)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j6))))+((new_r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x688=((1.0)*new_r11);
CheckValue<ikfast_right_leg::IkReal> x689 = IKatan2WithCheck(ikfast_right_leg::IkReal((((cj8*new_r01))+(((-1.0)*sj8*x688)))),ikfast_right_leg::IkReal(((((-1.0)*cj8*x688))+(((-1.0)*new_r01*sj8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x689.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x690=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x690.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x689.value)+(((1.5707963267949)*(x690.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x691=IKcos(j6);
ikfast_right_leg::IkReal x692=IKsin(j6);
ikfast_right_leg::IkReal x693=(sj8*x691);
ikfast_right_leg::IkReal x694=((1.0)*x692);
ikfast_right_leg::IkReal x695=(cj8*x691);
ikfast_right_leg::IkReal x696=(cj8*x694);
evalcond[0]=(sj8+((new_r11*x692))+((new_r01*x691)));
evalcond[1]=(((sj8*x692))+x695+new_r11);
evalcond[2]=(x693+(((-1.0)*x696))+new_r01);
evalcond[3]=(sj8+((new_r10*x691))+(((-1.0)*new_r00*x694)));
evalcond[4]=(cj8+(((-1.0)*new_r01*x694))+((new_r11*x691)));
evalcond[5]=(x693+(((-1.0)*x696))+new_r10);
evalcond[6]=(((new_r10*x692))+((new_r00*x691))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x694))+new_r00+(((-1.0)*x695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
ikfast_right_leg::IkReal x697=((1.0)*sj8);
CheckValue<ikfast_right_leg::IkReal> x698 = IKatan2WithCheck(ikfast_right_leg::IkReal((((new_r01*sj8))+(((-1.0)*new_r10*x697)))),ikfast_right_leg::IkReal(((((-1.0)*new_r00*x697))+(((-1.0)*new_r11*x697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x699=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x699.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x698.value)+(((1.5707963267949)*(x699.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x700=IKcos(j6);
ikfast_right_leg::IkReal x701=IKsin(j6);
ikfast_right_leg::IkReal x702=(sj8*x700);
ikfast_right_leg::IkReal x703=((1.0)*x701);
ikfast_right_leg::IkReal x704=(cj8*x700);
ikfast_right_leg::IkReal x705=(cj8*x703);
evalcond[0]=(sj8+((new_r01*x700))+((new_r11*x701)));
evalcond[1]=(x704+new_r11+((sj8*x701)));
evalcond[2]=((((-1.0)*x705))+x702+new_r01);
evalcond[3]=(sj8+((new_r10*x700))+(((-1.0)*new_r00*x703)));
evalcond[4]=(cj8+((new_r11*x700))+(((-1.0)*new_r01*x703)));
evalcond[5]=((((-1.0)*x705))+x702+new_r10);
evalcond[6]=(((new_r00*x700))+((new_r10*x701))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x703))+(((-1.0)*x704))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x706 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)+(new_r01*new_r01)+(cj8*cj8))),ikfast_right_leg::IkReal(((((-1.0)*cj8*sj8))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x707=IKPowWithIntegerCheck(IKsign((((new_r11*sj8))+((cj8*new_r01)))),-1);
if(!x707.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x706.value)+(((1.5707963267949)*(x707.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x708=IKcos(j6);
ikfast_right_leg::IkReal x709=IKsin(j6);
ikfast_right_leg::IkReal x710=(sj8*x708);
ikfast_right_leg::IkReal x711=((1.0)*x709);
ikfast_right_leg::IkReal x712=(cj8*x708);
ikfast_right_leg::IkReal x713=(cj8*x711);
evalcond[0]=(sj8+((new_r01*x708))+((new_r11*x709)));
evalcond[1]=(x712+new_r11+((sj8*x709)));
evalcond[2]=((((-1.0)*x713))+x710+new_r01);
evalcond[3]=(sj8+((new_r10*x708))+(((-1.0)*new_r00*x711)));
evalcond[4]=(cj8+((new_r11*x708))+(((-1.0)*new_r01*x711)));
evalcond[5]=((((-1.0)*x713))+x710+new_r10);
evalcond[6]=(((new_r00*x708))+((new_r10*x709))+(((-1.0)*cj8)));
evalcond[7]=((((-1.0)*sj8*x711))+(((-1.0)*x712))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x715 = IKatan2WithCheck(ikfast_right_leg::IkReal((new_r10*new_r22)),ikfast_right_leg::IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
ikfast_right_leg::IkReal x714=x715.value;
j6array[0]=((-1.0)*x714);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x714)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[5];
ikfast_right_leg::IkReal x716=IKsin(j6);
ikfast_right_leg::IkReal x717=IKcos(j6);
ikfast_right_leg::IkReal x718=((1.0)*x716);
ikfast_right_leg::IkReal x719=(new_r11*x717);
evalcond[0]=(((new_r01*x717))+((new_r11*x716)));
evalcond[1]=(((new_r00*x717))+((new_r10*x716)));
evalcond[2]=(((new_r10*x717))+(((-1.0)*new_r00*x718)));
evalcond[3]=(x719+(((-1.0)*new_r01*x718)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x718))+((new_r22*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x721 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r00),ikfast_right_leg::IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x721.valid){
continue;
}
ikfast_right_leg::IkReal x720=x721.value;
j6array[0]=((-1.0)*x720);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x720)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[5];
ikfast_right_leg::IkReal x722=IKcos(j6);
ikfast_right_leg::IkReal x723=IKsin(j6);
ikfast_right_leg::IkReal x724=((1.0)*x723);
ikfast_right_leg::IkReal x725=(new_r10*x722);
ikfast_right_leg::IkReal x726=(new_r11*x722);
evalcond[0]=(((new_r01*x722))+((new_r11*x723)));
evalcond[1]=(x725+(((-1.0)*new_r00*x724)));
evalcond[2]=(x726+(((-1.0)*new_r01*x724)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x724))+((new_r22*x725)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x724))+((new_r22*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<ikfast_right_leg::IkReal> x728 = IKatan2WithCheck(ikfast_right_leg::IkReal(new_r01),ikfast_right_leg::IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
ikfast_right_leg::IkReal x727=x728.value;
j6array[0]=((-1.0)*x727);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x727)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[5];
ikfast_right_leg::IkReal x729=IKcos(j6);
ikfast_right_leg::IkReal x730=IKsin(j6);
ikfast_right_leg::IkReal x731=((1.0)*x730);
ikfast_right_leg::IkReal x732=(new_r10*x729);
ikfast_right_leg::IkReal x733=(new_r11*x729);
evalcond[0]=(((new_r00*x729))+((new_r10*x730)));
evalcond[1]=(x732+(((-1.0)*new_r00*x731)));
evalcond[2]=(x733+(((-1.0)*new_r01*x731)));
evalcond[3]=(((new_r22*x732))+(((-1.0)*new_r00*new_r22*x731)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x731))+((new_r22*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x735=IKPowWithIntegerCheck(cj7,-1);
if(!x735.valid){
continue;
}
ikfast_right_leg::IkReal x734=x735.value;
CheckValue<ikfast_right_leg::IkReal> x736=IKPowWithIntegerCheck(new_r01,-1);
if(!x736.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x734)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x734*(x736.value)*(((((-1.0)*cj7*sj8))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x734))+IKsqr((x734*(x736.value)*(((((-1.0)*cj7*sj8))+((new_r02*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r02*x734), (x734*(x736.value)*(((((-1.0)*cj7*sj8))+((new_r02*new_r11))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[18];
ikfast_right_leg::IkReal x737=IKcos(j6);
ikfast_right_leg::IkReal x738=IKsin(j6);
ikfast_right_leg::IkReal x739=((1.0)*cj8);
ikfast_right_leg::IkReal x740=((1.0)*sj7);
ikfast_right_leg::IkReal x741=((1.0)*cj7);
ikfast_right_leg::IkReal x742=(new_r02*x738);
ikfast_right_leg::IkReal x743=(cj7*x737);
ikfast_right_leg::IkReal x744=(new_r12*x737);
ikfast_right_leg::IkReal x745=(new_r11*x737);
ikfast_right_leg::IkReal x746=(new_r01*x738);
ikfast_right_leg::IkReal x747=(sj8*x738);
ikfast_right_leg::IkReal x748=(cj8*x737);
ikfast_right_leg::IkReal x749=(new_r10*x737);
ikfast_right_leg::IkReal x750=(new_r00*x738);
ikfast_right_leg::IkReal x751=(cj8*x738);
ikfast_right_leg::IkReal x752=(sj8*x737);
evalcond[0]=(((cj7*x738))+new_r02);
evalcond[1]=((((-1.0)*x737*x741))+new_r12);
evalcond[2]=(((new_r02*x737))+((new_r12*x738)));
evalcond[3]=(sj8+((new_r01*x737))+((new_r11*x738)));
evalcond[4]=(((sj7*x751))+x752+new_r01);
evalcond[5]=(((new_r00*x737))+(((-1.0)*x739))+((new_r10*x738)));
evalcond[6]=(((sj7*x747))+(((-1.0)*x737*x739))+new_r00);
evalcond[7]=((((-1.0)*sj7*x737*x739))+x747+new_r11);
evalcond[8]=((((-1.0)*x742))+x744+(((-1.0)*x741)));
evalcond[9]=(new_r10+(((-1.0)*x738*x739))+(((-1.0)*x740*x752)));
evalcond[10]=((((-1.0)*x750))+(((-1.0)*sj8*x740))+x749);
evalcond[11]=((((-1.0)*x746))+x745+(((-1.0)*sj7*x739)));
evalcond[12]=(((new_r20*sj7))+((new_r10*x743))+(((-1.0)*x741*x750)));
evalcond[13]=(((new_r11*x743))+(((-1.0)*x741*x746))+((new_r21*sj7)));
evalcond[14]=((((-1.0)*new_r22*x741))+((sj7*x744))+(((-1.0)*x740*x742)));
evalcond[15]=((-1.0)+((new_r22*sj7))+((new_r12*x743))+(((-1.0)*x741*x742)));
evalcond[16]=((((-1.0)*sj8))+(((-1.0)*new_r20*x741))+((sj7*x749))+(((-1.0)*x740*x750)));
evalcond[17]=(((sj7*x745))+(((-1.0)*x739))+(((-1.0)*new_r21*x741))+(((-1.0)*x740*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x753=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x753.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x754 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r02)),ikfast_right_leg::IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x754.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x753.value)))+(x754.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[18];
ikfast_right_leg::IkReal x755=IKcos(j6);
ikfast_right_leg::IkReal x756=IKsin(j6);
ikfast_right_leg::IkReal x757=((1.0)*cj8);
ikfast_right_leg::IkReal x758=((1.0)*sj7);
ikfast_right_leg::IkReal x759=((1.0)*cj7);
ikfast_right_leg::IkReal x760=(new_r02*x756);
ikfast_right_leg::IkReal x761=(cj7*x755);
ikfast_right_leg::IkReal x762=(new_r12*x755);
ikfast_right_leg::IkReal x763=(new_r11*x755);
ikfast_right_leg::IkReal x764=(new_r01*x756);
ikfast_right_leg::IkReal x765=(sj8*x756);
ikfast_right_leg::IkReal x766=(cj8*x755);
ikfast_right_leg::IkReal x767=(new_r10*x755);
ikfast_right_leg::IkReal x768=(new_r00*x756);
ikfast_right_leg::IkReal x769=(cj8*x756);
ikfast_right_leg::IkReal x770=(sj8*x755);
evalcond[0]=(((cj7*x756))+new_r02);
evalcond[1]=((((-1.0)*x755*x759))+new_r12);
evalcond[2]=(((new_r12*x756))+((new_r02*x755)));
evalcond[3]=(sj8+((new_r11*x756))+((new_r01*x755)));
evalcond[4]=(((sj7*x769))+x770+new_r01);
evalcond[5]=(((new_r00*x755))+((new_r10*x756))+(((-1.0)*x757)));
evalcond[6]=(((sj7*x765))+(((-1.0)*x755*x757))+new_r00);
evalcond[7]=((((-1.0)*sj7*x755*x757))+x765+new_r11);
evalcond[8]=((((-1.0)*x760))+x762+(((-1.0)*x759)));
evalcond[9]=((((-1.0)*x758*x770))+(((-1.0)*x756*x757))+new_r10);
evalcond[10]=((((-1.0)*x768))+x767+(((-1.0)*sj8*x758)));
evalcond[11]=((((-1.0)*sj7*x757))+(((-1.0)*x764))+x763);
evalcond[12]=(((new_r10*x761))+((new_r20*sj7))+(((-1.0)*x759*x768)));
evalcond[13]=(((new_r11*x761))+((new_r21*sj7))+(((-1.0)*x759*x764)));
evalcond[14]=((((-1.0)*x758*x760))+((sj7*x762))+(((-1.0)*new_r22*x759)));
evalcond[15]=((-1.0)+((new_r12*x761))+((new_r22*sj7))+(((-1.0)*x759*x760)));
evalcond[16]=((((-1.0)*x758*x768))+(((-1.0)*sj8))+((sj7*x767))+(((-1.0)*new_r20*x759)));
evalcond[17]=((((-1.0)*x758*x764))+((sj7*x763))+(((-1.0)*new_r21*x759))+(((-1.0)*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<ikfast_right_leg::IkReal> x771=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x771.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x772 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r02)),ikfast_right_leg::IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x771.value)))+(x772.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x773=IKcos(j6);
ikfast_right_leg::IkReal x774=IKsin(j6);
ikfast_right_leg::IkReal x775=((1.0)*cj7);
ikfast_right_leg::IkReal x776=(new_r02*x774);
ikfast_right_leg::IkReal x777=(cj7*x773);
ikfast_right_leg::IkReal x778=(new_r12*x773);
evalcond[0]=(((cj7*x774))+new_r02);
evalcond[1]=((((-1.0)*x773*x775))+new_r12);
evalcond[2]=(((new_r12*x774))+((new_r02*x773)));
evalcond[3]=(x778+(((-1.0)*x775))+(((-1.0)*x776)));
evalcond[4]=(((new_r20*sj7))+(((-1.0)*new_r00*x774*x775))+((new_r10*x777)));
evalcond[5]=(((new_r11*x777))+((new_r21*sj7))+(((-1.0)*new_r01*x774*x775)));
evalcond[6]=((((-1.0)*new_r22*x775))+((sj7*x778))+(((-1.0)*sj7*x776)));
evalcond[7]=((-1.0)+((new_r12*x777))+((new_r22*sj7))+(((-1.0)*x775*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
ikfast_right_leg::IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[2];
j8eval[0]=cj6;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[3];
j8eval[0]=cj7;
j8eval[1]=sj6;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x779=((1.0)*sj6);
if( IKabs(((((-1.0)*new_r00*x779))+(((-1.0)*cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x779))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x779))+(((-1.0)*cj6*new_r01))))+IKsqr(((((-1.0)*new_r01*x779))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*new_r00*x779))+(((-1.0)*cj6*new_r01))), ((((-1.0)*new_r01*x779))+((cj6*new_r00))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x780=IKsin(j8);
ikfast_right_leg::IkReal x781=IKcos(j8);
ikfast_right_leg::IkReal x782=((1.0)*sj6);
ikfast_right_leg::IkReal x783=(sj6*x780);
ikfast_right_leg::IkReal x784=((1.0)*x781);
ikfast_right_leg::IkReal x785=((1.0)*x780);
ikfast_right_leg::IkReal x786=(cj6*x784);
evalcond[0]=(((new_r11*sj6))+((cj6*new_r01))+x780);
evalcond[1]=(((new_r10*sj6))+(((-1.0)*x784))+((cj6*new_r00)));
evalcond[2]=(((sj6*x781))+new_r01+((cj6*x780)));
evalcond[3]=((((-1.0)*x786))+x783+new_r00);
evalcond[4]=((((-1.0)*x786))+x783+new_r11);
evalcond[5]=((((-1.0)*x785))+((cj6*new_r10))+(((-1.0)*new_r00*x782)));
evalcond[6]=((((-1.0)*new_r01*x782))+(((-1.0)*x784))+((cj6*new_r11)));
evalcond[7]=((((-1.0)*cj6*x785))+(((-1.0)*x781*x782))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
ikfast_right_leg::IkReal x787=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x787))+((new_r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x787))))+IKsqr(((((-1.0)*cj6*x787))+((new_r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x787))), ((((-1.0)*cj6*x787))+((new_r01*sj6))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x788=IKsin(j8);
ikfast_right_leg::IkReal x789=IKcos(j8);
ikfast_right_leg::IkReal x790=((1.0)*sj6);
ikfast_right_leg::IkReal x791=(cj6*x788);
ikfast_right_leg::IkReal x792=(cj6*x789);
ikfast_right_leg::IkReal x793=(x789*x790);
evalcond[0]=(((new_r11*sj6))+((cj6*new_r01))+x788);
evalcond[1]=(((cj6*new_r10))+x788+(((-1.0)*new_r00*x790)));
evalcond[2]=((((-1.0)*new_r01*x790))+((cj6*new_r11))+x789);
evalcond[3]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x789)));
evalcond[4]=(((sj6*x788))+x792+new_r11);
evalcond[5]=((((-1.0)*x793))+x791+new_r01);
evalcond[6]=((((-1.0)*x793))+x791+new_r10);
evalcond[7]=((((-1.0)*x788*x790))+(((-1.0)*x792))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x794=IKsin(j8);
ikfast_right_leg::IkReal x795=IKcos(j8);
ikfast_right_leg::IkReal x796=((1.0)*cj7);
ikfast_right_leg::IkReal x797=((1.0)*x795);
ikfast_right_leg::IkReal x798=((1.0)*x794);
evalcond[0]=(x794+new_r01);
evalcond[1]=(((cj7*x794))+new_r20);
evalcond[2]=(((cj7*x795))+new_r21);
evalcond[3]=((((-1.0)*x797))+new_r00);
evalcond[4]=((((-1.0)*sj7*x797))+new_r11);
evalcond[5]=((((-1.0)*sj7*x798))+new_r10);
evalcond[6]=((((-1.0)*x798))+((new_r10*sj7))+(((-1.0)*new_r20*x796)));
evalcond[7]=((((-1.0)*new_r21*x796))+(((-1.0)*x797))+((new_r11*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x799=IKsin(j8);
ikfast_right_leg::IkReal x800=IKcos(j8);
evalcond[0]=(x799+new_r20);
evalcond[1]=(new_r21+x800);
evalcond[2]=((((-1.0)*new_r01))+x799);
evalcond[3]=((((-1.0)*x800))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x801=IKsin(j8);
ikfast_right_leg::IkReal x802=((1.0)*(IKcos(j8)));
evalcond[0]=((((-1.0)*x801))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x802)));
evalcond[2]=((((-1.0)*new_r01))+x801);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x803=IKcos(j8);
ikfast_right_leg::IkReal x804=IKsin(j8);
evalcond[0]=(new_r11+x803);
evalcond[1]=((((-1.0)*new_r01))+x804);
evalcond[2]=((((-1.0)*x803))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x804))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x805=IKsin(j8);
ikfast_right_leg::IkReal x806=((1.0)*(IKcos(j8)));
evalcond[0]=((((-1.0)*new_r01))+x805);
evalcond[1]=(new_r11+(((-1.0)*x806)));
evalcond[2]=((((-1.0)*new_r10))+x805);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x807=IKcos(j8);
ikfast_right_leg::IkReal x808=IKsin(j8);
ikfast_right_leg::IkReal x809=((-1.0)*x808);
evalcond[0]=(new_r22*x807);
evalcond[1]=x809;
evalcond[2]=((-1.0)*x807);
evalcond[3]=(new_r22*x809);
evalcond[4]=((((-1.0)*new_r01))+x808);
evalcond[5]=((((-1.0)*x807))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x810=IKPowWithIntegerCheck(sj7,-1);
if(!x810.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x810.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11*(x810.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11*(x810.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x811=IKsin(j8);
ikfast_right_leg::IkReal x812=IKcos(j8);
ikfast_right_leg::IkReal x813=((1.0)*cj7);
ikfast_right_leg::IkReal x814=((1.0)*sj7);
ikfast_right_leg::IkReal x815=((1.0)*x812);
ikfast_right_leg::IkReal x816=((1.0)*x811);
evalcond[0]=(((cj7*x811))+new_r20);
evalcond[1]=(((cj7*x812))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x811);
evalcond[3]=(((sj7*x812))+new_r11);
evalcond[4]=((((-1.0)*x815))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x811*x814))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x814))+(((-1.0)*x816))+(((-1.0)*new_r20*x813)));
evalcond[7]=((((-1.0)*new_r11*x814))+(((-1.0)*new_r21*x813))+(((-1.0)*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x817=IKPowWithIntegerCheck(cj7,-1);
if(!x817.valid){
continue;
}
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x817.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r21*(x817.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r21*(x817.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x818=IKsin(j8);
ikfast_right_leg::IkReal x819=IKcos(j8);
ikfast_right_leg::IkReal x820=((1.0)*cj7);
ikfast_right_leg::IkReal x821=((1.0)*sj7);
ikfast_right_leg::IkReal x822=((1.0)*x819);
ikfast_right_leg::IkReal x823=((1.0)*x818);
evalcond[0]=(((cj7*x818))+new_r20);
evalcond[1]=(((cj7*x819))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x818);
evalcond[3]=(((sj7*x819))+new_r11);
evalcond[4]=((((-1.0)*x822))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x818*x821))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x820))+(((-1.0)*x823))+(((-1.0)*new_r10*x821)));
evalcond[7]=((((-1.0)*x822))+(((-1.0)*new_r11*x821))+(((-1.0)*new_r21*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x824=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x824.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x825 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x824.value)))+(x825.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x826=IKsin(j8);
ikfast_right_leg::IkReal x827=IKcos(j8);
ikfast_right_leg::IkReal x828=((1.0)*cj7);
ikfast_right_leg::IkReal x829=((1.0)*sj7);
ikfast_right_leg::IkReal x830=((1.0)*x827);
ikfast_right_leg::IkReal x831=((1.0)*x826);
evalcond[0]=(((cj7*x826))+new_r20);
evalcond[1]=(((cj7*x827))+new_r21);
evalcond[2]=((((-1.0)*new_r01))+x826);
evalcond[3]=(((sj7*x827))+new_r11);
evalcond[4]=((((-1.0)*x830))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x826*x829))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x828))+(((-1.0)*new_r10*x829))+(((-1.0)*x831)));
evalcond[7]=((((-1.0)*new_r11*x829))+(((-1.0)*new_r21*x828))+(((-1.0)*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x832=IKsin(j8);
ikfast_right_leg::IkReal x833=IKcos(j8);
ikfast_right_leg::IkReal x834=((1.0)*x833);
evalcond[0]=(new_r20+x832);
evalcond[1]=(new_r21+x833);
evalcond[2]=(((cj6*x832))+new_r01);
evalcond[3]=(((sj6*x832))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj6*x834)));
evalcond[5]=(new_r10+(((-1.0)*sj6*x834)));
evalcond[6]=(((new_r11*sj6))+((cj6*new_r01))+x832);
evalcond[7]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x835=IKsin(j8);
ikfast_right_leg::IkReal x836=IKcos(j8);
ikfast_right_leg::IkReal x837=((1.0)*x836);
evalcond[0]=((((-1.0)*x835))+new_r20);
evalcond[1]=((((-1.0)*x837))+new_r21);
evalcond[2]=(((cj6*x835))+new_r01);
evalcond[3]=(((sj6*x835))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj6*x837)));
evalcond[5]=(new_r10+(((-1.0)*sj6*x837)));
evalcond[6]=(((new_r11*sj6))+((cj6*new_r01))+x835);
evalcond[7]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x838=IKsin(j8);
ikfast_right_leg::IkReal x839=IKcos(j8);
ikfast_right_leg::IkReal x840=((1.0)*cj7);
ikfast_right_leg::IkReal x841=((1.0)*sj7);
ikfast_right_leg::IkReal x842=((1.0)*x839);
evalcond[0]=(new_r11+x838);
evalcond[1]=(((cj7*x838))+new_r20);
evalcond[2]=(((cj7*x839))+new_r21);
evalcond[3]=((((-1.0)*x842))+new_r10);
evalcond[4]=(((sj7*x839))+new_r01);
evalcond[5]=(((sj7*x838))+new_r00);
evalcond[6]=((((-1.0)*x838))+(((-1.0)*new_r20*x840))+(((-1.0)*new_r00*x841)));
evalcond[7]=((((-1.0)*x842))+(((-1.0)*new_r21*x840))+(((-1.0)*new_r01*x841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal j8eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
ikfast_right_leg::IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x843=IKsin(j8);
ikfast_right_leg::IkReal x844=((1.0)*(IKcos(j8)));
evalcond[0]=((((-1.0)*new_r11))+x843);
evalcond[1]=((((-1.0)*x844))+new_r01);
evalcond[2]=((((-1.0)*x843))+new_r00);
evalcond[3]=((((-1.0)*x844))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x845=IKsin(j8);
ikfast_right_leg::IkReal x846=IKcos(j8);
evalcond[0]=(new_r01+x846);
evalcond[1]=(new_r00+x845);
evalcond[2]=((((-1.0)*new_r11))+x845);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x847=IKsin(j8);
ikfast_right_leg::IkReal x848=IKcos(j8);
evalcond[0]=(new_r20+x847);
evalcond[1]=(new_r21+x848);
evalcond[2]=((((-1.0)*new_r11))+x847);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r20, new_r21);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[4];
ikfast_right_leg::IkReal x849=IKsin(j8);
ikfast_right_leg::IkReal x850=((1.0)*(IKcos(j8)));
evalcond[0]=((((-1.0)*x849))+new_r20);
evalcond[1]=((((-1.0)*x850))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x849);
evalcond[3]=((((-1.0)*x850))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[6];
ikfast_right_leg::IkReal x851=IKcos(j8);
ikfast_right_leg::IkReal x852=IKsin(j8);
ikfast_right_leg::IkReal x853=((-1.0)*x851);
ikfast_right_leg::IkReal x854=((-1.0)*x852);
evalcond[0]=x854;
evalcond[1]=x853;
evalcond[2]=(new_r22*x853);
evalcond[3]=(new_r22*x854);
evalcond[4]=((((-1.0)*new_r11))+x852);
evalcond[5]=((((-1.0)*x851))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x855=IKPowWithIntegerCheck(cj7,-1);
if(!x855.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x856=IKPowWithIntegerCheck(sj7,-1);
if(!x856.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x855.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x856.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x855.value)))+IKsqr((new_r01*(x856.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20*(x855.value)), (new_r01*(x856.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x857=IKsin(j8);
ikfast_right_leg::IkReal x858=IKcos(j8);
ikfast_right_leg::IkReal x859=((1.0)*cj7);
ikfast_right_leg::IkReal x860=((1.0)*x858);
ikfast_right_leg::IkReal x861=((1.0)*x857);
evalcond[0]=(((cj7*x857))+new_r20);
evalcond[1]=(((cj7*x858))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x857);
evalcond[3]=((((-1.0)*sj7*x860))+new_r01);
evalcond[4]=((((-1.0)*sj7*x861))+new_r00);
evalcond[5]=((((-1.0)*x860))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x861))+(((-1.0)*new_r20*x859))+((new_r00*sj7)));
evalcond[7]=((((-1.0)*new_r21*x859))+(((-1.0)*x860))+((new_r01*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x862=IKPowWithIntegerCheck(cj7,-1);
if(!x862.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x862.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x862.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x862.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x863=IKsin(j8);
ikfast_right_leg::IkReal x864=IKcos(j8);
ikfast_right_leg::IkReal x865=((1.0)*cj7);
ikfast_right_leg::IkReal x866=((1.0)*x864);
ikfast_right_leg::IkReal x867=((1.0)*x863);
evalcond[0]=(new_r20+((cj7*x863)));
evalcond[1]=(new_r21+((cj7*x864)));
evalcond[2]=((((-1.0)*new_r11))+x863);
evalcond[3]=((((-1.0)*sj7*x866))+new_r01);
evalcond[4]=((((-1.0)*sj7*x867))+new_r00);
evalcond[5]=((((-1.0)*x866))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x867))+((new_r00*sj7))+(((-1.0)*new_r20*x865)));
evalcond[7]=((((-1.0)*x866))+(((-1.0)*new_r21*x865))+((new_r01*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x868=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x868.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x869 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x869.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x868.value)))+(x869.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[8];
ikfast_right_leg::IkReal x870=IKsin(j8);
ikfast_right_leg::IkReal x871=IKcos(j8);
ikfast_right_leg::IkReal x872=((1.0)*cj7);
ikfast_right_leg::IkReal x873=((1.0)*x871);
ikfast_right_leg::IkReal x874=((1.0)*x870);
evalcond[0]=(new_r20+((cj7*x870)));
evalcond[1]=(new_r21+((cj7*x871)));
evalcond[2]=((((-1.0)*new_r11))+x870);
evalcond[3]=((((-1.0)*sj7*x873))+new_r01);
evalcond[4]=((((-1.0)*sj7*x874))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x873)));
evalcond[6]=((((-1.0)*new_r20*x872))+((new_r00*sj7))+(((-1.0)*x874)));
evalcond[7]=((((-1.0)*new_r21*x872))+((new_r01*sj7))+(((-1.0)*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
ikfast_right_leg::IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=IKabs(new_r22);
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
ikfast_right_leg::IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
ikfast_right_leg::IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
ikfast_right_leg::IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x876=IKPowWithIntegerCheck(cj7,-1);
if(!x876.valid){
continue;
}
ikfast_right_leg::IkReal x875=x876.value;
CheckValue<ikfast_right_leg::IkReal> x877=IKPowWithIntegerCheck(sj6,-1);
if(!x877.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x878=IKPowWithIntegerCheck(sj7,-1);
if(!x878.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x875)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x875*(x877.value)*(x878.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x875))+IKsqr((x875*(x877.value)*(x878.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r20*x875), (x875*(x877.value)*(x878.value)*(((((-1.0)*cj7*new_r01))+((cj6*new_r20))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x879=IKsin(j8);
ikfast_right_leg::IkReal x880=IKcos(j8);
ikfast_right_leg::IkReal x881=(cj6*new_r10);
ikfast_right_leg::IkReal x882=((1.0)*cj7);
ikfast_right_leg::IkReal x883=(cj6*new_r11);
ikfast_right_leg::IkReal x884=((1.0)*sj6);
ikfast_right_leg::IkReal x885=(sj6*sj7);
ikfast_right_leg::IkReal x886=((1.0)*x880);
ikfast_right_leg::IkReal x887=((1.0)*x879);
ikfast_right_leg::IkReal x888=(cj6*x886);
evalcond[0]=(new_r20+((cj7*x879)));
evalcond[1]=(((cj7*x880))+new_r21);
evalcond[2]=(((new_r11*sj6))+((cj6*new_r01))+x879);
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x886))+((cj6*new_r00)));
evalcond[4]=(((x880*x885))+((cj6*x879))+new_r01);
evalcond[5]=(((x879*x885))+(((-1.0)*x888))+new_r00);
evalcond[6]=(((sj6*x879))+new_r11+(((-1.0)*sj7*x888)));
evalcond[7]=((((-1.0)*new_r00*x884))+x881+(((-1.0)*sj7*x887)));
evalcond[8]=((((-1.0)*new_r01*x884))+x883+(((-1.0)*sj7*x886)));
evalcond[9]=((((-1.0)*cj6*sj7*x887))+new_r10+(((-1.0)*x880*x884)));
evalcond[10]=((((-1.0)*new_r00*sj7*x884))+(((-1.0)*x887))+(((-1.0)*new_r20*x882))+((sj7*x881)));
evalcond[11]=((((-1.0)*new_r21*x882))+(((-1.0)*x886))+((sj7*x883))+(((-1.0)*new_r01*sj7*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x890=IKPowWithIntegerCheck(cj7,-1);
if(!x890.valid){
continue;
}
ikfast_right_leg::IkReal x889=x890.value;
CheckValue<ikfast_right_leg::IkReal> x891=IKPowWithIntegerCheck(cj6,-1);
if(!x891.valid){
continue;
}
if( IKabs((x889*(x891.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x889)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x889*(x891.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7))))))+IKsqr(((-1.0)*new_r21*x889))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x889*(x891.value)*(((((-1.0)*cj7*new_r01))+((new_r21*sj6*sj7))))), ((-1.0)*new_r21*x889));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x892=IKsin(j8);
ikfast_right_leg::IkReal x893=IKcos(j8);
ikfast_right_leg::IkReal x894=(cj6*new_r10);
ikfast_right_leg::IkReal x895=((1.0)*cj7);
ikfast_right_leg::IkReal x896=(cj6*new_r11);
ikfast_right_leg::IkReal x897=((1.0)*sj6);
ikfast_right_leg::IkReal x898=(sj6*sj7);
ikfast_right_leg::IkReal x899=((1.0)*x893);
ikfast_right_leg::IkReal x900=((1.0)*x892);
ikfast_right_leg::IkReal x901=(cj6*x899);
evalcond[0]=(((cj7*x892))+new_r20);
evalcond[1]=(((cj7*x893))+new_r21);
evalcond[2]=(((new_r11*sj6))+((cj6*new_r01))+x892);
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x899))+((cj6*new_r00)));
evalcond[4]=(((x893*x898))+new_r01+((cj6*x892)));
evalcond[5]=((((-1.0)*x901))+((x892*x898))+new_r00);
evalcond[6]=(((sj6*x892))+(((-1.0)*sj7*x901))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x897))+(((-1.0)*sj7*x900))+x894);
evalcond[8]=((((-1.0)*new_r01*x897))+x896+(((-1.0)*sj7*x899)));
evalcond[9]=((((-1.0)*cj6*sj7*x900))+(((-1.0)*x893*x897))+new_r10);
evalcond[10]=((((-1.0)*x900))+(((-1.0)*new_r00*sj7*x897))+(((-1.0)*new_r20*x895))+((sj7*x894)));
evalcond[11]=((((-1.0)*new_r21*x895))+(((-1.0)*x899))+((sj7*x896))+(((-1.0)*new_r01*sj7*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
ikfast_right_leg::IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<ikfast_right_leg::IkReal> x902=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x902.valid){
continue;
}
CheckValue<ikfast_right_leg::IkReal> x903 = IKatan2WithCheck(ikfast_right_leg::IkReal(((-1.0)*new_r20)),ikfast_right_leg::IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x902.value)))+(x903.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
ikfast_right_leg::IkReal evalcond[12];
ikfast_right_leg::IkReal x904=IKsin(j8);
ikfast_right_leg::IkReal x905=IKcos(j8);
ikfast_right_leg::IkReal x906=(cj6*new_r10);
ikfast_right_leg::IkReal x907=((1.0)*cj7);
ikfast_right_leg::IkReal x908=(cj6*new_r11);
ikfast_right_leg::IkReal x909=((1.0)*sj6);
ikfast_right_leg::IkReal x910=(sj6*sj7);
ikfast_right_leg::IkReal x911=((1.0)*x905);
ikfast_right_leg::IkReal x912=((1.0)*x904);
ikfast_right_leg::IkReal x913=(cj6*x911);
evalcond[0]=(((cj7*x904))+new_r20);
evalcond[1]=(((cj7*x905))+new_r21);
evalcond[2]=(((new_r11*sj6))+((cj6*new_r01))+x904);
evalcond[3]=(((new_r10*sj6))+(((-1.0)*x911))+((cj6*new_r00)));
evalcond[4]=(((cj6*x904))+new_r01+((x905*x910)));
evalcond[5]=((((-1.0)*x913))+new_r00+((x904*x910)));
evalcond[6]=((((-1.0)*sj7*x913))+((sj6*x904))+new_r11);
evalcond[7]=((((-1.0)*sj7*x912))+(((-1.0)*new_r00*x909))+x906);
evalcond[8]=((((-1.0)*sj7*x911))+(((-1.0)*new_r01*x909))+x908);
evalcond[9]=((((-1.0)*cj6*sj7*x912))+new_r10+(((-1.0)*x905*x909)));
evalcond[10]=((((-1.0)*new_r20*x907))+(((-1.0)*x912))+((sj7*x906))+(((-1.0)*new_r00*sj7*x909)));
evalcond[11]=((((-1.0)*new_r21*x907))+(((-1.0)*x911))+(((-1.0)*new_r01*sj7*x909))+((sj7*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<ikfast_right_leg::IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(ikfast_right_leg::IkReal rawcoeffs[3+1], ikfast_right_leg::IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const ikfast_right_leg::IkReal tol = 128.0*std::numeric_limits<ikfast_right_leg::IkReal>::epsilon();
    const ikfast_right_leg::IkReal tolsqrt = sqrt(std::numeric_limits<ikfast_right_leg::IkReal>::epsilon());
    complex<ikfast_right_leg::IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<ikfast_right_leg::IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<ikfast_right_leg::IkReal> roots[3];
    ikfast_right_leg::IkReal err[3];
    roots[0] = complex<ikfast_right_leg::IkReal>(1,0);
    roots[1] = complex<ikfast_right_leg::IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<ikfast_right_leg::IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<ikfast_right_leg::IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(ikfast_right_leg::IkReal rawcoeffs[2+1], ikfast_right_leg::IkReal rawroots[2], int& numroots) {
    ikfast_right_leg::IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(ikfast_right_leg::IkReal rawcoeffs[4+1], ikfast_right_leg::IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const ikfast_right_leg::IkReal tol = 128.0*std::numeric_limits<ikfast_right_leg::IkReal>::epsilon();
    const ikfast_right_leg::IkReal tolsqrt = sqrt(std::numeric_limits<ikfast_right_leg::IkReal>::epsilon());
    complex<ikfast_right_leg::IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<ikfast_right_leg::IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<ikfast_right_leg::IkReal> roots[4];
    ikfast_right_leg::IkReal err[4];
    roots[0] = complex<ikfast_right_leg::IkReal>(1,0);
    roots[1] = complex<ikfast_right_leg::IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<ikfast_right_leg::IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<ikfast_right_leg::IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
bool ComputeIk(const ikfast_right_leg::IkReal* eetrans, const ikfast_right_leg::IkReal* eerot, const ikfast_right_leg::IkReal* pfree, IkSolutionListBase<ikfast_right_leg::IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

bool ComputeIk2(const ikfast_right_leg::IkReal* eetrans, const ikfast_right_leg::IkReal* eerot, const ikfast_right_leg::IkReal* pfree, IkSolutionListBase<ikfast_right_leg::IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

const char* GetKinematicsHash() { return "<robot:GenericRobot - talos (b5711066cf78f3ca2f78c520c687367a)>"; }

const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE_RIGHT;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<ikfast_right_leg::IkReal> solutions;
    std::vector<ikfast_right_leg::IkReal> vfree(GetNumFreeParameters());
    ikfast_right_leg::IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<ikfast_right_leg::IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<ikfast_right_leg::IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<ikfast_right_leg::IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

}
